{"version":3,"sources":["../../../src/utils/event-registrar.js"],"names":["whichButtons","getOffsetPosition","EventRegistrar","eventManager","handlers","handlersByElement","Map","handleEvent","bind","length","type","handler","srcElement","once","has","set","entry","push","get","i","splice","entries","indexOf","event","isEmpty","mjolnirEvent","_normalizeEvent","target","srcEvent","rootElement","_emit","handled","parentNode","immediatePropagationStopped","stopPropagation","stopImmediatePropagation","entriesToRemove","Object","assign","remove","element"],"mappings":"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","sourcesContent":["import {whichButtons, getOffsetPosition} from './event-utils';\n\nexport default class EventRegistrar {\n  constructor(eventManager) {\n    this.eventManager = eventManager;\n    this.handlers = [];\n    // Element -> handler map\n    this.handlersByElement = new Map();\n\n    this.handleEvent = this.handleEvent.bind(this);\n  }\n\n  isEmpty() {\n    return this.handlers.length === 0;\n  }\n\n  add(type, handler, srcElement = 'root', once = false) {\n    const {handlers, handlersByElement} = this;\n\n    if (!handlersByElement.has(srcElement)) {\n      handlersByElement.set(srcElement, []);\n    }\n    const entry = {type, handler, srcElement, once};\n    handlers.push(entry);\n    handlersByElement.get(srcElement).push(entry);\n  }\n\n  remove(type, handler) {\n    const {handlers, handlersByElement} = this;\n\n    for (let i = handlers.length - 1; i >= 0; i--) {\n      const entry = handlers[i];\n\n      if (entry.type === type && entry.handler === handler) {\n        handlers.splice(i, 1);\n        const entries = handlersByElement.get(entry.srcElement);\n        entries.splice(entries.indexOf(entry), 1);\n        if (entries.length === 0) {\n          handlersByElement.delete(entry.srcElement);\n        }\n      }\n    }\n  }\n\n  /**\n   * Handles hammerjs event\n   */\n  handleEvent(event) {\n    if (this.isEmpty()) {\n      return;\n    }\n\n    const mjolnirEvent = this._normalizeEvent(event);\n    let target = event.srcEvent.target;\n\n    while (target && target !== mjolnirEvent.rootElement) {\n      this._emit(mjolnirEvent, target);\n      if (mjolnirEvent.handled) {\n        return;\n      }\n      target = target.parentNode;\n    }\n    this._emit(mjolnirEvent, 'root');\n  }\n\n  /**\n   * Invoke handlers on a particular element\n   */\n  _emit(event, srcElement) {\n    const entries = this.handlersByElement.get(srcElement);\n\n    if (entries) {\n      let immediatePropagationStopped = false;\n\n      // Prevents the current event from bubbling up\n      const stopPropagation = () => {\n        event.handled = true;\n      };\n      // Prevent any remaining listeners from being called\n      const stopImmediatePropagation = () => {\n        event.handled = true;\n        immediatePropagationStopped = true;\n      };\n      const entriesToRemove = [];\n\n      for (let i = 0; i < entries.length; i++) {\n        const {type, handler, once} = entries[i];\n        handler(\n          Object.assign({}, event, {\n            type,\n            stopPropagation,\n            stopImmediatePropagation\n          })\n        );\n        if (once) {\n          entriesToRemove.push(entries[i]);\n        }\n        if (immediatePropagationStopped) {\n          break;\n        }\n      }\n\n      for (let i = 0; i < entriesToRemove.length; i++) {\n        const {type, handler} = entriesToRemove[i];\n        this.remove(type, handler);\n      }\n    }\n  }\n\n  /**\n   * Normalizes hammerjs and custom events to have predictable fields.\n   */\n  _normalizeEvent(event) {\n    const rootElement = this.eventManager.element;\n\n    return Object.assign({}, event, whichButtons(event), getOffsetPosition(event, rootElement), {\n      handled: false,\n      rootElement\n    });\n  }\n}\n"],"file":"event-registrar.js"}