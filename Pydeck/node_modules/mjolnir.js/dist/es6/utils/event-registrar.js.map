{"version":3,"sources":["../../../src/utils/event-registrar.js"],"names":["whichButtons","getOffsetPosition","EventRegistrar","constructor","eventManager","handlers","handlersByElement","Map","handleEvent","bind","isEmpty","length","add","type","handler","srcElement","once","has","set","entry","push","get","remove","i","splice","entries","indexOf","delete","event","mjolnirEvent","_normalizeEvent","target","srcEvent","rootElement","_emit","handled","parentNode","immediatePropagationStopped","stopPropagation","stopImmediatePropagation","entriesToRemove","Object","assign","element"],"mappings":"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","sourcesContent":["import {whichButtons, getOffsetPosition} from './event-utils';\n\nexport default class EventRegistrar {\n  constructor(eventManager) {\n    this.eventManager = eventManager;\n    this.handlers = [];\n    // Element -> handler map\n    this.handlersByElement = new Map();\n\n    this.handleEvent = this.handleEvent.bind(this);\n  }\n\n  isEmpty() {\n    return this.handlers.length === 0;\n  }\n\n  add(type, handler, srcElement = 'root', once = false) {\n    const {handlers, handlersByElement} = this;\n\n    if (!handlersByElement.has(srcElement)) {\n      handlersByElement.set(srcElement, []);\n    }\n    const entry = {type, handler, srcElement, once};\n    handlers.push(entry);\n    handlersByElement.get(srcElement).push(entry);\n  }\n\n  remove(type, handler) {\n    const {handlers, handlersByElement} = this;\n\n    for (let i = handlers.length - 1; i >= 0; i--) {\n      const entry = handlers[i];\n\n      if (entry.type === type && entry.handler === handler) {\n        handlers.splice(i, 1);\n        const entries = handlersByElement.get(entry.srcElement);\n        entries.splice(entries.indexOf(entry), 1);\n        if (entries.length === 0) {\n          handlersByElement.delete(entry.srcElement);\n        }\n      }\n    }\n  }\n\n  /**\n   * Handles hammerjs event\n   */\n  handleEvent(event) {\n    if (this.isEmpty()) {\n      return;\n    }\n\n    const mjolnirEvent = this._normalizeEvent(event);\n    let target = event.srcEvent.target;\n\n    while (target && target !== mjolnirEvent.rootElement) {\n      this._emit(mjolnirEvent, target);\n      if (mjolnirEvent.handled) {\n        return;\n      }\n      target = target.parentNode;\n    }\n    this._emit(mjolnirEvent, 'root');\n  }\n\n  /**\n   * Invoke handlers on a particular element\n   */\n  _emit(event, srcElement) {\n    const entries = this.handlersByElement.get(srcElement);\n\n    if (entries) {\n      let immediatePropagationStopped = false;\n\n      // Prevents the current event from bubbling up\n      const stopPropagation = () => {\n        event.handled = true;\n      };\n      // Prevent any remaining listeners from being called\n      const stopImmediatePropagation = () => {\n        event.handled = true;\n        immediatePropagationStopped = true;\n      };\n      const entriesToRemove = [];\n\n      for (let i = 0; i < entries.length; i++) {\n        const {type, handler, once} = entries[i];\n        handler(\n          Object.assign({}, event, {\n            type,\n            stopPropagation,\n            stopImmediatePropagation\n          })\n        );\n        if (once) {\n          entriesToRemove.push(entries[i]);\n        }\n        if (immediatePropagationStopped) {\n          break;\n        }\n      }\n\n      for (let i = 0; i < entriesToRemove.length; i++) {\n        const {type, handler} = entriesToRemove[i];\n        this.remove(type, handler);\n      }\n    }\n  }\n\n  /**\n   * Normalizes hammerjs and custom events to have predictable fields.\n   */\n  _normalizeEvent(event) {\n    const rootElement = this.eventManager.element;\n\n    return Object.assign({}, event, whichButtons(event), getOffsetPosition(event, rootElement), {\n      handled: false,\n      rootElement\n    });\n  }\n}\n"],"file":"event-registrar.js"}