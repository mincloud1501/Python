{"version":3,"sources":["../../../src/gltf/gltf-material-parser.js"],"names":["GLTFMaterialParser","gl","attributes","material","pbrDebug","imageBasedLightingEnvironment","lights","useTangents","defines","USE_TEX_LOD","MANUAL_SRGB","SRGB_FAST_APPROXIMATION","uniforms","u_Camera","u_MetallicRoughnessValues","parameters","generatedTextures","u_DiffuseEnvSampler","getDiffuseEnvSampler","u_SpecularEnvSampler","getSpecularEnvSampler","u_brdfLUT","getBrdfTexture","u_ScaleIBLAmbient","u_ScaleDiffBaseMR","u_ScaleFGDSpec","defineIfPresent","NORMAL","TANGENT","TEXCOORD_0","parseMaterial","value","name","gltfTexture","define","texture","sampler","Texture2D","id","pixelStore","UNPACK_FLIP_Y_WEBGL","data","source","getImageAsync","push","pbrMetallicRoughness","baseColorTexture","parseTexture","u_BaseColorFactor","baseColorFactor","metallicRoughnessTexture","metallicFactor","roughnessFactor","parsePbrMetallicRoughness","normalTexture","scale","u_NormalScale","occlusionTexture","strength","u_OcclusionStrength","emissiveTexture","u_EmissiveFactor","emissiveFactor","alphaMode","alphaCutoff","ALPHA_CUTOFF","u_AlphaCutoff","log","warn","Object","assign","blend","blendEquation","FUNC_ADD","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","ONE"],"mappings":"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","sourcesContent":["import {Texture2D, log} from '@luma.gl/core';\n\nexport default class GLTFMaterialParser {\n  constructor(\n    gl,\n    {attributes, material, pbrDebug, imageBasedLightingEnvironment, lights, useTangents}\n  ) {\n    this.gl = gl;\n\n    this.defines = {\n      USE_TEX_LOD: 1,\n\n      // TODO: Use EXT_sRGB if available (Standard in WebGL 2.0)\n      MANUAL_SRGB: 1,\n      SRGB_FAST_APPROXIMATION: 1\n    };\n\n    this.uniforms = {\n      // TODO: find better values?\n      u_Camera: [0, 0, 0], // Model should override\n\n      u_MetallicRoughnessValues: [1, 1] // Default is 1 and 1\n    };\n\n    this.parameters = {};\n    this.generatedTextures = [];\n\n    if (imageBasedLightingEnvironment) {\n      this.uniforms.u_DiffuseEnvSampler = imageBasedLightingEnvironment.getDiffuseEnvSampler();\n      this.uniforms.u_SpecularEnvSampler = imageBasedLightingEnvironment.getSpecularEnvSampler();\n      this.uniforms.u_brdfLUT = imageBasedLightingEnvironment.getBrdfTexture();\n      this.uniforms.u_ScaleIBLAmbient = [1, 1];\n    }\n\n    if (pbrDebug) {\n      // Override final color for reference app visualization\n      // of various parameters in the lighting equation.\n      this.uniforms.u_ScaleDiffBaseMR = [0, 0, 0, 0];\n      this.uniforms.u_ScaleFGDSpec = [0, 0, 0, 0];\n    }\n\n    this.defineIfPresent(attributes.NORMAL, 'HAS_NORMALS');\n    this.defineIfPresent(attributes.TANGENT && useTangents, 'HAS_TANGENTS');\n    this.defineIfPresent(attributes.TEXCOORD_0, 'HAS_UV');\n\n    this.defineIfPresent(imageBasedLightingEnvironment, 'USE_IBL');\n    this.defineIfPresent(lights, 'USE_LIGHTS');\n    this.defineIfPresent(pbrDebug, 'PBR_DEBUG');\n\n    if (material) {\n      this.parseMaterial(material);\n    }\n  }\n\n  defineIfPresent(value, name) {\n    if (value) {\n      this.defines[name] = 1;\n    }\n  }\n\n  parseTexture(gltfTexture, name, define = null) {\n    const parameters =\n      (gltfTexture.texture &&\n        gltfTexture.texture.sampler &&\n        gltfTexture.texture.sampler.parameters) ||\n      {};\n\n    const texture = new Texture2D(this.gl, {\n      id: gltfTexture.name || gltfTexture.id,\n      parameters,\n      pixelStore: {\n        [this.gl.UNPACK_FLIP_Y_WEBGL]: false\n      },\n      // Texture2D accepts a promise that returns an image as data (Async Textures)\n      data: gltfTexture.texture.source.getImageAsync()\n    });\n    this.uniforms[name] = texture;\n    this.defineIfPresent(define, define);\n    this.generatedTextures.push(texture);\n  }\n\n  parsePbrMetallicRoughness(pbrMetallicRoughness) {\n    if (pbrMetallicRoughness.baseColorTexture) {\n      this.parseTexture(\n        pbrMetallicRoughness.baseColorTexture,\n        'u_BaseColorSampler',\n        'HAS_BASECOLORMAP'\n      );\n    }\n    this.uniforms.u_BaseColorFactor = pbrMetallicRoughness.baseColorFactor || [1, 1, 1, 1];\n\n    if (pbrMetallicRoughness.metallicRoughnessTexture) {\n      this.parseTexture(\n        pbrMetallicRoughness.metallicRoughnessTexture,\n        'u_MetallicRoughnessSampler',\n        'HAS_METALROUGHNESSMAP'\n      );\n    }\n    const {metallicFactor = 1, roughnessFactor = 1} = pbrMetallicRoughness;\n    this.uniforms.u_MetallicRoughnessValues = [metallicFactor, roughnessFactor];\n  }\n\n  parseMaterial(material) {\n    if (material.pbrMetallicRoughness) {\n      this.parsePbrMetallicRoughness(material.pbrMetallicRoughness);\n    }\n    if (material.normalTexture) {\n      this.parseTexture(material.normalTexture, 'u_NormalSampler', 'HAS_NORMALMAP');\n\n      const {scale = 1} = material.normalTexture;\n      this.uniforms.u_NormalScale = scale;\n    }\n    if (material.occlusionTexture) {\n      this.parseTexture(material.occlusionTexture, 'u_OcclusionSampler', 'HAS_OCCLUSIONMAP');\n\n      const {strength = 1} = material.occlusionTexture;\n      this.uniforms.u_OcclusionStrength = strength;\n    }\n    if (material.emissiveTexture) {\n      this.parseTexture(material.emissiveTexture, 'u_EmissiveSampler', 'HAS_EMISSIVEMAP');\n      this.uniforms.u_EmissiveFactor = material.emissiveFactor || [0, 0, 0];\n    }\n    if (material.alphaMode === 'MASK') {\n      const {alphaCutoff = 0.5} = material;\n      this.defines.ALPHA_CUTOFF = 1;\n      this.uniforms.u_AlphaCutoff = alphaCutoff;\n    } else if (material.alphaMode === 'BLEND') {\n      log.warn('BLEND alphaMode might not work well because it requires mesh sorting')();\n      Object.assign(this.parameters, {\n        blend: true,\n        blendEquation: this.gl.FUNC_ADD,\n        blendFunc: [\n          this.gl.SRC_ALPHA,\n          this.gl.ONE_MINUS_SRC_ALPHA,\n          this.gl.ONE,\n          this.gl.ONE_MINUS_SRC_ALPHA\n        ]\n      });\n    }\n  }\n}\n"],"file":"gltf-material-parser.js"}