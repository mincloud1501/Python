{"version":3,"sources":["../../../src/gltf/gltf-scenegraph-loader.js"],"names":["parse","data","options","uri","loader","gl","GLTFLoader","decompress","gltf","gltfObjects","waitForFullLoad","waitForGLTFAssets","Object","assign","remaining","scenes","forEach","scene","traverse","model","values","program","uniforms","uniform","loaded","push","waitWhileCondition","some","condition","Promise","resolve","window","requestAnimationFrame","name","extensions"],"mappings":";;;;;;;;;;;;;;;AACA;;AACA;;AACA;;SAEeA,K;;;;;2EAAf,iBAAqBC,IAArB,EAA2BC,OAA3B,EAAoCC,GAApC,EAAyCC,MAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,8BAAOF,OAAO,CAACG,EAAf;AADF;AAAA,mBAGqBC,iBAAWN,KAAX,CAAiBC,IAAjB,qCACdC,OADc;AAEjBC,cAAAA,GAAG,EAAHA,GAFiB;AAGjBI,cAAAA,UAAU,EAAE;AAHK,eAHrB;;AAAA;AAGQC,YAAAA,IAHR;AASQC,YAAAA,WATR,GASsB,mCAAkBP,OAAO,CAACG,EAA1B,EAA8BG,IAA9B,EAAoCN,OAApC,CATtB;;AAAA,iBAWMA,OAAO,CAACQ,eAXd;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAYUC,iBAAiB,CAACF,WAAD,CAZ3B;;AAAA;AAAA,6CAeSG,MAAM,CAACC,MAAP,CAAc;AAACL,cAAAA,IAAI,EAAJA;AAAD,aAAd,EAAsBC,WAAtB,CAfT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAkBeE,iB;;;;;uFAAf,kBAAiCF,WAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AACQK,YAAAA,SADR,GACoB,EADpB;AAGEL,YAAAA,WAAW,CAACM,MAAZ,CAAmBC,OAAnB,CAA2B,UAAAC,KAAK,EAAI;AAClCA,cAAAA,KAAK,CAACC,QAAN,CAAe,UAAAC,KAAK,EAAI;AACtBP,gBAAAA,MAAM,CAACQ,MAAP,CAAcD,KAAK,CAACA,KAAN,CAAYE,OAAZ,CAAoBC,QAAlC,EAA4CN,OAA5C,CAAoD,UAAAO,OAAO,EAAI;AAC7D,sBAAIA,OAAO,CAACC,MAAR,KAAmB,KAAvB,EAA8B;AAC5BV,oBAAAA,SAAS,CAACW,IAAV,CAAeF,OAAf;AACD;AACF,iBAJD;AAKD,eAND;AAOD,aARD;AAHF;AAAA,mBAaeG,kBAAkB,CAAC;AAAA,qBAAMZ,SAAS,CAACa,IAAV,CAAe,UAAAJ,OAAO;AAAA,uBAAI,CAACA,OAAO,CAACC,MAAb;AAAA,eAAtB,CAAN;AAAA,aAAD,CAbjC;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAgBeE,kB;;;;;wFAAf,kBAAkCE,SAAlC;AAAA;AAAA;AAAA;AAAA;AAAA,iBACSA,SAAS,EADlB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAEU,IAAIC,OAAJ,CAAY,UAAAC,OAAO;AAAA,qBAAIC,MAAM,CAACC,qBAAP,CAA6BF,OAA7B,CAAJ;AAAA,aAAnB,CAFV;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;eAMe;AACbG,EAAAA,IAAI,EAAE,wBADO;AAEbC,EAAAA,UAAU,EAAE,CAAC,MAAD,EAAS,KAAT,CAFC;AAGblC,EAAAA,KAAK,EAALA;AAHa,C","sourcesContent":["/* global window */\nimport {assert} from '@luma.gl/core';\nimport {GLTFLoader} from '@loaders.gl/gltf';\nimport createGLTFObjects from './create-gltf-objects';\n\nasync function parse(data, options, uri, loader) {\n  assert(options.gl);\n\n  const gltf = await GLTFLoader.parse(data, {\n    ...options,\n    uri,\n    decompress: true\n  });\n\n  const gltfObjects = createGLTFObjects(options.gl, gltf, options);\n\n  if (options.waitForFullLoad) {\n    await waitForGLTFAssets(gltfObjects);\n  }\n\n  return Object.assign({gltf}, gltfObjects);\n}\n\nasync function waitForGLTFAssets(gltfObjects) {\n  const remaining = [];\n\n  gltfObjects.scenes.forEach(scene => {\n    scene.traverse(model => {\n      Object.values(model.model.program.uniforms).forEach(uniform => {\n        if (uniform.loaded === false) {\n          remaining.push(uniform);\n        }\n      });\n    });\n  });\n\n  return await waitWhileCondition(() => remaining.some(uniform => !uniform.loaded));\n}\n\nasync function waitWhileCondition(condition) {\n  while (condition()) {\n    await new Promise(resolve => window.requestAnimationFrame(resolve));\n  }\n}\n\nexport default {\n  name: 'GLTF Scenegraph Loader',\n  extensions: ['gltf', 'glb'],\n  parse\n};\n"],"file":"gltf-scenegraph-loader.js"}