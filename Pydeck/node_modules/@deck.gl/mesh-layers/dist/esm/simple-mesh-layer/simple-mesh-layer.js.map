{"version":3,"sources":["../../../src/simple-mesh-layer/simple-mesh-layer.js"],"names":["Layer","Model","Geometry","Texture2D","PhongMaterial","isWebGL2","MATRIX_ATTRIBUTES","vs1","fs1","vs3","fs3","assert","condition","message","Error","getTextureFromData","gl","data","opts","Object","assign","validateGeometryAttributes","attributes","positions","POSITION","getGeometry","DEFAULT_COLOR","defaultMaterial","defaultProps","mesh","value","type","async","texture","sizeScale","min","parameters","depthTest","depthFunc","opacity","wireframe","material","getPosition","x","position","getColor","getOrientation","getScale","getTranslation","getTransformMatrix","SimpleMeshLayer","gl2","context","vs","fs","modules","attributeManager","getAttributeManager","addInstanced","instancePositions","transition","fp64","use64bitPositions","size","accessor","instanceColors","props","colorFormat","length","normalized","defaultValue","instanceModelMatrix","setState","emptyTexture","Uint8Array","width","height","oldProps","changeFlags","extensionsChanged","state","model","getModel","hasNormals","Boolean","NORMAL","normals","invalidateAll","setTexture","setDrawMode","uniforms","draw","flatShade","getShaders","id","geometry","isInstanced","setUniforms","sampler","hasTexture","image","layerName"],"mappings":"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","sourcesContent":["// Note: This file will either be moved back to deck.gl or reformatted to web-monorepo standards\n// Disabling lint temporarily to facilitate copying code in and out of this repo\n/* eslint-disable */\n\n// Copyright (c) 2015 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry, Texture2D, PhongMaterial, isWebGL2} from '@luma.gl/core';\n\nimport {MATRIX_ATTRIBUTES} from '../utils/matrix';\n\n// NOTE(Tarek): Should eventually phase out the glsl1 versions.\nimport vs1 from './simple-mesh-layer-vertex.glsl1';\nimport fs1 from './simple-mesh-layer-fragment.glsl1';\nimport vs3 from './simple-mesh-layer-vertex.glsl';\nimport fs3 from './simple-mesh-layer-fragment.glsl';\n\n// Replacement for the external assert method to reduce bundle size\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error(`deck.gl: ${message}`);\n  }\n}\n\n/*\n * Convert image data into texture\n * @returns {Texture2D} texture\n */\nfunction getTextureFromData(gl, data, opts) {\n  if (data instanceof Texture2D) {\n    return data;\n  }\n  return new Texture2D(gl, Object.assign({data}, opts));\n}\n\nfunction validateGeometryAttributes(attributes) {\n  assert(\n    attributes.positions || attributes.POSITION,\n    'SimpleMeshLayer requires \"postions\" or \"POSITION\" attribute in mesh property.'\n  );\n}\n\n/*\n * Convert mesh data into geometry\n * @returns {Geometry} geometry\n */\nfunction getGeometry(data) {\n  if (data.attributes) {\n    validateGeometryAttributes(data.attributes);\n    if (data instanceof Geometry) {\n      return data;\n    } else {\n      return new Geometry(data);\n    }\n  } else if (data.positions || data.POSITION) {\n    validateGeometryAttributes(data);\n    return new Geometry({\n      attributes: data\n    });\n  }\n  throw Error('Invalid mesh');\n}\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst defaultMaterial = new PhongMaterial();\n\nconst defaultProps = {\n  mesh: {value: null, type: 'object', async: true},\n  texture: null,\n  sizeScale: {type: 'number', value: 1, min: 0},\n  // TODO - parameters should be merged, not completely overridden\n  parameters: {\n    depthTest: true,\n    depthFunc: GL.LEQUAL\n  },\n  opacity: 1.0,\n\n  // NOTE(Tarek): Quick and dirty wireframe. Just draws\n  // the same mesh with LINE_STRIPS. Won't follow edges\n  // of the original mesh.\n  wireframe: false,\n  // Optional material for 'lighting' shader module\n  material: defaultMaterial,\n  getPosition: {type: 'accessor', value: x => x.position},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n\n  // yaw, pitch and roll are in degrees\n  // https://en.wikipedia.org/wiki/Euler_angles\n  // [pitch, yaw, roll]\n  getOrientation: {type: 'accessor', value: [0, 0, 0]},\n  getScale: {type: 'accessor', value: [1, 1, 1]},\n  getTranslation: {type: 'accessor', value: [0, 0, 0]},\n  // 4x4 matrix\n  getTransformMatrix: {type: 'accessor', value: []}\n};\n\nexport default class SimpleMeshLayer extends Layer {\n  getShaders() {\n    const gl2 = isWebGL2(this.context.gl);\n    const vs = gl2 ? vs3 : vs1;\n    const fs = gl2 ? fs3 : fs1;\n\n    return super.getShaders({vs, fs, modules: ['project32', 'phong-lighting', 'picking']});\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n\n    attributeManager.addInstanced({\n      instancePositions: {\n        transition: true,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        size: 3,\n        accessor: 'getPosition'\n      },\n      instanceColors: {\n        type: GL.UNSIGNED_BYTE,\n        transition: true,\n        size: this.props.colorFormat.length,\n        normalized: true,\n        accessor: 'getColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceModelMatrix: MATRIX_ATTRIBUTES\n    });\n\n    this.setState({\n      // Avoid luma.gl's missing uniform warning\n      // TODO - add feature to luma.gl to specify ignored uniforms?\n      emptyTexture: new Texture2D(this.context.gl, {\n        data: new Uint8Array(4),\n        width: 1,\n        height: 1\n      })\n    });\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n\n    if (props.mesh !== oldProps.mesh || changeFlags.extensionsChanged) {\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      if (props.mesh) {\n        this.setState({model: this.getModel(props.mesh)});\n\n        const attributes = props.mesh.attributes || props.mesh;\n        this.setState({\n          hasNormals: Boolean(attributes.NORMAL || attributes.normals)\n        });\n      }\n      this.getAttributeManager().invalidateAll();\n    }\n\n    if (props.texture !== oldProps.texture) {\n      this.setTexture(props.texture);\n    }\n\n    if (this.state.model) {\n      this.state.model.setDrawMode(this.props.wireframe ? GL.LINE_STRIP : GL.TRIANGLES);\n    }\n  }\n\n  finalizeState() {\n    super.finalizeState();\n\n    this.state.emptyTexture.delete();\n    if (this.state.texture) {\n      this.state.texture.delete();\n    }\n  }\n\n  draw({uniforms}) {\n    if (!this.state.model) {\n      return;\n    }\n\n    const {sizeScale} = this.props;\n\n    this.state.model.draw({\n      uniforms: Object.assign({}, uniforms, {\n        sizeScale,\n        flatShade: !this.state.hasNormals\n      })\n    });\n  }\n\n  getModel(mesh) {\n    const model = new Model(\n      this.context.gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: getGeometry(mesh),\n        isInstanced: true\n      })\n    );\n\n    const {texture, emptyTexture} = this.state;\n    model.setUniforms({\n      sampler: texture || emptyTexture,\n      hasTexture: Boolean(texture)\n    });\n\n    return model;\n  }\n\n  setTexture(image) {\n    const {gl} = this.context;\n    const {emptyTexture, model} = this.state;\n\n    if (this.state.texture) {\n      this.state.texture.delete();\n    }\n\n    const texture = image ? getTextureFromData(gl, image) : null;\n    this.setState({texture});\n\n    if (model) {\n      // props.mesh may not be ready at this time.\n      // The sampler will be set when `getModel` is called\n      model.setUniforms({\n        sampler: texture || emptyTexture,\n        hasTexture: Boolean(texture)\n      });\n    }\n  }\n}\n\nSimpleMeshLayer.layerName = 'SimpleMeshLayer';\nSimpleMeshLayer.defaultProps = defaultProps;\n"],"file":"simple-mesh-layer.js"}