{"version":3,"sources":["../../../../src/tile-layer/utils/tile-cache.js"],"names":["TileCache","getTileData","maxSize","maxZoom","minZoom","onTileLoad","onTileError","_getTileData","_maxSize","_cache","Map","_tiles","Number","isFinite","_maxZoom","Math","floor","_minZoom","ceil","clear","viewport","_markOldTiles","tileIndices","length","forEach","cachedTile","some","tile","isOverlapped","isVisible","changed","i","tileIndex","x","y","z","_getTile","Tile","tileId","_getTileId","set","commonZoomRange","_resizeCache","Array","from","values","sort","t1","t2","size","iterator","Symbol","get"],"mappings":"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","sourcesContent":["import Tile from './tile';\nimport {getTileIndices} from './viewport-util';\n\n/**\n * Manages loading and purging of tiles data. This class caches recently visited tiles\n * and only create new tiles if they are present.\n */\n\nexport default class TileCache {\n  /**\n   * Takes in a function that returns tile data, a cache size, and a max and a min zoom level.\n   * Cache size defaults to 5 * number of tiles in the current viewport\n   */\n  constructor({getTileData, maxSize, maxZoom, minZoom, onTileLoad, onTileError}) {\n    // TODO: Instead of hardcode size, we should calculate how much memory left\n    this._getTileData = getTileData;\n    this._maxSize = maxSize;\n    this.onTileError = onTileError;\n    this.onTileLoad = onTileLoad;\n\n    // Maps tile id in string {z}-{x}-{y} to a Tile object\n    this._cache = new Map();\n    this._tiles = [];\n\n    if (Number.isFinite(maxZoom)) {\n      this._maxZoom = Math.floor(maxZoom);\n    }\n    if (Number.isFinite(minZoom)) {\n      this._minZoom = Math.ceil(minZoom);\n    }\n  }\n\n  get tiles() {\n    return this._tiles;\n  }\n\n  /**\n   * Clear the current cache\n   */\n  finalize() {\n    this._cache.clear();\n  }\n\n  /**\n   * Update the cache with the given viewport and triggers callback onUpdate.\n   * @param {*} viewport\n   * @param {*} onUpdate\n   */\n  update(viewport) {\n    const {_cache, _getTileData, _maxSize, _maxZoom, _minZoom} = this;\n    this._markOldTiles();\n    const tileIndices = getTileIndices(viewport, _maxZoom, _minZoom);\n    if (!tileIndices || tileIndices.length === 0) {\n      return;\n    }\n    _cache.forEach(cachedTile => {\n      if (tileIndices.some(tile => cachedTile.isOverlapped(tile))) {\n        cachedTile.isVisible = true;\n      }\n    });\n\n    let changed = false;\n\n    for (let i = 0; i < tileIndices.length; i++) {\n      const tileIndex = tileIndices[i];\n\n      const {x, y, z} = tileIndex;\n      let tile = this._getTile(x, y, z);\n      if (!tile) {\n        tile = new Tile({\n          getTileData: _getTileData,\n          x,\n          y,\n          z,\n          onTileLoad: this.onTileLoad,\n          onTileError: this.onTileError\n        });\n        tile.isVisible = true;\n        changed = true;\n      }\n      const tileId = this._getTileId(x, y, z);\n      _cache.set(tileId, tile);\n    }\n\n    if (changed) {\n      // cache size is either the user defined maxSize or 5 * number of current tiles in the viewport.\n      const commonZoomRange = 5;\n      this._resizeCache(_maxSize || commonZoomRange * tileIndices.length);\n      this._tiles = Array.from(this._cache.values())\n        // sort by zoom level so parents tiles don't show up when children tiles are rendered\n        .sort((t1, t2) => t1.z - t2.z);\n    }\n  }\n\n  /**\n   * Clear tiles that are not visible when the cache is full\n   */\n  _resizeCache(maxSize) {\n    const {_cache} = this;\n    if (_cache.size > maxSize) {\n      const iterator = _cache[Symbol.iterator]();\n      for (const cachedTile of iterator) {\n        if (_cache.size <= maxSize) {\n          break;\n        }\n        const tileId = cachedTile[0];\n        const tile = cachedTile[1];\n        if (!tile.isVisible) {\n          _cache.delete(tileId);\n        }\n      }\n    }\n  }\n\n  _markOldTiles() {\n    this._cache.forEach(cachedTile => {\n      cachedTile.isVisible = false;\n    });\n  }\n\n  _getTile(x, y, z) {\n    const tileId = this._getTileId(x, y, z);\n    return this._cache.get(tileId);\n  }\n\n  _getTileId(x, y, z) {\n    return `${z}-${x}-${y}`;\n  }\n}\n"],"file":"tile-cache.js"}