{"version":3,"sources":["../../../src/tile-3d-layer/get-frame-state.js"],"names":["scratchPlane","Plane","scratchPosition","Vector3","cullingVolume","CullingVolume","getFrameState","viewport","frameNumber","cameraDirection","cameraUp","height","metersPerPixel","distanceScales","viewportCenterCartographic","longitude","latitude","viewportCenterCartesian","Ellipsoid","WGS84","cartographicToCartesian","enuToFixedTransform","eastNorthUpToFixedFrame","cameraPositionCartographic","unprojectPosition","cameraPosition","cameraPositionCartesian","cameraDirectionCartesian","transformAsVector","scale","normalize","cameraUpCartesian","commonSpacePlanesToWGS84","camera","position","direction","up","sseDenominator","frustumPlanes","getFrustumPlanes","i","dir","plane","distanceToCenter","normal","dot","center","copy","distance","add","cartographicPos","cartesianPos","subtract","Math","abs","planes"],"mappings":"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","sourcesContent":["import {Vector3} from 'math.gl';\nimport {CullingVolume, Plane} from '@math.gl/culling';\nimport {Ellipsoid} from '@math.gl/geospatial';\n\nconst scratchPlane = new Plane();\nconst scratchPosition = new Vector3();\nconst cullingVolume = new CullingVolume([\n  new Plane(),\n  new Plane(),\n  new Plane(),\n  new Plane(),\n  new Plane(),\n  new Plane()\n]);\n\n// Extracts a frame state appropriate for tile culling from a deck.gl viewport\n// TODO - this could likely be generalized and merged back into deck.gl for other culling scenarios\nexport function getFrameState(viewport, frameNumber) {\n  // Traverse and and request. Update _selectedTiles so that we know what to render.\n  const {cameraDirection, cameraUp, height} = viewport;\n  const {metersPerPixel} = viewport.distanceScales;\n\n  const viewportCenterCartographic = [viewport.longitude, viewport.latitude, 0];\n  // TODO - Ellipsoid.eastNorthUpToFixedFrame() breaks on raw array, create a Vector.\n  // TODO - Ellipsoid.eastNorthUpToFixedFrame() takes a cartesian, is that intuitive?\n  const viewportCenterCartesian = Ellipsoid.WGS84.cartographicToCartesian(\n    viewportCenterCartographic,\n    new Vector3()\n  );\n  const enuToFixedTransform = Ellipsoid.WGS84.eastNorthUpToFixedFrame(viewportCenterCartesian);\n\n  const cameraPositionCartographic = viewport.unprojectPosition(viewport.cameraPosition);\n  const cameraPositionCartesian = Ellipsoid.WGS84.cartographicToCartesian(\n    cameraPositionCartographic,\n    new Vector3()\n  );\n\n  // These should still be normalized as the transform has scale 1 (goes from meters to meters)\n  const cameraDirectionCartesian = new Vector3(\n    enuToFixedTransform.transformAsVector(new Vector3(cameraDirection).scale(metersPerPixel))\n  ).normalize();\n  const cameraUpCartesian = new Vector3(\n    enuToFixedTransform.transformAsVector(new Vector3(cameraUp).scale(metersPerPixel))\n  ).normalize();\n\n  commonSpacePlanesToWGS84(viewport);\n\n  // TODO: make a file/class for frameState and document what needs to be attached to this so that traversal can function\n  return {\n    camera: {\n      position: cameraPositionCartesian,\n      direction: cameraDirectionCartesian,\n      up: cameraUpCartesian\n    },\n    height,\n    cullingVolume,\n    frameNumber, // TODO: This can be the same between updates, what number is unique for between updates?\n    sseDenominator: 1.15 // Assumes fovy = 60 degrees\n  };\n}\n\nfunction commonSpacePlanesToWGS84(viewport) {\n  // Extract frustum planes based on current view.\n  const viewportCenterCartographic = [viewport.longitude, viewport.latitude, 0];\n  const viewportCenterCartesian = Ellipsoid.WGS84.cartographicToCartesian(\n    viewportCenterCartographic,\n    new Vector3()\n  );\n\n  const frustumPlanes = viewport.getFrustumPlanes();\n  let i = 0;\n  for (const dir in frustumPlanes) {\n    const plane = frustumPlanes[dir];\n    const distanceToCenter = plane.normal.dot(viewport.center);\n    scratchPosition\n      .copy(plane.normal)\n      .scale(plane.distance - distanceToCenter)\n      .add(viewport.center);\n    const cartographicPos = viewport.unprojectPosition(scratchPosition);\n\n    const cartesianPos = Ellipsoid.WGS84.cartographicToCartesian(cartographicPos, new Vector3());\n\n    scratchPlane.normal\n      .copy(cartesianPos)\n      .subtract(viewportCenterCartesian)\n      .scale(-1) // Want the normal to point into the frustum since that's what culling expects\n      .normalize();\n    scratchPlane.distance = Math.abs(scratchPlane.normal.dot(cartesianPos));\n\n    cullingVolume.planes[i].normal.copy(scratchPlane.normal);\n    cullingVolume.planes[i].distance = scratchPlane.distance;\n    i = i + 1;\n  }\n}\n"],"file":"get-frame-state.js"}