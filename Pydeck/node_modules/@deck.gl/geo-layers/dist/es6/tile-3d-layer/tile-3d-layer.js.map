{"version":3,"sources":["../../../src/tile-3d-layer/tile-3d-layer.js"],"names":["COORDINATE_SYSTEM","CompositeLayer","PointCloudLayer","ScenegraphLayer","Tileset3D","_getIonTilesetMetadata","getFrameState","defaultProps","getPointColor","pointSize","opacity","data","_ionAssetId","_ionAccessToken","loadOptions","throttleRequests","onTilesetLoad","tileset3d","onTileLoad","tileHeader","onTileUnload","onTileLoadFail","tile","message","url","Tile3DLayer","initializeState","state","layerMap","shouldUpdateState","changeFlags","somethingChanged","updateState","props","oldProps","_loadTileset","_loadTilesetFromIon","_updateTileset","tilesetUrl","fetchOptions","ionMetadata","response","fetch","tilesetJson","json","getLoadOptions","setNeedsUpdate","setState","ionAccessToken","ionAssetId","headers","timeline","viewport","context","frameState","Date","now","update","_updateLayerMap","frameNumber","selectedTiles","tilesWithoutLayer","filter","fullUri","addTileToCache","layer","_create3DTileLayer","_selectLayers","layerMapValues","Object","values","value","selectedFrame","visible","clone","contentUnloaded","layers","map","content","type","_createPointCloudTileLayer","_create3DModelTileLayer","Error","gltf","instances","cartographicOrigin","modelMatrix","SubLayerClass","getSubLayerClass","_lighting","getSubLayerProps","id","scenegraph","coordinateSystem","METER_OFFSETS","coordinateOrigin","_composeModelMatrix","getTransformMatrix","instance","getPosition","attributes","pointCount","constantRGBA","positions","normals","colors","header","vertexCount","POSITION","NORMAL","COLOR_0","getColor","renderLayers","layerName"],"mappings":"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","sourcesContent":["/* global fetch */\n\nimport {COORDINATE_SYSTEM, CompositeLayer} from '@deck.gl/core';\nimport {PointCloudLayer} from '@deck.gl/layers';\nimport {ScenegraphLayer} from '@deck.gl/mesh-layers';\n\nimport {Tileset3D, _getIonTilesetMetadata} from '@loaders.gl/3d-tiles';\n\nimport {getFrameState} from './get-frame-state';\n\nconst defaultProps = {\n  getPointColor: [0, 0, 0],\n  pointSize: 1.0,\n  opacity: 1.0,\n\n  data: null,\n  _ionAssetId: null,\n  _ionAccessToken: null,\n  loadOptions: {throttleRequests: true},\n\n  onTilesetLoad: tileset3d => {},\n  onTileLoad: tileHeader => {},\n  onTileUnload: tileHeader => {},\n  onTileLoadFail: (tile, message, url) => {}\n};\n\nexport default class Tile3DLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      layerMap: {},\n      tileset3d: null\n    };\n  }\n\n  shouldUpdateState({changeFlags}) {\n    return changeFlags.somethingChanged;\n  }\n\n  async updateState({props, oldProps}) {\n    if (props.data && props.data !== oldProps.data) {\n      await this._loadTileset(props.data);\n    } else if (\n      (props._ionAccessToken || props._ionAssetId) &&\n      (props._ionAccessToken !== oldProps._ionAccessToken ||\n        props._ionAssetId !== oldProps._ionAssetId)\n    ) {\n      await this._loadTilesetFromIon(props._ionAccessToken, props._ionAssetId);\n    }\n\n    const {tileset3d} = this.state;\n    await this._updateTileset(tileset3d);\n  }\n\n  async _loadTileset(tilesetUrl, fetchOptions, ionMetadata) {\n    const response = await fetch(tilesetUrl, fetchOptions);\n    const tilesetJson = await response.json();\n\n    const loadOptions = this.getLoadOptions();\n\n    const tileset3d = new Tileset3D(tilesetJson, tilesetUrl, {\n      onTileLoad: tileHeader => {\n        this.props.onTileLoad(tileHeader);\n        this._updateTileset(tileset3d);\n        this.setNeedsUpdate();\n      },\n      onTileUnload: this.props.onTileUnload,\n      onTileLoadFail: this.props.onTileLoadFail,\n      // TODO: explicit passing should not be needed, registerLoaders should suffice\n      fetchOptions,\n      ...ionMetadata,\n      ...loadOptions\n    });\n\n    this.setState({\n      tileset3d,\n      layerMap: {}\n    });\n\n    if (tileset3d) {\n      this.props.onTilesetLoad(tileset3d);\n    }\n  }\n\n  async _loadTilesetFromIon(ionAccessToken, ionAssetId) {\n    const ionMetadata = await _getIonTilesetMetadata(ionAccessToken, ionAssetId);\n    const {url, headers} = ionMetadata;\n    return await this._loadTileset(url, {headers}, ionMetadata);\n  }\n\n  _updateTileset(tileset3d) {\n    const {timeline, viewport} = this.context;\n    if (!timeline || !viewport || !tileset3d) {\n      return;\n    }\n\n    // use Date.now() as frame identifier for now and later used to filter layers for rendering\n    const frameState = getFrameState(viewport, Date.now());\n    tileset3d.update(frameState);\n    this._updateLayerMap(frameState.frameNumber);\n  }\n\n  // `Layer` instances is created and added to the map if it doesn't exist yet.\n  _updateLayerMap(frameNumber) {\n    const {tileset3d, layerMap} = this.state;\n\n    // create layers for new tiles\n    const {selectedTiles} = tileset3d;\n    const tilesWithoutLayer = selectedTiles.filter(tile => !layerMap[tile.fullUri]);\n\n    for (const tile of tilesWithoutLayer) {\n      // TODO - why do we call this here? Being \"selected\" should automatically add it to cache?\n      tileset3d.addTileToCache(tile);\n\n      layerMap[tile.fullUri] = {\n        layer: this._create3DTileLayer(tile),\n        tile\n      };\n    }\n\n    // update layer visibility\n    this._selectLayers(frameNumber);\n  }\n\n  // Grab only those layers who were selected this frame.\n  _selectLayers(frameNumber) {\n    const {layerMap} = this.state;\n    const layerMapValues = Object.values(layerMap);\n\n    for (const value of layerMapValues) {\n      const {tile} = value;\n      let {layer} = value;\n\n      if (tile.selectedFrame === frameNumber) {\n        if (layer && layer.props && !layer.props.visible) {\n          // Still has GPU resource but visibility is turned off so turn it back on so we can render it.\n          layer = layer.clone({visible: true});\n          layerMap[tile.fullUri].layer = layer;\n        }\n      } else if (tile.contentUnloaded) {\n        // Was cleaned up from tileset cache. We no longer need to track it.\n        delete layerMap[tile.fullUri];\n      } else if (layer && layer.props && layer.props.visible) {\n        // Still in tileset cache but doesn't need to render this frame. Keep the GPU resource bound but don't render it.\n        layer = layer.clone({visible: false});\n        layerMap[tile.fullUri].layer = layer;\n      }\n    }\n\n    this.setState({layers: Object.values(layerMap).map(layer => layer.layer)});\n  }\n\n  _create3DTileLayer(tileHeader) {\n    if (!tileHeader.content) {\n      return null;\n    }\n\n    switch (tileHeader.content.type) {\n      case 'pnts':\n        return this._createPointCloudTileLayer(tileHeader);\n      case 'i3dm':\n      case 'b3dm':\n        return this._create3DModelTileLayer(tileHeader);\n      default:\n        throw new Error(`Tile3DLayer: Failed to render layer of type ${tileHeader.content.type}`);\n    }\n  }\n\n  _create3DModelTileLayer(tileHeader) {\n    const {gltf, instances, cartographicOrigin, modelMatrix} = tileHeader.content;\n\n    const SubLayerClass = this.getSubLayerClass('scenegraph', ScenegraphLayer);\n\n    return new SubLayerClass(\n      {\n        _lighting: 'pbr'\n      },\n      this.getSubLayerProps({\n        id: 'scenegraph'\n      }),\n      {\n        id: `${this.id}-scenegraph-${tileHeader.fullUri}`,\n        // Fix for ScenegraphLayer.modelMatrix, under flag in deck 7.3 to avoid breaking existing code\n        data: instances || [{}],\n        scenegraph: gltf,\n\n        coordinateSystem: COORDINATE_SYSTEM.METER_OFFSETS,\n        coordinateOrigin: cartographicOrigin,\n        modelMatrix,\n        _composeModelMatrix: true,\n        getTransformMatrix: instance => instance.modelMatrix,\n        getPosition: instance => [0, 0, 0]\n      }\n    );\n  }\n\n  _createPointCloudTileLayer(tileHeader) {\n    const {\n      attributes,\n      pointCount,\n      constantRGBA,\n      cartographicOrigin,\n      modelMatrix\n    } = tileHeader.content;\n    const {positions, normals, colors} = attributes;\n\n    if (!positions) {\n      return null;\n    }\n\n    const {pointSize, getPointColor} = this.props;\n    const SubLayerClass = this.getSubLayerClass('pointcloud', PointCloudLayer);\n\n    return new SubLayerClass(\n      {\n        pointSize\n      },\n      this.getSubLayerProps({\n        id: 'pointcloud'\n      }),\n      {\n        id: `${this.id}-pointcloud-${tileHeader.fullUri}`,\n        data: {\n          header: {\n            vertexCount: pointCount\n          },\n          attributes: {\n            POSITION: positions,\n            NORMAL: normals,\n            COLOR_0: colors\n          }\n        },\n        coordinateSystem: COORDINATE_SYSTEM.METER_OFFSETS,\n        coordinateOrigin: cartographicOrigin,\n        modelMatrix,\n\n        getColor: constantRGBA || getPointColor\n      }\n    );\n  }\n\n  renderLayers() {\n    return this.state.layers;\n  }\n}\n\nTile3DLayer.layerName = 'Tile3DLayer';\nTile3DLayer.defaultProps = defaultProps;\n"],"file":"tile-3d-layer.js"}