{"version":3,"sources":["../../../src/tile-3d-layer/tile-3d-layer.js"],"names":["COORDINATE_SYSTEM","CompositeLayer","PointCloudLayer","ScenegraphLayer","Tileset3D","_getIonTilesetMetadata","getFrameState","defaultProps","getPointColor","pointSize","opacity","data","_ionAssetId","_ionAccessToken","loadOptions","throttleRequests","onTilesetLoad","tileset3d","onTileLoad","tileHeader","onTileUnload","onTileLoadFail","tile","message","url","Tile3DLayer","state","layerMap","changeFlags","somethingChanged","props","oldProps","_loadTileset","_loadTilesetFromIon","_updateTileset","tilesetUrl","fetchOptions","ionMetadata","fetch","response","json","tilesetJson","getLoadOptions","setNeedsUpdate","setState","ionAccessToken","ionAssetId","headers","context","timeline","viewport","frameState","Date","now","update","_updateLayerMap","frameNumber","selectedTiles","tilesWithoutLayer","filter","fullUri","addTileToCache","layer","_create3DTileLayer","_selectLayers","layerMapValues","Object","values","value","selectedFrame","visible","clone","contentUnloaded","layers","map","content","type","_createPointCloudTileLayer","_create3DModelTileLayer","Error","gltf","instances","cartographicOrigin","modelMatrix","SubLayerClass","getSubLayerClass","_lighting","getSubLayerProps","id","scenegraph","coordinateSystem","METER_OFFSETS","coordinateOrigin","_composeModelMatrix","getTransformMatrix","instance","getPosition","attributes","pointCount","constantRGBA","positions","normals","colors","header","vertexCount","POSITION","NORMAL","COLOR_0","getColor","layerName"],"mappings":"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","sourcesContent":["/* global fetch */\n\nimport {COORDINATE_SYSTEM, CompositeLayer} from '@deck.gl/core';\nimport {PointCloudLayer} from '@deck.gl/layers';\nimport {ScenegraphLayer} from '@deck.gl/mesh-layers';\n\nimport {Tileset3D, _getIonTilesetMetadata} from '@loaders.gl/3d-tiles';\n\nimport {getFrameState} from './get-frame-state';\n\nconst defaultProps = {\n  getPointColor: [0, 0, 0],\n  pointSize: 1.0,\n  opacity: 1.0,\n\n  data: null,\n  _ionAssetId: null,\n  _ionAccessToken: null,\n  loadOptions: {throttleRequests: true},\n\n  onTilesetLoad: tileset3d => {},\n  onTileLoad: tileHeader => {},\n  onTileUnload: tileHeader => {},\n  onTileLoadFail: (tile, message, url) => {}\n};\n\nexport default class Tile3DLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      layerMap: {},\n      tileset3d: null\n    };\n  }\n\n  shouldUpdateState({changeFlags}) {\n    return changeFlags.somethingChanged;\n  }\n\n  async updateState({props, oldProps}) {\n    if (props.data && props.data !== oldProps.data) {\n      await this._loadTileset(props.data);\n    } else if (\n      (props._ionAccessToken || props._ionAssetId) &&\n      (props._ionAccessToken !== oldProps._ionAccessToken ||\n        props._ionAssetId !== oldProps._ionAssetId)\n    ) {\n      await this._loadTilesetFromIon(props._ionAccessToken, props._ionAssetId);\n    }\n\n    const {tileset3d} = this.state;\n    await this._updateTileset(tileset3d);\n  }\n\n  async _loadTileset(tilesetUrl, fetchOptions, ionMetadata) {\n    const response = await fetch(tilesetUrl, fetchOptions);\n    const tilesetJson = await response.json();\n\n    const loadOptions = this.getLoadOptions();\n\n    const tileset3d = new Tileset3D(tilesetJson, tilesetUrl, {\n      onTileLoad: tileHeader => {\n        this.props.onTileLoad(tileHeader);\n        this._updateTileset(tileset3d);\n        this.setNeedsUpdate();\n      },\n      onTileUnload: this.props.onTileUnload,\n      onTileLoadFail: this.props.onTileLoadFail,\n      // TODO: explicit passing should not be needed, registerLoaders should suffice\n      fetchOptions,\n      ...ionMetadata,\n      ...loadOptions\n    });\n\n    this.setState({\n      tileset3d,\n      layerMap: {}\n    });\n\n    if (tileset3d) {\n      this.props.onTilesetLoad(tileset3d);\n    }\n  }\n\n  async _loadTilesetFromIon(ionAccessToken, ionAssetId) {\n    const ionMetadata = await _getIonTilesetMetadata(ionAccessToken, ionAssetId);\n    const {url, headers} = ionMetadata;\n    return await this._loadTileset(url, {headers}, ionMetadata);\n  }\n\n  _updateTileset(tileset3d) {\n    const {timeline, viewport} = this.context;\n    if (!timeline || !viewport || !tileset3d) {\n      return;\n    }\n\n    // use Date.now() as frame identifier for now and later used to filter layers for rendering\n    const frameState = getFrameState(viewport, Date.now());\n    tileset3d.update(frameState);\n    this._updateLayerMap(frameState.frameNumber);\n  }\n\n  // `Layer` instances is created and added to the map if it doesn't exist yet.\n  _updateLayerMap(frameNumber) {\n    const {tileset3d, layerMap} = this.state;\n\n    // create layers for new tiles\n    const {selectedTiles} = tileset3d;\n    const tilesWithoutLayer = selectedTiles.filter(tile => !layerMap[tile.fullUri]);\n\n    for (const tile of tilesWithoutLayer) {\n      // TODO - why do we call this here? Being \"selected\" should automatically add it to cache?\n      tileset3d.addTileToCache(tile);\n\n      layerMap[tile.fullUri] = {\n        layer: this._create3DTileLayer(tile),\n        tile\n      };\n    }\n\n    // update layer visibility\n    this._selectLayers(frameNumber);\n  }\n\n  // Grab only those layers who were selected this frame.\n  _selectLayers(frameNumber) {\n    const {layerMap} = this.state;\n    const layerMapValues = Object.values(layerMap);\n\n    for (const value of layerMapValues) {\n      const {tile} = value;\n      let {layer} = value;\n\n      if (tile.selectedFrame === frameNumber) {\n        if (layer && layer.props && !layer.props.visible) {\n          // Still has GPU resource but visibility is turned off so turn it back on so we can render it.\n          layer = layer.clone({visible: true});\n          layerMap[tile.fullUri].layer = layer;\n        }\n      } else if (tile.contentUnloaded) {\n        // Was cleaned up from tileset cache. We no longer need to track it.\n        delete layerMap[tile.fullUri];\n      } else if (layer && layer.props && layer.props.visible) {\n        // Still in tileset cache but doesn't need to render this frame. Keep the GPU resource bound but don't render it.\n        layer = layer.clone({visible: false});\n        layerMap[tile.fullUri].layer = layer;\n      }\n    }\n\n    this.setState({layers: Object.values(layerMap).map(layer => layer.layer)});\n  }\n\n  _create3DTileLayer(tileHeader) {\n    if (!tileHeader.content) {\n      return null;\n    }\n\n    switch (tileHeader.content.type) {\n      case 'pnts':\n        return this._createPointCloudTileLayer(tileHeader);\n      case 'i3dm':\n      case 'b3dm':\n        return this._create3DModelTileLayer(tileHeader);\n      default:\n        throw new Error(`Tile3DLayer: Failed to render layer of type ${tileHeader.content.type}`);\n    }\n  }\n\n  _create3DModelTileLayer(tileHeader) {\n    const {gltf, instances, cartographicOrigin, modelMatrix} = tileHeader.content;\n\n    const SubLayerClass = this.getSubLayerClass('scenegraph', ScenegraphLayer);\n\n    return new SubLayerClass(\n      {\n        _lighting: 'pbr'\n      },\n      this.getSubLayerProps({\n        id: 'scenegraph'\n      }),\n      {\n        id: `${this.id}-scenegraph-${tileHeader.fullUri}`,\n        // Fix for ScenegraphLayer.modelMatrix, under flag in deck 7.3 to avoid breaking existing code\n        data: instances || [{}],\n        scenegraph: gltf,\n\n        coordinateSystem: COORDINATE_SYSTEM.METER_OFFSETS,\n        coordinateOrigin: cartographicOrigin,\n        modelMatrix,\n        _composeModelMatrix: true,\n        getTransformMatrix: instance => instance.modelMatrix,\n        getPosition: instance => [0, 0, 0]\n      }\n    );\n  }\n\n  _createPointCloudTileLayer(tileHeader) {\n    const {\n      attributes,\n      pointCount,\n      constantRGBA,\n      cartographicOrigin,\n      modelMatrix\n    } = tileHeader.content;\n    const {positions, normals, colors} = attributes;\n\n    if (!positions) {\n      return null;\n    }\n\n    const {pointSize, getPointColor} = this.props;\n    const SubLayerClass = this.getSubLayerClass('pointcloud', PointCloudLayer);\n\n    return new SubLayerClass(\n      {\n        pointSize\n      },\n      this.getSubLayerProps({\n        id: 'pointcloud'\n      }),\n      {\n        id: `${this.id}-pointcloud-${tileHeader.fullUri}`,\n        data: {\n          header: {\n            vertexCount: pointCount\n          },\n          attributes: {\n            POSITION: positions,\n            NORMAL: normals,\n            COLOR_0: colors\n          }\n        },\n        coordinateSystem: COORDINATE_SYSTEM.METER_OFFSETS,\n        coordinateOrigin: cartographicOrigin,\n        modelMatrix,\n\n        getColor: constantRGBA || getPointColor\n      }\n    );\n  }\n\n  renderLayers() {\n    return this.state.layers;\n  }\n}\n\nTile3DLayer.layerName = 'Tile3DLayer';\nTile3DLayer.defaultProps = defaultProps;\n"],"file":"tile-3d-layer.js"}