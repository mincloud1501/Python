import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import { CompositeLayer } from '@deck.gl/core';
import { GeoJsonLayer } from '@deck.gl/layers';
import TileCache from './utils/tile-cache';
var defaultProps = {
  renderSubLayers: {
    type: 'function',
    value: function value(props) {
      return new GeoJsonLayer(props);
    }
  },
  getTileData: {
    type: 'function',
    value: function value(_ref) {
      var x = _ref.x,
          y = _ref.y,
          z = _ref.z;
      return Promise.resolve(null);
    }
  },
  onViewportLoaded: {
    type: 'function',
    optional: true,
    value: null
  },
  onTileError: {
    type: 'function',
    value: function value(err) {
      return console.error(err);
    }
  },
  maxZoom: null,
  minZoom: 0,
  maxCacheSize: null
};

var TileLayer = function (_CompositeLayer) {
  _inherits(TileLayer, _CompositeLayer);

  function TileLayer() {
    _classCallCheck(this, TileLayer);

    return _possibleConstructorReturn(this, _getPrototypeOf(TileLayer).apply(this, arguments));
  }

  _createClass(TileLayer, [{
    key: "initializeState",
    value: function initializeState() {
      this.state = {
        tiles: [],
        isLoaded: false
      };
    }
  }, {
    key: "shouldUpdateState",
    value: function shouldUpdateState(_ref2) {
      var changeFlags = _ref2.changeFlags;
      return changeFlags.somethingChanged;
    }
  }, {
    key: "updateState",
    value: function updateState(_ref3) {
      var props = _ref3.props,
          oldProps = _ref3.oldProps,
          context = _ref3.context,
          changeFlags = _ref3.changeFlags;
      var tileCache = this.state.tileCache;

      if (!tileCache || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getTileData)) {
        var getTileData = props.getTileData,
            maxZoom = props.maxZoom,
            minZoom = props.minZoom,
            maxCacheSize = props.maxCacheSize;

        if (tileCache) {
          tileCache.finalize();
        }

        tileCache = new TileCache({
          getTileData: getTileData,
          maxSize: maxCacheSize,
          maxZoom: maxZoom,
          minZoom: minZoom,
          onTileLoad: this._onTileLoad.bind(this),
          onTileError: this._onTileError.bind(this)
        });
        this.setState({
          tileCache: tileCache
        });
      } else if (changeFlags.updateTriggersChanged) {
        this.state.tileCache.tiles.forEach(function (tile) {
          tile.layer = null;
        });
      }

      var viewport = context.viewport;

      if (changeFlags.viewportChanged && viewport.id !== 'DEFAULT-INITIAL-VIEWPORT') {
        var z = this.getLayerZoomLevel();
        tileCache.update(viewport);
        var currTiles = tileCache.tiles.filter(function (tile) {
          return tile.z === z;
        });
        this.setState({
          isLoaded: false,
          tiles: currTiles
        });

        this._onTileLoad();
      }
    }
  }, {
    key: "_onTileLoad",
    value: function _onTileLoad() {
      var onViewportLoaded = this.props.onViewportLoaded;
      var currTiles = this.state.tiles;
      var allCurrTilesLoaded = currTiles.every(function (tile) {
        return tile.isLoaded;
      });

      if (this.state.isLoaded !== allCurrTilesLoaded) {
        this.setState({
          isLoaded: allCurrTilesLoaded
        });

        if (allCurrTilesLoaded && onViewportLoaded) {
          onViewportLoaded(currTiles.filter(function (tile) {
            return tile._data;
          }).map(function (tile) {
            return tile._data;
          }));
        }
      }
    }
  }, {
    key: "_onTileError",
    value: function _onTileError(error) {
      this.props.onTileError(error);

      this._onTileLoad();
    }
  }, {
    key: "getPickingInfo",
    value: function getPickingInfo(_ref4) {
      var info = _ref4.info,
          sourceLayer = _ref4.sourceLayer;
      info.sourceLayer = sourceLayer;
      info.tile = sourceLayer.props.tile;
      return info;
    }
  }, {
    key: "getLayerZoomLevel",
    value: function getLayerZoomLevel() {
      var z = Math.floor(this.context.viewport.zoom);
      var _this$props = this.props,
          maxZoom = _this$props.maxZoom,
          minZoom = _this$props.minZoom;

      if (Number.isFinite(maxZoom) && z > maxZoom) {
        return Math.floor(maxZoom);
      } else if (Number.isFinite(minZoom) && z < minZoom) {
        return Math.ceil(minZoom);
      }

      return z;
    }
  }, {
    key: "renderLayers",
    value: function renderLayers() {
      var _this = this;

      var _this$props2 = this.props,
          renderSubLayers = _this$props2.renderSubLayers,
          visible = _this$props2.visible;
      var z = this.getLayerZoomLevel();
      return this.state.tileCache.tiles.map(function (tile) {
        var isVisible = visible && tile.isVisible && (!_this.state.isLoaded || tile.z === z);

        if (!tile.layer) {
          tile.layer = renderSubLayers(Object.assign({}, _this.props, {
            id: "".concat(_this.id, "-").concat(tile.x, "-").concat(tile.y, "-").concat(tile.z),
            data: tile.data,
            visible: isVisible,
            tile: tile
          }));
        } else if (tile.layer.props.visible !== isVisible) {
          tile.layer = tile.layer.clone({
            visible: isVisible
          });
        }

        return tile.layer;
      });
    }
  }]);

  return TileLayer;
}(CompositeLayer);

export { TileLayer as default };
TileLayer.layerName = 'TileLayer';
TileLayer.defaultProps = defaultProps;
//# sourceMappingURL=tile-layer.js.map