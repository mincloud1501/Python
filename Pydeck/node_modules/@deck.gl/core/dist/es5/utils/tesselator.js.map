{"version":3,"sources":["../../../src/utils/tesselator.js"],"names":["Tesselator","opts","attributes","typedArrayManager","defaultTypedArrayManager","indexLayout","bufferLayout","vertexCount","instanceCount","_attributeDefs","updateGeometry","Object","seal","data","getGeometry","positionFormat","dataChanged","positionSize","Array","isArray","dataRange","_rebuildGeometry","startRow","endRow","geometry","startIndex","size","Error","visitor","iterable","objectInfo","object","index","Infinity","_forEachGeometry","dataIndex","getGeometrySize","count","fp64","name","def","copy","Boolean","fp64Only","allocate","context","vertexStart","indexStart","i","geometrySize","geometryIndex","updateGeometryAttributes","length"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport {createIterable} from './iterable-utils';\nimport defaultTypedArrayManager from './typed-array-manager';\n\nexport default class Tesselator {\n  constructor(opts = {}) {\n    const {attributes = {}} = opts;\n\n    this.typedArrayManager = defaultTypedArrayManager;\n    this.indexLayout = null;\n    this.bufferLayout = null;\n    this.vertexCount = 0;\n    this.instanceCount = 0;\n    this.attributes = {};\n    this._attributeDefs = attributes;\n\n    this.updateGeometry(opts);\n\n    Object.seal(this);\n  }\n\n  /* Public methods */\n  updateGeometry({data, getGeometry, positionFormat, dataChanged}) {\n    this.data = data;\n    this.getGeometry = getGeometry;\n    this.positionSize = positionFormat === 'XY' ? 2 : 3;\n    if (Array.isArray(dataChanged)) {\n      // is partial update\n      for (const dataRange of dataChanged) {\n        this._rebuildGeometry(dataRange);\n      }\n    } else {\n      this._rebuildGeometry();\n    }\n  }\n\n  updatePartialGeometry({startRow, endRow}) {\n    this._rebuildGeometry({startRow, endRow});\n  }\n\n  /* Subclass interface */\n\n  // Update the positions of a single geometry\n  updateGeometryAttributes(geometry, startIndex, size) {\n    throw new Error('Not implemented');\n  }\n\n  // Returns the number of vertices in a geometry\n  getGeometrySize(geometry) {\n    throw new Error('Not implemented');\n  }\n\n  /* Private utility methods */\n\n  /**\n   * Visit all objects\n   * `data` is expected to be an iterable consistent with the base Layer expectation\n   */\n  _forEachGeometry(visitor, startRow, endRow) {\n    const {data, getGeometry} = this;\n    const {iterable, objectInfo} = createIterable(data, startRow, endRow);\n    for (const object of iterable) {\n      objectInfo.index++;\n      const geometry = getGeometry(object, objectInfo);\n      visitor(geometry, objectInfo.index);\n    }\n  }\n\n  /* eslint-disable complexity,max-statements */\n  _rebuildGeometry(dataRange) {\n    if (!this.data || !this.getGeometry) {\n      return;\n    }\n\n    let {indexLayout, bufferLayout} = this;\n\n    if (!dataRange) {\n      // Full update - regenerate buffer layout from scratch\n      indexLayout = [];\n      bufferLayout = [];\n    }\n\n    const {startRow = 0, endRow = Infinity} = dataRange || {};\n    this._forEachGeometry(\n      (geometry, dataIndex) => {\n        bufferLayout[dataIndex] = this.getGeometrySize(geometry);\n      },\n      startRow,\n      endRow\n    );\n\n    // count instances\n    let instanceCount = 0;\n    for (const count of bufferLayout) {\n      instanceCount += count;\n    }\n\n    // allocate attributes\n    const {attributes, _attributeDefs, typedArrayManager, fp64} = this;\n    for (const name in _attributeDefs) {\n      const def = _attributeDefs[name];\n      // If dataRange is supplied, this is a partial update.\n      // In case we need to reallocate the typed array, it will need the old values copied\n      // before performing partial update.\n      def.copy = Boolean(dataRange);\n\n      // do not create fp64-only attributes unless in fp64 mode\n      if (!def.fp64Only || fp64) {\n        attributes[name] = typedArrayManager.allocate(attributes[name], instanceCount, def);\n      }\n    }\n\n    this.indexLayout = indexLayout;\n    this.bufferLayout = bufferLayout;\n    this.instanceCount = instanceCount;\n\n    const context = {\n      vertexStart: 0,\n      indexStart: 0\n    };\n    for (let i = 0; i < startRow; i++) {\n      context.vertexStart += bufferLayout[i];\n      context.indexStart += indexLayout[i] || 0;\n    }\n\n    this._forEachGeometry(\n      (geometry, dataIndex) => {\n        const geometrySize = bufferLayout[dataIndex];\n        context.geometryIndex = dataIndex;\n        context.geometrySize = geometrySize;\n        this.updateGeometryAttributes(geometry, context);\n        context.vertexStart += geometrySize;\n        context.indexStart += indexLayout[dataIndex] || 0;\n      },\n      startRow,\n      endRow\n    );\n\n    // count vertices\n    let vertexCount = context.indexStart;\n    for (let i = endRow; i < indexLayout.length; i++) {\n      vertexCount += indexLayout[i];\n    }\n    this.vertexCount = vertexCount;\n  }\n}\n"],"file":"tesselator.js"}