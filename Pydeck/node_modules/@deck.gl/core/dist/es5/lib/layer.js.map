{"version":3,"sources":["../../../src/lib/layer.js"],"names":["LOG_PRIORITY_UPDATE","EMPTY_ARRAY","Object","freeze","pickingColorCache","Uint8ClampedArray","defaultProps","data","type","value","async","dataComparator","_dataDiff","__diff","compare","optional","dataTransform","onDataLoad","fetch","url","layer","getLoadOptions","updateTriggers","numInstances","undefined","visible","pickable","opacity","min","max","onHover","onClick","onDragStart","onDrag","onDragEnd","coordinateSystem","COORDINATE_SYSTEM","LNGLAT","coordinateOrigin","modelMatrix","wrapLongitude","positionFormat","colorFormat","parameters","uniforms","extensions","framebuffer","animation","getPolygonOffset","layerIndex","highlightedObjectIndex","autoHighlight","highlightColor","Layer","className","constructor","layerName","name","props","id","updateObject","setChangeFlags","stateChanged","assign","state","setNeedsRedraw","redraw","internalState","needsRedraw","context","layerManager","setNeedsUpdate","String","needsUpdate","opts","clearRedrawFlags","_getNeedsRedraw","hasUniformTransition","shouldUpdateState","_getUpdateParams","uniformTransitions","active","models","model","attributeManager","loadOptions","object","xyz","viewport","worldPosition","pixelProjectionMatrix","x","y","z","length","xy","Array","isArray","unproject","lngLat","log","deprecated","projectFlat","unprojectFlat","IDENTITY","info","pickingEvent","i","target","color","Uint8Array","i1","i2","i3","index","Error","shaders","extension","getShaders","call","oldProps","changeFlags","propsOrDataChanged","getAttributeManager","dataChanged","dataRange","invalidateAll","getModels","finalize","clear","draw","mode","diffReason","invalidate","changedAttributes","_setModelAttributes","getNumInstances","bufferLayout","getBufferLayout","update","transitions","buffers","ignoreUnknownAttributes","getChangedAttributes","clearChangedFlags","updateAttributes","updateTransition","propsInTransition","create","key","defineProperty","attribute","startRow","endRow","size","cacheSize","newPickingColorCache","set","pickingColor","encodePickingColor","Math","subarray","shaderAttributes","excludeAttributes","userData","attributeName","getShaderAttributes","setAttributes","attributes","pickingColors","instancePickingColors","colors","decodePickingColor","start","getVertexOffset","end","buffer","subData","offset","_initState","initializeState","propsChanged","viewportChanged","extensionsChanged","_updateState","getSingleModel","program","stateNeedsUpdate","currentProps","_updateUniformTransition","updateParams","gl","updateState","error","isComposite","_renderLayers","_updateAttributes","setInstanceCount","clearChangeFlags","resetOldProps","finalizeState","moduleParameters","_updateAttributeTransition","pow","setModuleParameters","offsets","polygonOffset","getPickingInfo","flags","updateTriggersChanged","keys","join","somethingChanged","newProps","_activeUpdateTrigger","transitionsChanged","add","updateModuleSettings","getOldProps","attributeManagerNeedsRedraw","getNeedsRedraw","AttributeManager","stats","timeline","_getAttributeManager","addInstanced","calculateInstancePickingColors","LayerState","UniformTransitionManager","onAsyncPropUpdated","_onAsyncPropUpdated","bind","setAsyncProps","oldLayer","component","diffProps","propName","invalidateAttribute","uniformMap","setUniforms","removed","Component"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable react/no-direct-mutation-state */\nimport {COORDINATE_SYSTEM} from './constants';\nimport AttributeManager from './attribute-manager';\nimport {removeLayerInSeer} from './seer-integration';\nimport UniformTransitionManager from './uniform-transition-manager';\nimport {diffProps, validateProps} from '../lifecycle/props';\nimport {count} from '../utils/count';\nimport log from '../utils/log';\nimport GL from '@luma.gl/constants';\nimport {withParameters} from '@luma.gl/core';\nimport assert from '../utils/assert';\nimport {mergeShaders} from '../utils/shader';\nimport {projectPosition, getWorldPosition} from '../shaderlib/project/project-functions';\n\nimport Component from '../lifecycle/component';\nimport LayerState from './layer-state';\n\nimport {worldToPixels} from 'viewport-mercator-project';\n\nimport {load} from '@loaders.gl/core';\n\nconst LOG_PRIORITY_UPDATE = 1;\n\nconst EMPTY_ARRAY = Object.freeze([]);\n\nlet pickingColorCache = new Uint8ClampedArray(0);\n\nconst defaultProps = {\n  // data: Special handling for null, see below\n  data: {type: 'data', value: EMPTY_ARRAY, async: true},\n  dataComparator: null,\n  _dataDiff: {type: 'function', value: data => data && data.__diff, compare: false, optional: true},\n  dataTransform: {type: 'function', value: null, compare: false, optional: true},\n  onDataLoad: {type: 'function', value: null, compare: false, optional: true},\n  fetch: {\n    type: 'function',\n    value: (url, {layer}) => load(url, layer.getLoadOptions()),\n    compare: false\n  },\n  updateTriggers: {}, // Update triggers: a core change detection mechanism in deck.gl\n  numInstances: undefined,\n\n  visible: true,\n  pickable: false,\n  opacity: {type: 'number', min: 0, max: 1, value: 0.8},\n\n  onHover: {type: 'function', value: null, compare: false, optional: true},\n  onClick: {type: 'function', value: null, compare: false, optional: true},\n  onDragStart: {type: 'function', value: null, compare: false, optional: true},\n  onDrag: {type: 'function', value: null, compare: false, optional: true},\n  onDragEnd: {type: 'function', value: null, compare: false, optional: true},\n\n  coordinateSystem: COORDINATE_SYSTEM.LNGLAT,\n  coordinateOrigin: {type: 'array', value: [0, 0, 0], compare: true},\n  modelMatrix: {type: 'array', value: null, compare: true, optional: true},\n  wrapLongitude: false,\n  positionFormat: 'XYZ',\n  colorFormat: 'RGBA',\n\n  parameters: {},\n  uniforms: {},\n  extensions: [],\n  framebuffer: null,\n\n  animation: null, // Passed prop animation functions to evaluate props\n\n  // Offset depth based on layer index to avoid z-fighting.\n  // Negative values pull layer towards the camera\n  // https://www.opengl.org/archives/resources/faq/technical/polygonoffset.htm\n  getPolygonOffset: {\n    type: 'function',\n    value: ({layerIndex}) => [0, -layerIndex * 100],\n    compare: false\n  },\n\n  // Selection/Highlighting\n  highlightedObjectIndex: null,\n  autoHighlight: false,\n  highlightColor: {type: 'color', value: [0, 0, 128, 128]}\n};\n\nexport default class Layer extends Component {\n  toString() {\n    const className = this.constructor.layerName || this.constructor.name;\n    return `${className}({id: '${this.props.id}'})`;\n  }\n\n  // Public API\n\n  // Updates selected state members and marks the object for redraw\n  setState(updateObject) {\n    this.setChangeFlags({stateChanged: true});\n    Object.assign(this.state, updateObject);\n    this.setNeedsRedraw();\n  }\n\n  // Sets the redraw flag for this layer, will trigger a redraw next animation frame\n  setNeedsRedraw(redraw = true) {\n    if (this.internalState) {\n      this.internalState.needsRedraw = redraw;\n    }\n  }\n\n  // This layer needs a deep update\n  setNeedsUpdate() {\n    this.context.layerManager.setNeedsUpdate(String(this));\n    this.internalState.needsUpdate = true;\n  }\n\n  // Checks state of attributes and model\n  getNeedsRedraw(opts = {clearRedrawFlags: false}) {\n    return this._getNeedsRedraw(opts);\n  }\n\n  // Checks if layer attributes needs updating\n  needsUpdate() {\n    // Call subclass lifecycle method\n    return (\n      this.internalState.needsUpdate ||\n      this.hasUniformTransition() ||\n      this.shouldUpdateState(this._getUpdateParams())\n    );\n    // End lifecycle method\n  }\n\n  hasUniformTransition() {\n    return this.internalState.uniformTransitions.active;\n  }\n\n  // Returns true if the layer is pickable and visible.\n  isPickable() {\n    return this.props.pickable && this.props.visible;\n  }\n\n  // Return an array of models used by this layer, can be overriden by layer subclass\n  getModels() {\n    return this.state && (this.state.models || (this.state.model ? [this.state.model] : []));\n  }\n\n  // TODO - Gradually phase out, does not support multi model layers\n  getSingleModel() {\n    return this.state && this.state.model;\n  }\n\n  getAttributeManager() {\n    return this.internalState && this.internalState.attributeManager;\n  }\n\n  // Returns the most recent layer that matched to this state\n  // (When reacting to an async event, this layer may no longer be the latest)\n  getCurrentLayer() {\n    return this.internalState && this.internalState.layer;\n  }\n\n  // Returns the default parse options for async props\n  getLoadOptions() {\n    return this.props.loadOptions;\n  }\n\n  // Use iteration (the only required capability on data) to get first element\n  // deprecated since we are effectively only supporting Arrays\n  getFirstObject() {\n    const {data} = this.props;\n    for (const object of data) {\n      return object;\n    }\n    return null;\n  }\n\n  // PROJECTION METHODS\n\n  // Projects a point with current map state (lat, lon, zoom, pitch, bearing)\n  // From the current layer's coordinate system to screen\n  project(xyz) {\n    const {viewport} = this.context;\n    const worldPosition = getWorldPosition(xyz, {\n      viewport,\n      modelMatrix: this.props.modelMatrix,\n      coordinateOrigin: this.props.coordinateOrigin,\n      coordinateSystem: this.props.coordinateSystem\n    });\n    const [x, y, z] = worldToPixels(worldPosition, viewport.pixelProjectionMatrix);\n    return xyz.length === 2 ? [x, y] : [x, y, z];\n  }\n\n  // Note: this does not reverse `project`.\n  // Always unprojects to the viewport's coordinate system\n  unproject(xy) {\n    const {viewport} = this.context;\n    assert(Array.isArray(xy));\n    return viewport.unproject(xy);\n  }\n\n  projectPosition(xyz) {\n    assert(Array.isArray(xyz));\n\n    return projectPosition(xyz, {\n      viewport: this.context.viewport,\n      modelMatrix: this.props.modelMatrix,\n      coordinateOrigin: this.props.coordinateOrigin,\n      coordinateSystem: this.props.coordinateSystem\n    });\n  }\n\n  // DEPRECATE: This does not handle offset modes\n  projectFlat(lngLat) {\n    log.deprecated('layer.projectFlat', 'layer.projectPosition')();\n    const {viewport} = this.context;\n    assert(Array.isArray(lngLat));\n    return viewport.projectFlat(lngLat);\n  }\n\n  // DEPRECATE: This is not meaningful in offset modes\n  unprojectFlat(xy) {\n    log.deprecated('layer.unprojectFlat')();\n    const {viewport} = this.context;\n    assert(Array.isArray(xy));\n    return viewport.unprojectFlat(xy);\n  }\n\n  use64bitPositions() {\n    return (\n      this.props.coordinateSystem === COORDINATE_SYSTEM.LNGLAT ||\n      this.props.coordinateSystem === COORDINATE_SYSTEM.IDENTITY\n    );\n  }\n\n  // Event handling\n  onHover(info, pickingEvent) {\n    if (this.props.onHover) {\n      return this.props.onHover(info, pickingEvent);\n    }\n    return false;\n  }\n\n  onClick(info, pickingEvent) {\n    if (this.props.onClick) {\n      return this.props.onClick(info, pickingEvent);\n    }\n    return false;\n  }\n\n  // Returns the picking color that doesn't match any subfeature\n  // Use if some graphics do not belong to any pickable subfeature\n  // @return {Array} - a black color\n  nullPickingColor() {\n    return [0, 0, 0];\n  }\n\n  // Returns the picking color that doesn't match any subfeature\n  // Use if some graphics do not belong to any pickable subfeature\n  encodePickingColor(i, target = []) {\n    assert(i < 16777215, 'index out of picking color range');\n    target[0] = (i + 1) & 255;\n    target[1] = ((i + 1) >> 8) & 255;\n    target[2] = (((i + 1) >> 8) >> 8) & 255;\n    return target;\n  }\n\n  // Returns the index corresponding to a picking color that doesn't match any subfeature\n  // @param {Uint8Array} color - color array to be decoded\n  // @return {Array} - the decoded picking color\n  decodePickingColor(color) {\n    assert(color instanceof Uint8Array);\n    const [i1, i2, i3] = color;\n    // 1 was added to seperate from no selection\n    const index = i1 + i2 * 256 + i3 * 65536 - 1;\n    return index;\n  }\n\n  // //////////////////////////////////////////////////\n  // LIFECYCLE METHODS, overridden by the layer subclasses\n\n  // Called once to set up the initial state\n  // App can create WebGL resources\n  initializeState() {\n    throw new Error(`Layer ${this} has not defined initializeState`);\n  }\n\n  getShaders(shaders) {\n    for (const extension of this.props.extensions) {\n      shaders = mergeShaders(shaders, extension.getShaders.call(this, extension));\n    }\n    return shaders;\n  }\n\n  // Let's layer control if updateState should be called\n  shouldUpdateState({oldProps, props, context, changeFlags}) {\n    return changeFlags.propsOrDataChanged;\n  }\n\n  // Default implementation, all attributes will be invalidated and updated\n  // when data changes\n  updateState({oldProps, props, context, changeFlags}) {\n    const attributeManager = this.getAttributeManager();\n    if (changeFlags.dataChanged && attributeManager) {\n      const {dataChanged} = changeFlags;\n      if (Array.isArray(dataChanged)) {\n        // is partial update\n        for (const dataRange of dataChanged) {\n          attributeManager.invalidateAll(dataRange);\n        }\n      } else {\n        attributeManager.invalidateAll();\n      }\n    }\n  }\n\n  // Called once when layer is no longer matched and state will be discarded\n  // App can destroy WebGL resources here\n  finalizeState() {\n    for (const model of this.getModels()) {\n      model.delete();\n    }\n    const attributeManager = this.getAttributeManager();\n    if (attributeManager) {\n      attributeManager.finalize();\n    }\n    this.internalState.uniformTransitions.clear();\n  }\n\n  // If state has a model, draw it with supplied uniforms\n  draw(opts) {\n    for (const model of this.getModels()) {\n      model.draw(opts);\n    }\n  }\n\n  // called to populate the info object that is passed to the event handler\n  // @return null to cancel event\n  getPickingInfo({info, mode}) {\n    const {index} = info;\n\n    if (index >= 0) {\n      // If props.data is an indexable array, get the object\n      if (Array.isArray(this.props.data)) {\n        info.object = this.props.data[index];\n      }\n    }\n\n    return info;\n  }\n\n  // END LIFECYCLE METHODS\n  // //////////////////////////////////////////////////\n\n  // INTERNAL METHODS\n\n  // Default implementation of attribute invalidation, can be redefined\n  invalidateAttribute(name = 'all', diffReason = '') {\n    const attributeManager = this.getAttributeManager();\n    if (!attributeManager) {\n      return;\n    }\n\n    if (name === 'all') {\n      log.log(LOG_PRIORITY_UPDATE, `updateTriggers invalidating all attributes: ${diffReason}`)();\n      attributeManager.invalidateAll();\n    } else {\n      log.log(\n        LOG_PRIORITY_UPDATE,\n        `updateTriggers invalidating attribute ${name}: ${diffReason}`\n      )();\n      attributeManager.invalidate(name);\n    }\n  }\n\n  updateAttributes(changedAttributes) {\n    for (const model of this.getModels()) {\n      this._setModelAttributes(model, changedAttributes);\n    }\n  }\n\n  // Calls attribute manager to update any WebGL attributes\n  _updateAttributes(props) {\n    const attributeManager = this.getAttributeManager();\n    if (!attributeManager) {\n      return;\n    }\n\n    // Figure out data length\n    const numInstances = this.getNumInstances(props);\n    const bufferLayout = this.getBufferLayout(props);\n\n    attributeManager.update({\n      data: props.data,\n      numInstances,\n      bufferLayout,\n      props,\n      transitions: props.transitions,\n      buffers: props,\n      context: this,\n      // Don't worry about non-attribute props\n      ignoreUnknownAttributes: true\n    });\n\n    const changedAttributes = attributeManager.getChangedAttributes({clearChangedFlags: true});\n    this.updateAttributes(changedAttributes);\n  }\n\n  // Update attribute transitions. This is called in drawLayer, no model updates required.\n  _updateAttributeTransition() {\n    const attributeManager = this.getAttributeManager();\n    if (attributeManager) {\n      attributeManager.updateTransition();\n    }\n  }\n\n  // Update uniform (prop) transitions. This is called in updateState, may result in model updates.\n  _updateUniformTransition() {\n    const {uniformTransitions} = this.internalState;\n    if (uniformTransitions.active) {\n      // clone props\n      const propsInTransition = uniformTransitions.update();\n      const props = Object.create(this.props);\n      for (const key in propsInTransition) {\n        Object.defineProperty(props, key, {value: propsInTransition[key]});\n      }\n      return props;\n    }\n    return this.props;\n  }\n\n  calculateInstancePickingColors(attribute, {numInstances, startRow, endRow}) {\n    const {value, size} = attribute;\n\n    // calculateInstancePickingColors always generates the same sequence.\n    // pickingColorCache saves the largest generated sequence for reuse\n    const cacheSize = pickingColorCache.length / size;\n\n    if (cacheSize < numInstances) {\n      // If the attribute is larger than the cache, resize the cache and populate the missing chunk\n      const newPickingColorCache = new Uint8ClampedArray(numInstances * size);\n      newPickingColorCache.set(pickingColorCache);\n      const pickingColor = [];\n\n      for (let i = cacheSize; i < numInstances; i++) {\n        this.encodePickingColor(i, pickingColor);\n        newPickingColorCache[i * size + 0] = pickingColor[0];\n        newPickingColorCache[i * size + 1] = pickingColor[1];\n        newPickingColorCache[i * size + 2] = pickingColor[2];\n      }\n\n      pickingColorCache = newPickingColorCache;\n    }\n\n    // Copy the last calculated picking color sequence into the attribute\n    endRow = Math.min(endRow, numInstances);\n    value.set(pickingColorCache.subarray(startRow * size, endRow * size), startRow * size);\n  }\n\n  _setModelAttributes(model, changedAttributes) {\n    const shaderAttributes = {};\n    const excludeAttributes = model.userData.excludeAttributes || {};\n    for (const attributeName in changedAttributes) {\n      if (!excludeAttributes[attributeName]) {\n        Object.assign(shaderAttributes, changedAttributes[attributeName].getShaderAttributes());\n      }\n    }\n\n    model.setAttributes(shaderAttributes);\n  }\n\n  // Sets the specified instanced picking color to null picking color. Used for multi picking.\n  clearPickingColor(color) {\n    const {pickingColors, instancePickingColors} = this.getAttributeManager().attributes;\n    const colors = pickingColors || instancePickingColors;\n\n    const i = this.decodePickingColor(color);\n    const start = colors.getVertexOffset(i);\n    const end = colors.getVertexOffset(i + 1);\n\n    // Fill the sub buffer with 0s\n    colors.buffer.subData({\n      data: new Uint8Array(end - start),\n      offset: start // 1 byte per element\n    });\n  }\n\n  restorePickingColors() {\n    const {pickingColors, instancePickingColors} = this.getAttributeManager().attributes;\n    const colors = pickingColors || instancePickingColors;\n    colors.update({value: colors.value});\n  }\n\n  // Deduces numer of instances. Intention is to support:\n  // - Explicit setting of numInstances\n  // - Auto-deduction for ES6 containers that define a size member\n  // - Auto-deduction for Classic Arrays via the built-in length attribute\n  // - Auto-deduction via arrays\n  getNumInstances(props) {\n    props = props || this.props;\n\n    // First Check if app has provided an explicit value\n    if (props.numInstances !== undefined) {\n      return props.numInstances;\n    }\n\n    // Second check if the layer has set its own value\n    if (this.state && this.state.numInstances !== undefined) {\n      return this.state.numInstances;\n    }\n\n    // Use container library to get a count for any ES6 container or object\n    const {data} = this.props;\n    return count(data);\n  }\n\n  // Buffer layout describes how many attribute values are packed for each data object\n  // The default (null) is one value each object.\n  // Some data formats (e.g. paths, polygons) have various length. Their buffer layout\n  //  is in the form of [L0, L1, L2, ...]\n  getBufferLayout(props) {\n    props = props || this.props;\n\n    // First Check if bufferLayout is provided as an explicit value\n    if (props.bufferLayout !== undefined) {\n      return props.bufferLayout;\n    }\n\n    // Second check if the layer has set its own value\n    if (this.state && this.state.bufferLayout !== undefined) {\n      return this.state.bufferLayout;\n    }\n\n    return null;\n  }\n\n  // LAYER MANAGER API\n  // Should only be called by the deck.gl LayerManager class\n\n  // Called by layer manager when a new layer is found\n  /* eslint-disable max-statements */\n  _initialize() {\n    this._initState();\n\n    // Call subclass lifecycle methods\n    this.initializeState(this.context);\n    // Initialize extensions\n    for (const extension of this.props.extensions) {\n      extension.initializeState.call(this, this.context, extension);\n    }\n    // End subclass lifecycle methods\n\n    // TODO deprecated, for backwards compatibility with older layers\n    // in case layer resets state\n    this.state.attributeManager = this.getAttributeManager();\n\n    // initializeState callback tends to clear state\n    this.setChangeFlags({\n      dataChanged: true,\n      propsChanged: true,\n      viewportChanged: true,\n      extensionsChanged: true\n    });\n\n    this._updateState();\n\n    const model = this.getSingleModel();\n    if (model) {\n      model.id = this.props.id;\n      model.program.id = `${this.props.id}-program`;\n    }\n  }\n\n  // Called by layer manager\n  // if this layer is new (not matched with an existing layer) oldProps will be empty object\n  _update() {\n    // Call subclass lifecycle method\n    const stateNeedsUpdate = this.needsUpdate();\n    // End lifecycle method\n\n    if (stateNeedsUpdate) {\n      this._updateState();\n    }\n  }\n  /* eslint-enable max-statements */\n\n  // Common code for _initialize and _update\n  _updateState() {\n    const currentProps = this.props;\n    const propsInTransition = this._updateUniformTransition();\n    this.internalState.propsInTransition = propsInTransition;\n    // Overwrite this.props during update to use in-transition prop values\n    this.props = propsInTransition;\n\n    const updateParams = this._getUpdateParams();\n\n    // Safely call subclass lifecycle methods\n    if (this.context.gl) {\n      this.updateState(updateParams);\n    } else {\n      try {\n        this.updateState(updateParams);\n      } catch (error) {\n        // ignore error if gl context is missing\n      }\n    }\n    // Execute extension updates\n    for (const extension of this.props.extensions) {\n      extension.updateState.call(this, updateParams, extension);\n    }\n    // End subclass lifecycle methods\n\n    if (this.isComposite) {\n      // Render or update previously rendered sublayers\n      this._renderLayers(updateParams);\n    } else {\n      this.setNeedsRedraw();\n      // Add any subclass attributes\n      this._updateAttributes(this.props);\n\n      // Note: Automatic instance count update only works for single layers\n      if (this.state.model) {\n        this.state.model.setInstanceCount(this.getNumInstances());\n      }\n    }\n\n    this.props = currentProps;\n    this.clearChangeFlags();\n    this.internalState.needsUpdate = false;\n    this.internalState.resetOldProps();\n  }\n\n  // Called by manager when layer is about to be disposed\n  // Note: not guaranteed to be called on application shutdown\n  _finalize() {\n    assert(this.internalState && this.state);\n\n    // Call subclass lifecycle method\n    this.finalizeState(this.context);\n    // Finalize extensions\n    for (const extension of this.props.extensions) {\n      extension.finalizeState.call(this, extension);\n    }\n    // End lifecycle method\n    removeLayerInSeer(this.id);\n  }\n\n  // Calculates uniforms\n  drawLayer({moduleParameters = null, uniforms = {}, parameters = {}}) {\n    this._updateAttributeTransition();\n\n    const currentProps = this.props;\n    // Overwrite this.props during redraw to use in-transition prop values\n    this.props = this.internalState.propsInTransition;\n\n    const {opacity} = this.props;\n    // apply gamma to opacity to make it visually \"linear\"\n    uniforms.opacity = Math.pow(opacity, 1 / 2.2);\n\n    // TODO/ib - hack move to luma Model.draw\n    if (moduleParameters) {\n      this.setModuleParameters(moduleParameters);\n    }\n\n    // Apply polygon offset to avoid z-fighting\n    // TODO - move to draw-layers\n    const {getPolygonOffset} = this.props;\n    const offsets = (getPolygonOffset && getPolygonOffset(uniforms)) || [0, 0];\n    parameters.polygonOffset = offsets;\n\n    // Call subclass lifecycle method\n    withParameters(this.context.gl, parameters, () => {\n      this.draw({moduleParameters, uniforms, parameters, context: this.context});\n    });\n    // End lifecycle method\n\n    this.props = currentProps;\n  }\n\n  // {uniforms = {}, ...opts}\n  pickLayer(opts) {\n    // Call subclass lifecycle method\n    return this.getPickingInfo(opts);\n    // End lifecycle method\n  }\n\n  // Helper methods\n  getChangeFlags() {\n    return this.internalState.changeFlags;\n  }\n\n  // Dirty some change flags, will be handled by updateLayer\n  /* eslint-disable complexity */\n  setChangeFlags(flags) {\n    this.internalState.changeFlags = this.internalState.changeFlags || {};\n    const changeFlags = this.internalState.changeFlags;\n\n    // Update primary flags\n    if (flags.dataChanged && !changeFlags.dataChanged) {\n      changeFlags.dataChanged = flags.dataChanged;\n      log.log(LOG_PRIORITY_UPDATE + 1, () => `dataChanged: ${flags.dataChanged} in ${this.id}`)();\n    }\n    if (flags.updateTriggersChanged && !changeFlags.updateTriggersChanged) {\n      changeFlags.updateTriggersChanged =\n        changeFlags.updateTriggersChanged && flags.updateTriggersChanged\n          ? Object.assign({}, flags.updateTriggersChanged, changeFlags.updateTriggersChanged)\n          : flags.updateTriggersChanged || changeFlags.updateTriggersChanged;\n      log.log(\n        LOG_PRIORITY_UPDATE + 1,\n        () =>\n          'updateTriggersChanged: ' +\n          `${Object.keys(flags.updateTriggersChanged).join(', ')} in ${this.id}`\n      )();\n    }\n    if (flags.propsChanged && !changeFlags.propsChanged) {\n      changeFlags.propsChanged = flags.propsChanged;\n      log.log(LOG_PRIORITY_UPDATE + 1, () => `propsChanged: ${flags.propsChanged} in ${this.id}`)();\n    }\n    if (flags.extensionsChanged && !changeFlags.extensionsChanged) {\n      changeFlags.extensionsChanged = flags.extensionsChanged;\n      log.log(\n        LOG_PRIORITY_UPDATE + 1,\n        () => `extensionsChanged: ${flags.extensionsChanged} in ${this.id}`\n      )();\n    }\n    if (flags.viewportChanged && !changeFlags.viewportChanged) {\n      changeFlags.viewportChanged = flags.viewportChanged;\n      log.log(\n        LOG_PRIORITY_UPDATE + 2,\n        () => `viewportChanged: ${flags.viewportChanged} in ${this.id}`\n      )();\n    }\n    if (flags.stateChanged && !changeFlags.stateChanged) {\n      changeFlags.stateChanged = flags.stateChanged;\n      log.log(LOG_PRIORITY_UPDATE + 1, () => `stateChanged: ${flags.stateChanged} in ${this.id}`)();\n    }\n\n    // Update composite flags\n    const propsOrDataChanged =\n      flags.dataChanged ||\n      flags.updateTriggersChanged ||\n      flags.propsChanged ||\n      flags.extensionsChanged;\n    changeFlags.propsOrDataChanged = changeFlags.propsOrDataChanged || propsOrDataChanged;\n    changeFlags.somethingChanged =\n      changeFlags.somethingChanged ||\n      propsOrDataChanged ||\n      flags.viewportChanged ||\n      flags.stateChanged;\n  }\n  /* eslint-enable complexity */\n\n  // Clear all changeFlags, typically after an update\n  clearChangeFlags() {\n    this.internalState.changeFlags = {\n      // Primary changeFlags, can be strings stating reason for change\n      dataChanged: false,\n      propsChanged: false,\n      updateTriggersChanged: false,\n      viewportChanged: false,\n      stateChanged: false,\n      extensionsChanged: false,\n\n      // Derived changeFlags\n      propsOrDataChanged: false,\n      somethingChanged: false\n    };\n  }\n\n  printChangeFlags() {\n    const flags = this.internalState.changeFlags;\n    return `\\\n${flags.dataChanged ? 'data ' : ''}\\\n${flags.propsChanged ? 'props ' : ''}\\\n${flags.updateTriggersChanged ? 'triggers ' : ''}\\\n${flags.viewportChanged ? 'viewport' : ''}\\\n`;\n  }\n\n  // Compares the layers props with old props from a matched older layer\n  // and extracts change flags that describe what has change so that state\n  // can be update correctly with minimal effort\n  diffProps(newProps, oldProps) {\n    const changeFlags = diffProps(newProps, oldProps);\n\n    // iterate over changedTriggers\n    if (changeFlags.updateTriggersChanged) {\n      for (const key in changeFlags.updateTriggersChanged) {\n        if (changeFlags.updateTriggersChanged[key]) {\n          this._activeUpdateTrigger(key);\n        }\n      }\n    }\n\n    // trigger uniform transitions\n    if (changeFlags.transitionsChanged) {\n      for (const key in changeFlags.transitionsChanged) {\n        // prop changed and transition is enabled\n        this.internalState.uniformTransitions.add(\n          key,\n          oldProps[key],\n          newProps[key],\n          newProps.transitions[key]\n        );\n      }\n    }\n\n    return this.setChangeFlags(changeFlags);\n  }\n\n  // Called by layer manager to validate props (in development)\n  validateProps() {\n    validateProps(this.props);\n  }\n\n  setModuleParameters(moduleParameters) {\n    for (const model of this.getModels()) {\n      model.updateModuleSettings(moduleParameters);\n    }\n  }\n\n  // PRIVATE METHODS\n\n  _getUpdateParams() {\n    return {\n      props: this.props,\n      oldProps: this.internalState.getOldProps(),\n      context: this.context,\n      changeFlags: this.internalState.changeFlags\n    };\n  }\n\n  // Checks state of attributes and model\n  _getNeedsRedraw(opts) {\n    // this method may be called by the render loop as soon a the layer\n    // has been created, so guard against uninitialized state\n    if (!this.internalState) {\n      return false;\n    }\n\n    let redraw = false;\n    redraw = redraw || (this.internalState.needsRedraw && this.id);\n    this.internalState.needsRedraw = this.internalState.needsRedraw && !opts.clearRedrawFlags;\n\n    // TODO - is attribute manager needed? - Model should be enough.\n    const attributeManager = this.getAttributeManager();\n    const attributeManagerNeedsRedraw = attributeManager && attributeManager.getNeedsRedraw(opts);\n    redraw = redraw || attributeManagerNeedsRedraw;\n\n    return redraw;\n  }\n\n  // Create new attribute manager\n  _getAttributeManager() {\n    return new AttributeManager(this.context.gl, {\n      id: this.props.id,\n      stats: this.context.stats,\n      timeline: this.context.timeline\n    });\n  }\n\n  _initState() {\n    assert(!this.internalState && !this.state);\n\n    const attributeManager = this._getAttributeManager();\n\n    if (attributeManager) {\n      // All instanced layers get instancePickingColors attribute by default\n      // Their shaders can use it to render a picking scene\n      // TODO - this slightly slows down non instanced layers\n      attributeManager.addInstanced({\n        instancePickingColors: {\n          type: GL.UNSIGNED_BYTE,\n          size: 3,\n          update: this.calculateInstancePickingColors\n        }\n      });\n    }\n\n    this.internalState = new LayerState({\n      attributeManager,\n      layer: this\n    });\n\n    this.state = {};\n    // TODO deprecated, for backwards compatibility with older layers\n    this.state.attributeManager = attributeManager;\n    this.internalState.uniformTransitions = new UniformTransitionManager(this.context.timeline);\n    this.internalState.onAsyncPropUpdated = this._onAsyncPropUpdated.bind(this);\n\n    // Ensure any async props are updated\n    this.internalState.setAsyncProps(this.props);\n  }\n\n  // Called by layer manager to transfer state from an old layer\n  _transferState(oldLayer) {\n    const {state, internalState} = oldLayer;\n    assert(state && internalState);\n\n    if (this === oldLayer) {\n      return;\n    }\n\n    // Move internalState\n    this.internalState = internalState;\n    this.internalState.component = this;\n\n    // Move state\n    this.state = state;\n    // Deprecated: layer references on `state`\n    state.layer = this;\n    // We keep the state ref on old layers to support async actions\n    // oldLayer.state = null;\n\n    // Ensure any async props are updated\n    this.internalState.setAsyncProps(this.props);\n\n    // Update model layer reference\n    for (const model of this.getModels()) {\n      model.userData.layer = this;\n    }\n\n    this.diffProps(this.props, this.internalState.getOldProps());\n  }\n\n  _onAsyncPropUpdated() {\n    this.diffProps(this.props, this.internalState.getOldProps());\n    this.setNeedsUpdate();\n  }\n\n  // Operate on each changed triggers, will be called when an updateTrigger changes\n  _activeUpdateTrigger(propName) {\n    this.invalidateAttribute(propName);\n  }\n\n  // DEPRECATED METHODS\n\n  // TODO - remove in v8\n  setLayerNeedsUpdate() {\n    log.deprecated('layer.setLayerNeedsUpdate', 'layer.setNeedsUpdate')();\n    this.setNeedsUpdate();\n  }\n\n  // Updates selected state members and marks the object for redraw\n  setUniforms(uniformMap) {\n    for (const model of this.getModels()) {\n      model.setUniforms(uniformMap);\n    }\n\n    // TODO - set needsRedraw on the model(s)?\n    this.setNeedsRedraw();\n    log.deprecated('layer.setUniforms', 'model.setUniforms')();\n  }\n\n  use64bitProjection() {\n    log.removed('use64bitProjection', 'Fp64Extension')();\n    return false;\n  }\n}\n\nLayer.layerName = 'Layer';\nLayer.defaultProps = defaultProps;\n"],"file":"layer.js"}