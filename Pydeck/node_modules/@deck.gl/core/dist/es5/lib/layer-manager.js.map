{"version":3,"sources":["../../../src/lib/layer-manager.js"],"names":["LOG_PRIORITY_LIFECYCLE","LOG_PRIORITY_LIFECYCLE_MINOR","INITIAL_CONTEXT","Object","seal","layerManager","deck","gl","stats","shaderCache","pickingFBO","mousePosition","userData","layerName","layer","Layer","LayerManager","viewport","timeline","lastRenderedLayers","layers","context","assign","programManager","Stats","id","Viewport","Timeline","_needsRedraw","_needsUpdate","_debug","activateViewport","bind","_initSeer","_editSeer","_finalizeLayer","seer","removeListener","opts","clearRedrawFlags","_checkIfNeedsRedraw","reason","layerIds","filter","find","layerId","indexOf","props","debug","setLayers","newLayers","forceUpdate","log","Boolean","_updateLayers","oldLayers","error","generatedLayers","needsUpdate","setNeedsRedraw","redraw","layerNeedsRedraw","getNeedsRedraw","oldViewport","viewportChanged","equals","setChangeFlags","_updateLayer","oldLayerMap","oldLayer","warn","_updateSublayersRecursively","error2","_finalizeOldLayers","some","hasUniformTransition","firstError","newLayer","sublayers","validateProps","err","_initializeLayer","_transferLayerState","push","isComposite","getSubLayers","_initialize","lifecycle","LIFECYCLE","INITIALIZED","internalState","getModels","model","_transferState","MATCHED","AWAITING_GC","printChangeFlags","_update","AWAITING_FINALIZATION","_finalize","FINALIZED","forEach","payload","type","valuePath","itemKey","slice","value","updateLayers"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport assert from '../utils/assert';\nimport {Timeline} from '@luma.gl/addons';\nimport seer from 'seer';\nimport Layer from './layer';\nimport {LIFECYCLE} from '../lifecycle/constants';\nimport log from '../utils/log';\nimport {flatten} from '../utils/flatten';\nimport {Stats} from 'probe.gl';\n\nimport Viewport from '../viewports/viewport';\nimport {createProgramManager} from '../shaderlib';\n\nimport {\n  setPropOverrides,\n  layerEditListener,\n  seerInitListener,\n  initLayerInSeer,\n  updateLayerInSeer\n} from './seer-integration';\n\nconst LOG_PRIORITY_LIFECYCLE = 2;\nconst LOG_PRIORITY_LIFECYCLE_MINOR = 4;\n\n// CONTEXT IS EXPOSED TO LAYERS\nconst INITIAL_CONTEXT = Object.seal({\n  layerManager: null,\n  deck: null,\n  gl: null,\n\n  // General resources\n  stats: null, // for tracking lifecycle performance\n\n  // GL Resources\n  shaderCache: null,\n  pickingFBO: null, // Screen-size framebuffer that layers can reuse\n\n  mousePosition: null,\n\n  userData: {} // Place for any custom app `context`\n});\n\nconst layerName = layer => (layer instanceof Layer ? `${layer}` : !layer ? 'null' : 'invalid');\n\nexport default class LayerManager {\n  // eslint-disable-next-line\n  constructor(gl, {deck, stats, viewport = null, timeline = null} = {}) {\n    // Currently deck.gl expects the DeckGL.layers array to be different\n    // whenever React rerenders. If the same layers array is used, the\n    // LayerManager's diffing algorithm will generate a fatal error and\n    // break the rendering.\n\n    // `this.lastRenderedLayers` stores the UNFILTERED layers sent\n    // down to LayerManager, so that `layers` reference can be compared.\n    // If it's the same across two React render calls, the diffing logic\n    // will be skipped.\n    this.lastRenderedLayers = [];\n    this.layers = [];\n\n    this.context = Object.assign({}, INITIAL_CONTEXT, {\n      layerManager: this,\n      deck,\n      gl,\n      // Enabling luma.gl Program caching using private API (_cachePrograms)\n      programManager: gl && createProgramManager(gl),\n      stats: stats || new Stats({id: 'deck.gl'}),\n      // Make sure context.viewport is not empty on the first layer initialization\n      viewport: viewport || new Viewport({id: 'DEFAULT-INITIAL-VIEWPORT'}), // Current viewport, exposed to layers for project* function\n      timeline: timeline || new Timeline()\n    });\n\n    this._needsRedraw = 'Initial render';\n    this._needsUpdate = false;\n    this._debug = false;\n\n    this.activateViewport = this.activateViewport.bind(this);\n\n    // Seer integration\n    this._initSeer = this._initSeer.bind(this);\n    this._editSeer = this._editSeer.bind(this);\n\n    Object.seal(this);\n\n    seerInitListener(this._initSeer);\n    layerEditListener(this._editSeer);\n  }\n\n  // Method to call when the layer manager is not needed anymore.\n  // Currently used in the <DeckGL> componentWillUnmount lifecycle to unbind Seer listeners.\n  finalize() {\n    // Finalize all layers\n    for (const layer of this.layers) {\n      this._finalizeLayer(layer);\n    }\n\n    seer.removeListener(this._initSeer);\n    seer.removeListener(this._editSeer);\n  }\n\n  // Check if a redraw is needed\n  needsRedraw(opts = {clearRedrawFlags: false}) {\n    return this._checkIfNeedsRedraw(opts);\n  }\n\n  // Check if a deep update of all layers is needed\n  needsUpdate() {\n    return this._needsUpdate;\n  }\n\n  // Layers will be redrawn (in next animation frame)\n  setNeedsRedraw(reason) {\n    this._needsRedraw = this._needsRedraw || reason;\n  }\n\n  // Layers will be updated deeply (in next animation frame)\n  // Potentially regenerating attributes and sub layers\n  setNeedsUpdate(reason) {\n    this._needsUpdate = this._needsUpdate || reason;\n  }\n\n  // Gets an (optionally) filtered list of layers\n  getLayers({layerIds = null} = {}) {\n    // Filtering by layerId compares beginning of strings, so that sublayers will be included\n    // Dependes on the convention of adding suffixes to the parent's layer name\n    return layerIds\n      ? this.layers.filter(layer => layerIds.find(layerId => layer.id.indexOf(layerId) === 0))\n      : this.layers;\n  }\n\n  // Set props needed for layer rendering and picking.\n  setProps(props) {\n    if ('debug' in props) {\n      this._debug = props.debug;\n    }\n\n    // A way for apps to add data to context that can be accessed in layers\n    if ('userData' in props) {\n      this.context.userData = props.userData;\n    }\n\n    // TODO - For now we set layers before viewports to preserve changeFlags\n    if ('layers' in props) {\n      this.setLayers(props.layers);\n    }\n  }\n\n  // Supply a new layer list, initiating sublayer generation and layer matching\n  setLayers(newLayers, forceUpdate = false) {\n    // TODO - something is generating state updates that cause rerender of the same\n    if (!forceUpdate && newLayers === this.lastRenderedLayers) {\n      log.log(3, 'Ignoring layer update due to layer array not changed')();\n      return this;\n    }\n    this.lastRenderedLayers = newLayers;\n\n    newLayers = flatten(newLayers, {filter: Boolean});\n\n    for (const layer of newLayers) {\n      layer.context = this.context;\n    }\n\n    const {error, generatedLayers} = this._updateLayers({\n      oldLayers: this.layers,\n      newLayers\n    });\n\n    this.layers = generatedLayers;\n\n    // Throw first error found, if any\n    if (error) {\n      throw error;\n    }\n    return this;\n  }\n\n  // Update layers from last cycle if `setNeedsUpdate()` has been called\n  updateLayers() {\n    // NOTE: For now, even if only some layer has changed, we update all layers\n    // to ensure that layer id maps etc remain consistent even if different\n    // sublayers are rendered\n    const reason = this.needsUpdate();\n    if (reason) {\n      this.setNeedsRedraw(`updating layers: ${reason}`);\n      // Force a full update\n      const forceUpdate = true;\n      this.setLayers(this.lastRenderedLayers, forceUpdate);\n    }\n  }\n\n  //\n  // PRIVATE METHODS\n  //\n\n  _checkIfNeedsRedraw(opts) {\n    let redraw = this._needsRedraw;\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n\n    // This layers list doesn't include sublayers, relying on composite layers\n    for (const layer of this.layers) {\n      // Call every layer to clear their flags\n      const layerNeedsRedraw = layer.getNeedsRedraw(opts);\n      redraw = redraw || layerNeedsRedraw;\n    }\n\n    return redraw;\n  }\n\n  // Make a viewport \"current\" in layer context, updating viewportChanged flags\n  activateViewport(viewport) {\n    const oldViewport = this.context.viewport;\n    const viewportChanged = !oldViewport || !viewport.equals(oldViewport);\n\n    if (viewportChanged) {\n      log.log(4, 'Viewport changed', viewport)();\n\n      this.context.viewport = viewport;\n\n      // Update layers states\n      // Let screen space layers update their state based on viewport\n      for (const layer of this.layers) {\n        layer.setChangeFlags({viewportChanged: 'Viewport changed'});\n        this._updateLayer(layer);\n      }\n    }\n\n    assert(this.context.viewport, 'LayerManager: viewport not set');\n\n    return this;\n  }\n\n  // Match all layers, checking for caught errors\n  // To avoid having an exception in one layer disrupt other layers\n  // TODO - mark layers with exceptions as bad and remove from rendering cycle?\n  _updateLayers({oldLayers, newLayers}) {\n    // Create old layer map\n    const oldLayerMap = {};\n    for (const oldLayer of oldLayers) {\n      if (oldLayerMap[oldLayer.id]) {\n        log.warn(`Multiple old layers with same id ${layerName(oldLayer)}`)();\n      } else {\n        oldLayerMap[oldLayer.id] = oldLayer;\n      }\n    }\n\n    // Allocate array for generated layers\n    const generatedLayers = [];\n\n    // Match sublayers\n    const error = this._updateSublayersRecursively({\n      newLayers,\n      oldLayerMap,\n      generatedLayers\n    });\n\n    // Finalize unmatched layers\n    const error2 = this._finalizeOldLayers(oldLayerMap);\n\n    this._needsUpdate = generatedLayers.some(layer => layer.hasUniformTransition());\n\n    const firstError = error || error2;\n    return {error: firstError, generatedLayers};\n  }\n\n  /* eslint-disable complexity,max-statements */\n  // Note: adds generated layers to `generatedLayers` array parameter\n  _updateSublayersRecursively({newLayers, oldLayerMap, generatedLayers}) {\n    let error = null;\n\n    for (const newLayer of newLayers) {\n      newLayer.context = this.context;\n\n      // Given a new coming layer, find its matching old layer (if any)\n      const oldLayer = oldLayerMap[newLayer.id];\n      if (oldLayer === null) {\n        // null, rather than undefined, means this id was originally there\n        log.warn(`Multiple new layers with same id ${layerName(newLayer)}`)();\n      }\n      // Remove the old layer from candidates, as it has been matched with this layer\n      oldLayerMap[newLayer.id] = null;\n\n      let sublayers = null;\n\n      // We must not generate exceptions until after layer matching is complete\n      try {\n        if (this._debug && oldLayer !== newLayer) {\n          newLayer.validateProps();\n        }\n\n        if (!oldLayer) {\n          const err = this._initializeLayer(newLayer);\n          error = error || err;\n          initLayerInSeer(newLayer); // Initializes layer in seer chrome extension (if connected)\n        } else {\n          this._transferLayerState(oldLayer, newLayer);\n          const err = this._updateLayer(newLayer);\n          error = error || err;\n          updateLayerInSeer(newLayer); // Updates layer in seer chrome extension (if connected)\n        }\n        generatedLayers.push(newLayer);\n\n        // Call layer lifecycle method: render sublayers\n        sublayers = newLayer.isComposite && newLayer.getSubLayers();\n        // End layer lifecycle method: render sublayers\n      } catch (err) {\n        log.warn(`error during matching of ${layerName(newLayer)}`, err)();\n        error = error || err; // Record first exception\n      }\n\n      if (sublayers) {\n        const err = this._updateSublayersRecursively({\n          newLayers: sublayers,\n          oldLayerMap,\n          generatedLayers\n        });\n        error = error || err;\n      }\n    }\n\n    return error;\n  }\n  /* eslint-enable complexity,max-statements */\n\n  // Finalize any old layers that were not matched\n  _finalizeOldLayers(oldLayerMap) {\n    let error = null;\n    for (const layerId in oldLayerMap) {\n      const layer = oldLayerMap[layerId];\n      if (layer) {\n        error = error || this._finalizeLayer(layer);\n      }\n    }\n    return error;\n  }\n\n  // EXCEPTION SAFE LAYER ACCESS\n\n  // Initializes a single layer, calling layer methods\n  _initializeLayer(layer) {\n    log.log(LOG_PRIORITY_LIFECYCLE, `initializing ${layerName(layer)}`)();\n\n    let error = null;\n    try {\n      layer._initialize();\n      layer.lifecycle = LIFECYCLE.INITIALIZED;\n    } catch (err) {\n      log.warn(`error while initializing ${layerName(layer)}\\n`, err)();\n      error = error || err;\n      // TODO - what should the lifecycle state be here? LIFECYCLE.INITIALIZATION_FAILED?\n    }\n\n    // Set back pointer (used in picking)\n    layer.internalState.layer = layer;\n\n    // Save layer on model for picking purposes\n    // store on model.userData rather than directly on model\n    for (const model of layer.getModels()) {\n      model.userData.layer = layer;\n    }\n\n    return error;\n  }\n\n  _transferLayerState(oldLayer, newLayer) {\n    newLayer._transferState(oldLayer);\n    newLayer.lifecycle = LIFECYCLE.MATCHED;\n\n    if (newLayer !== oldLayer) {\n      log.log(\n        LOG_PRIORITY_LIFECYCLE_MINOR,\n        `matched ${layerName(newLayer)}`,\n        oldLayer,\n        '->',\n        newLayer\n      )();\n      oldLayer.lifecycle = LIFECYCLE.AWAITING_GC;\n    } else {\n      log.log(LOG_PRIORITY_LIFECYCLE_MINOR, `Matching layer is unchanged ${newLayer.id}`)();\n    }\n  }\n\n  // Updates a single layer, cleaning all flags\n  _updateLayer(layer) {\n    log.log(\n      LOG_PRIORITY_LIFECYCLE_MINOR,\n      `updating ${layer} because: ${layer.printChangeFlags()}`\n    )();\n    let error = null;\n    try {\n      layer._update();\n    } catch (err) {\n      log.warn(`error during update of ${layerName(layer)}`, err)();\n      // Save first error\n      error = err;\n    }\n    return error;\n  }\n\n  // Finalizes a single layer\n  _finalizeLayer(layer) {\n    assert(layer.lifecycle !== LIFECYCLE.AWAITING_FINALIZATION);\n    layer.lifecycle = LIFECYCLE.AWAITING_FINALIZATION;\n    let error = null;\n    this.setNeedsRedraw(`finalized ${layerName(layer)}`);\n    try {\n      layer._finalize();\n    } catch (err) {\n      log.warn(`error during finalization of ${layerName(layer)}`, err)();\n      error = err;\n    }\n    layer.lifecycle = LIFECYCLE.FINALIZED;\n    log.log(LOG_PRIORITY_LIFECYCLE, `finalizing ${layerName(layer)}`)();\n    return error;\n  }\n\n  // SEER INTEGRATION\n\n  /**\n   * Called upon Seer initialization, manually sends layers data.\n   */\n  _initSeer() {\n    this.layers.forEach(layer => {\n      initLayerInSeer(layer);\n      updateLayerInSeer(layer);\n    });\n  }\n\n  /**\n   * On Seer property edition, set override and update layers.\n   */\n  _editSeer(payload) {\n    if (payload.type !== 'edit' || payload.valuePath[0] !== 'props') {\n      return;\n    }\n\n    setPropOverrides(payload.itemKey, payload.valuePath.slice(1), payload.value);\n    this.updateLayers();\n  }\n}\n"],"file":"layer-manager.js"}