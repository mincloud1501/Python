{"version":3,"sources":["../../../src/lib/composite-layer.js"],"names":["CompositeLayer","internalState","subLayers","updateObject","setNeedsUpdate","info","object","isDataWrapped","__source","parent","id","Object","assign","index","data","overridingProps","props","_subLayerProps","length","DefaultLayerClass","type","row","sourceObject","sourceObjectIndex","accessor","objectInfo","target","x","i","sublayerProps","opacity","pickable","visible","parameters","getPolygonOffset","highlightedObjectIndex","autoHighlight","highlightColor","coordinateSystem","coordinateOrigin","wrapLongitude","positionFormat","modelMatrix","extensions","newProps","overridingSublayerProps","overridingSublayerTriggers","updateTriggers","propTypes","constructor","_propTypes","key","propType","getSubLayerAccessor","all","extension","passThroughProps","getSubLayerProps","call","needsUpdate","log","renderLayers","filter","Boolean","layer","Layer","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport Layer from './layer';\nimport log from '../utils/log';\nimport {flatten} from '../utils/flatten';\n\nexport default class CompositeLayer extends Layer {\n  get isComposite() {\n    return true;\n  }\n\n  getSubLayers() {\n    return (this.internalState && this.internalState.subLayers) || [];\n  }\n\n  // initializeState is usually not needed for composite layers\n  // Provide empty definition to disable check for missing definition\n  initializeState() {}\n\n  // Updates selected state members and marks the composite layer to need rerender\n  setState(updateObject) {\n    super.setState(updateObject);\n    // Trigger a layer update\n    // Although conceptually layer.draw and compositeLayer.renderLayers are equivalent,\n    // they are executed during different lifecycles.\n    // draw can be called without calling updateState (e.g. most viewport changes),\n    // while renderLayers can only be called during a recursive layer update.\n    this.setNeedsUpdate();\n  }\n\n  // called to augment the info object that is bubbled up from a sublayer\n  // override Layer.getPickingInfo() because decoding / setting uniform do\n  // not apply to a composite layer.\n  // @return null to cancel event\n  getPickingInfo({info}) {\n    const {object} = info;\n    const isDataWrapped =\n      object && object.__source && object.__source.parent && object.__source.parent.id === this.id;\n\n    if (!isDataWrapped) {\n      return info;\n    }\n\n    return Object.assign(info, {\n      // override object with picked data\n      object: object.__source.object,\n      index: object.__source.index\n    });\n  }\n\n  // Implement to generate subLayers\n  renderLayers() {\n    return null;\n  }\n\n  // Returns true if sub layer needs to be rendered\n  shouldRenderSubLayer(id, data) {\n    const {_subLayerProps: overridingProps} = this.props;\n\n    return (data && data.length) || (overridingProps && overridingProps[id]);\n  }\n\n  // Returns sub layer class for a specific sublayer\n  getSubLayerClass(id, DefaultLayerClass) {\n    const {_subLayerProps: overridingProps} = this.props;\n\n    return (\n      (overridingProps && overridingProps[id] && overridingProps[id].type) || DefaultLayerClass\n    );\n  }\n\n  // When casting user data into another format to pass to sublayers,\n  // add reference to the original object and object index\n  getSubLayerRow(row, sourceObject, sourceObjectIndex) {\n    row.__source = {\n      parent: this,\n      object: sourceObject,\n      index: sourceObjectIndex\n    };\n    return row;\n  }\n\n  // Some composite layers cast user data into another format before passing to sublayers\n  // We need to unwrap them before calling the accessor so that they see the original data\n  // objects\n  getSubLayerAccessor(accessor) {\n    if (typeof accessor === 'function') {\n      const objectInfo = {\n        data: this.props.data,\n        target: []\n      };\n      return (x, i) => {\n        if (x.__source) {\n          objectInfo.index = x.__source.index;\n          return accessor(x.__source.object, objectInfo);\n        }\n        return accessor(x, i);\n      };\n    }\n    return accessor;\n  }\n\n  // Returns sub layer props for a specific sublayer\n  getSubLayerProps(sublayerProps) {\n    const {\n      opacity,\n      pickable,\n      visible,\n      parameters,\n      getPolygonOffset,\n      highlightedObjectIndex,\n      autoHighlight,\n      highlightColor,\n      coordinateSystem,\n      coordinateOrigin,\n      wrapLongitude,\n      positionFormat,\n      modelMatrix,\n      extensions,\n      _subLayerProps: overridingProps\n    } = this.props;\n    const newProps = {\n      opacity,\n      pickable,\n      visible,\n      parameters,\n      getPolygonOffset,\n      highlightedObjectIndex,\n      autoHighlight,\n      highlightColor,\n      coordinateSystem,\n      coordinateOrigin,\n      wrapLongitude,\n      positionFormat,\n      modelMatrix,\n      extensions\n    };\n\n    if (sublayerProps) {\n      const overridingSublayerProps = overridingProps && overridingProps[sublayerProps.id];\n      const overridingSublayerTriggers =\n        overridingSublayerProps && overridingSublayerProps.updateTriggers;\n\n      if (overridingSublayerProps) {\n        const propTypes = this.constructor._propTypes;\n        for (const key in overridingSublayerProps) {\n          const propType = propTypes[key];\n          // eslint-disable-next-line\n          if (propType && propType.type === 'accessor') {\n            overridingSublayerProps[key] = this.getSubLayerAccessor(overridingSublayerProps[key]);\n          }\n        }\n      }\n\n      Object.assign(\n        newProps,\n        sublayerProps,\n        // experimental feature that allows users to override sublayer props via parent layer prop\n        overridingSublayerProps,\n        {\n          id: `${this.props.id}-${sublayerProps.id}`,\n          updateTriggers: Object.assign(\n            {\n              all: this.props.updateTriggers.all\n            },\n            sublayerProps.updateTriggers,\n            overridingSublayerTriggers\n          )\n        }\n      );\n    }\n\n    // Pass through extension props\n    for (const extension of extensions) {\n      const passThroughProps = extension.getSubLayerProps.call(this, extension);\n      Object.assign(newProps, passThroughProps, {\n        updateTriggers: Object.assign(newProps.updateTriggers, passThroughProps.updateTriggers)\n      });\n    }\n\n    return newProps;\n  }\n\n  _getAttributeManager() {\n    return null;\n  }\n\n  // Called by layer manager to render subLayers\n  _renderLayers() {\n    let {subLayers} = this.internalState;\n    if (subLayers && !this.needsUpdate()) {\n      log.log(3, `Composite layer reused subLayers ${this}`, this.internalState.subLayers)();\n    } else {\n      subLayers = this.renderLayers();\n      // Flatten the returned array, removing any null, undefined or false\n      // this allows layers to render sublayers conditionally\n      // (see CompositeLayer.renderLayers docs)\n      subLayers = flatten(subLayers, {filter: Boolean});\n      this.internalState.subLayers = subLayers;\n      log.log(2, `Composite layer rendered new subLayers ${this}`, subLayers)();\n    }\n\n    // populate reference to parent layer (this layer)\n    // NOTE: needs to be done even when reusing layers as the parent may have changed\n    for (const layer of subLayers) {\n      layer.parent = this;\n    }\n  }\n}\n\nCompositeLayer.layerName = 'CompositeLayer';\n"],"file":"composite-layer.js"}