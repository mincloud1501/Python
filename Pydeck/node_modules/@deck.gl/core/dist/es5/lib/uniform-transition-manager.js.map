{"version":3,"sources":["../../../src/lib/uniform-transition-manager.js"],"names":["TRANSITION_TYPES","interpolation","CPUInterpolationTransition","spring","CPUSpringTransition","UniformTransitionManager","timeline","transitions","Map","key","fromValue","toValue","settings","has","transition","get","value","remove","TransitionType","type","log","error","start","set","cancel","propsInTransition","update","inProgress","keys","size"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;AAEA,IAAMA,gBAAgB,GAAG;AACvBC,EAAAA,aAAa,EAAEC,sCADQ;AAEvBC,EAAAA,MAAM,EAAEC;AAFe,CAAzB;;IAKqBC,wB;AACnB,oCAAYC,QAAZ,EAAsB;AAAA;AACpB,SAAKC,WAAL,GAAmB,IAAIC,GAAJ,EAAnB;AACA,SAAKF,QAAL,GAAgBA,QAAhB;AACD;;;;wBAMGG,G,EAAKC,S,EAAWC,O,EAASC,Q,EAAU;AAAA,UAC9BL,WAD8B,GACf,IADe,CAC9BA,WAD8B;;AAErC,UAAIA,WAAW,CAACM,GAAZ,CAAgBJ,GAAhB,CAAJ,EAA0B;AACxB,YAAMK,WAAU,GAAGP,WAAW,CAACQ,GAAZ,CAAgBN,GAAhB,CAAnB;;AAEAC,QAAAA,SAAS,GAAGI,WAAU,CAACE,KAAvB;AACA,aAAKC,MAAL,CAAYR,GAAZ;AACD;;AAEDG,MAAAA,QAAQ,GAAG,2DAA4BA,QAA5B,CAAX;;AACA,UAAI,CAACA,QAAL,EAAe;AACb;AACD;;AAED,UAAMM,cAAc,GAAGlB,gBAAgB,CAACY,QAAQ,CAACO,IAAV,CAAvC;;AACA,UAAI,CAACD,cAAL,EAAqB;AACnBE,wBAAIC,KAAJ,wCAA0CT,QAAQ,CAACO,IAAnD;;AACA;AACD;;AACD,UAAML,UAAU,GAAG,IAAII,cAAJ,CAAmB,KAAKZ,QAAxB,CAAnB;AACAQ,MAAAA,UAAU,CAACQ,KAAX,mBACKV,QADL;AAEEF,QAAAA,SAAS,EAATA,SAFF;AAGEC,QAAAA,OAAO,EAAPA;AAHF;AAKAJ,MAAAA,WAAW,CAACgB,GAAZ,CAAgBd,GAAhB,EAAqBK,UAArB;AACD;;;2BAEML,G,EAAK;AAAA,UACHF,WADG,GACY,IADZ,CACHA,WADG;;AAEV,UAAIA,WAAW,CAACM,GAAZ,CAAgBJ,GAAhB,CAAJ,EAA0B;AACxBF,QAAAA,WAAW,CAACQ,GAAZ,CAAgBN,GAAhB,EAAqBe,MAArB;AACAjB,QAAAA,WAAW,UAAX,CAAmBE,GAAnB;AACD;AACF;;;6BAEQ;AACP,UAAMgB,iBAAiB,GAAG,EAA1B;AADO;AAAA;AAAA;;AAAA;AAGP,6BAAgC,KAAKlB,WAArC,8HAAkD;AAAA;AAAA,cAAtCE,GAAsC;AAAA,cAAjCK,UAAiC;;AAChDA,UAAAA,UAAU,CAACY,MAAX;AACAD,UAAAA,iBAAiB,CAAChB,GAAD,CAAjB,GAAyBK,UAAU,CAACE,KAApC;;AACA,cAAI,CAACF,UAAU,CAACa,UAAhB,EAA4B;AAE1B,iBAAKV,MAAL,CAAYR,GAAZ;AACD;AACF;AAVM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAYP,aAAOgB,iBAAP;AACD;;;4BAEO;AAAA;AAAA;AAAA;;AAAA;AACN,8BAAkB,KAAKlB,WAAL,CAAiBqB,IAAjB,EAAlB,mIAA2C;AAAA,cAAhCnB,GAAgC;AACzC,eAAKQ,MAAL,CAAYR,GAAZ;AACD;AAHK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIP;;;wBA3DY;AACX,aAAO,KAAKF,WAAL,CAAiBsB,IAAjB,GAAwB,CAA/B;AACD","sourcesContent":["import {normalizeTransitionSettings} from './attribute-transition-utils';\nimport CPUInterpolationTransition from '../transitions/cpu-interpolation-transition';\nimport CPUSpringTransition from '../transitions/cpu-spring-transition';\nimport log from '../utils/log';\n\nconst TRANSITION_TYPES = {\n  interpolation: CPUInterpolationTransition,\n  spring: CPUSpringTransition\n};\n\nexport default class UniformTransitionManager {\n  constructor(timeline) {\n    this.transitions = new Map();\n    this.timeline = timeline;\n  }\n\n  get active() {\n    return this.transitions.size > 0;\n  }\n\n  add(key, fromValue, toValue, settings) {\n    const {transitions} = this;\n    if (transitions.has(key)) {\n      const transition = transitions.get(key);\n      // start from interrupted position\n      fromValue = transition.value;\n      this.remove(key);\n    }\n\n    settings = normalizeTransitionSettings(settings);\n    if (!settings) {\n      return;\n    }\n\n    const TransitionType = TRANSITION_TYPES[settings.type];\n    if (!TransitionType) {\n      log.error(`unsupported transition type '${settings.type}'`)();\n      return;\n    }\n    const transition = new TransitionType(this.timeline);\n    transition.start({\n      ...settings,\n      fromValue,\n      toValue\n    });\n    transitions.set(key, transition);\n  }\n\n  remove(key) {\n    const {transitions} = this;\n    if (transitions.has(key)) {\n      transitions.get(key).cancel();\n      transitions.delete(key);\n    }\n  }\n\n  update() {\n    const propsInTransition = {};\n\n    for (const [key, transition] of this.transitions) {\n      transition.update();\n      propsInTransition[key] = transition.value;\n      if (!transition.inProgress) {\n        // transition ended\n        this.remove(key);\n      }\n    }\n\n    return propsInTransition;\n  }\n\n  clear() {\n    for (const key of this.transitions.keys()) {\n      this.remove(key);\n    }\n  }\n}\n"],"file":"uniform-transition-manager.js"}