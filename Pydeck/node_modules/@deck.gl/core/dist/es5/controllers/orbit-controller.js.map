{"version":3,"sources":["../../../src/controllers/orbit-controller.js"],"names":["MOVEMENT_SPEED","DEFAULT_STATE","orbitAxis","rotationX","rotationOrbit","fovy","zoom","target","minRotationX","maxRotationX","minZoom","Infinity","maxZoom","LINEAR_TRANSITION_PROPS","transitionDuration","transitionEasing","t","transitionInterpolator","LinearInterpolator","transitionInterruption","TRANSITION_EVENTS","BREAK","zoom2Scale","Math","pow","OrbitState","ViewportType","width","height","startPanPosition","startTarget","startRotationX","startRotationOrbit","startZoomPosition","startZoom","_interactiveState","_viewportProps","pos","_getUpdatedState","startPos","delta","Vector2","subtract","_calculateNewTarget","pixelOffset","deltaScaleX","deltaScaleY","Number","isFinite","isRotating","viewState","props","Object","assign","scale","newZoom","_calculateNewZoom","startScale","newScale","dX","dY","log2","viewportProps","viewport","center","project","unproject","newProps","ViewState","OrbitController","Controller"],"mappings":"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","sourcesContent":["import {clamp, Vector2} from 'math.gl';\nimport Controller from './controller';\nimport ViewState from './view-state';\nimport LinearInterpolator from '../transitions/linear-interpolator';\nimport {TRANSITION_EVENTS} from './transition-manager';\n\nconst MOVEMENT_SPEED = 50; // per keyboard click\n\nconst DEFAULT_STATE = {\n  orbitAxis: 'Z',\n  rotationX: 0,\n  rotationOrbit: 0,\n  fovy: 50,\n  zoom: 0,\n  target: [0, 0, 0],\n  minRotationX: -90,\n  maxRotationX: 90,\n  minZoom: -Infinity,\n  maxZoom: Infinity\n};\n\nconst LINEAR_TRANSITION_PROPS = {\n  transitionDuration: 300,\n  transitionEasing: t => t,\n  transitionInterpolator: new LinearInterpolator(['target', 'zoom', 'rotationX', 'rotationOrbit']),\n  transitionInterruption: TRANSITION_EVENTS.BREAK\n};\n\n/* Helpers */\n\nconst zoom2Scale = zoom => Math.pow(2, zoom);\n\n// const mod = (value, divisor) => {\n//   const modulus = value % divisor;\n//   return modulus < 0 ? divisor + modulus : modulus;\n// };\n\nexport class OrbitState extends ViewState {\n  constructor({\n    ViewportType,\n\n    /* Viewport arguments */\n    width, // Width of viewport\n    height, // Height of viewport\n    orbitAxis = DEFAULT_STATE.orbitAxis,\n    rotationX = DEFAULT_STATE.rotationX, // Rotation around x axis\n    rotationOrbit = DEFAULT_STATE.rotationOrbit, // Rotation around orbit axis\n    target = DEFAULT_STATE.target,\n    zoom = DEFAULT_STATE.zoom,\n    fovy = DEFAULT_STATE.fovy,\n\n    /* Viewport constraints */\n    minRotationX = DEFAULT_STATE.minRotationX,\n    maxRotationX = DEFAULT_STATE.maxRotationX,\n    minZoom = DEFAULT_STATE.minZoom,\n    maxZoom = DEFAULT_STATE.maxZoom,\n\n    /** Interaction states, required to calculate change during transform */\n    // Model state when the pan operation first started\n    startPanPosition,\n    startTarget,\n    // Model state when the rotate operation first started\n    startRotationX,\n    startRotationOrbit,\n    // Model state when the zoom operation first started\n    startZoomPosition,\n    startZoom\n  }) {\n    super({\n      width,\n      height,\n      orbitAxis,\n      rotationX,\n      rotationOrbit,\n      target,\n      fovy,\n      zoom,\n      minRotationX,\n      maxRotationX,\n      minZoom,\n      maxZoom\n    });\n\n    this._interactiveState = {\n      startPanPosition,\n      startTarget,\n      startRotationX,\n      startRotationOrbit,\n      startZoomPosition,\n      startZoom\n    };\n\n    this.ViewportType = ViewportType;\n  }\n\n  /* Public API */\n\n  getViewportProps() {\n    return this._viewportProps;\n  }\n\n  getInteractiveState() {\n    return this._interactiveState;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart({pos}) {\n    const {target} = this._viewportProps;\n\n    return this._getUpdatedState({\n      startPanPosition: pos,\n      startTarget: target\n    });\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  pan({pos, startPos}) {\n    const {startPanPosition, startTarget} = this._interactiveState;\n    const delta = new Vector2(pos).subtract(startPanPosition);\n\n    return this._getUpdatedState({\n      target: this._calculateNewTarget({startTarget, pixelOffset: delta})\n    });\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this._getUpdatedState({\n      startPanPosition: null,\n      startTarget: null\n    });\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  rotateStart({pos}) {\n    return this._getUpdatedState({\n      startRotationX: this._viewportProps.rotationX,\n      startRotationOrbit: this._viewportProps.rotationOrbit\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  rotate({deltaScaleX, deltaScaleY}) {\n    const {startRotationX, startRotationOrbit} = this._interactiveState;\n\n    if (!Number.isFinite(startRotationX) || !Number.isFinite(startRotationOrbit)) {\n      return this;\n    }\n    if (startRotationX < -90 || startRotationX > 90) {\n      // When looking at the \"back\" side of the scene, invert horizontal drag\n      // so that the camera movement follows user input\n      deltaScaleX *= -1;\n    }\n\n    return this._getUpdatedState({\n      rotationX: startRotationX + deltaScaleY * 180,\n      rotationOrbit: startRotationOrbit + deltaScaleX * 180,\n      isRotating: true\n    });\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this._getUpdatedState({\n      startRotationX: null,\n      startRotationOrbit: null\n    });\n  }\n\n  // default implementation of shortest path between two view states\n  shortestPathFrom(viewState) {\n    const props = Object.assign({}, this._viewportProps);\n    return props;\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  zoomStart({pos}) {\n    return this._getUpdatedState({\n      startZoomPosition: pos,\n      startTarget: this._viewportProps.target,\n      startZoom: this._viewportProps.zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current target is\n   * @param {[Number, Number]} startPos - the target position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({pos, startPos, scale}) {\n    const {zoom, width, height, target} = this._viewportProps;\n    let {startZoom, startZoomPosition, startTarget} = this._interactiveState;\n    if (!Number.isFinite(startZoom)) {\n      // We have two modes of zoom:\n      // scroll zoom that are discrete events (transform from the current zoom level),\n      // and pinch zoom that are continuous events (transform from the zoom level when\n      // pinch started).\n      // If startZoom state is defined, then use the startZoom state;\n      // otherwise assume discrete zooming\n      startZoom = zoom;\n      startTarget = target;\n      startZoomPosition = startPos || pos;\n    }\n\n    const newZoom = this._calculateNewZoom({scale, startZoom});\n    const startScale = zoom2Scale(startZoom);\n    const newScale = zoom2Scale(newZoom);\n\n    const dX = (width / 2 - startZoomPosition[0]) * (newScale / startScale - 1);\n    const dY = (height / 2 - startZoomPosition[1]) * (newScale / startScale - 1);\n\n    return this._getUpdatedState({\n      zoom: newZoom,\n      target: this._calculateNewTarget({startTarget, zoom: newZoom, pixelOffset: [dX, dY]})\n    });\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd() {\n    return this._getUpdatedState({\n      startZoomPosition: null,\n      startTarget: null,\n      startZoom: null\n    });\n  }\n\n  zoomIn() {\n    return this._getUpdatedState({\n      zoom: this._calculateNewZoom({scale: 2})\n    });\n  }\n\n  zoomOut() {\n    return this._getUpdatedState({\n      zoom: this._calculateNewZoom({scale: 0.5})\n    });\n  }\n\n  moveLeft() {\n    const pixelOffset = [-MOVEMENT_SPEED, 0];\n    return this._getUpdatedState({\n      target: this._calculateNewTarget({pixelOffset})\n    });\n  }\n\n  moveRight() {\n    const pixelOffset = [MOVEMENT_SPEED, 0];\n    return this._getUpdatedState({\n      target: this._calculateNewTarget({pixelOffset})\n    });\n  }\n\n  moveUp() {\n    const pixelOffset = [0, -MOVEMENT_SPEED];\n    return this._getUpdatedState({\n      target: this._calculateNewTarget({pixelOffset})\n    });\n  }\n\n  moveDown() {\n    const pixelOffset = [0, MOVEMENT_SPEED];\n    return this._getUpdatedState({\n      target: this._calculateNewTarget({pixelOffset})\n    });\n  }\n\n  rotateLeft() {\n    return this._getUpdatedState({\n      rotationOrbit: this._viewportProps.rotationOrbit - 15\n    });\n  }\n\n  rotateRight() {\n    return this._getUpdatedState({\n      rotationOrbit: this._viewportProps.rotationOrbit + 15\n    });\n  }\n\n  rotateUp() {\n    return this._getUpdatedState({\n      rotationX: this._viewportProps.rotationX - 10\n    });\n  }\n\n  rotateDown() {\n    return this._getUpdatedState({\n      rotationX: this._viewportProps.rotationX + 10\n    });\n  }\n\n  /* Private methods */\n\n  // Calculates new zoom\n  _calculateNewZoom({scale, startZoom}) {\n    const {maxZoom, minZoom} = this._viewportProps;\n    if (!Number.isFinite(startZoom)) {\n      startZoom = this._viewportProps.zoom;\n    }\n    const zoom = startZoom + Math.log2(scale);\n    return clamp(zoom, minZoom, maxZoom);\n  }\n\n  _calculateNewTarget({startTarget, zoom, pixelOffset}) {\n    const viewportProps = Object.assign({}, this._viewportProps);\n    if (Number.isFinite(zoom)) {\n      viewportProps.zoom = zoom;\n    }\n    if (startTarget) {\n      viewportProps.target = startTarget;\n    }\n    const viewport = new this.ViewportType(viewportProps);\n    const center = viewport.project(viewportProps.target);\n    return viewport.unproject([center[0] - pixelOffset[0], center[1] - pixelOffset[1], center[2]]);\n  }\n\n  _getUpdatedState(newProps) {\n    // Update _viewportProps\n    return new OrbitState(Object.assign({}, this._viewportProps, this._interactiveState, newProps));\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  _applyConstraints(props) {\n    // Ensure zoom is within specified range\n    const {maxZoom, minZoom, zoom, maxRotationX, minRotationX} = props;\n\n    props.zoom = clamp(zoom, minZoom, maxZoom);\n    props.rotationX = clamp(props.rotationX, minRotationX, maxRotationX);\n\n    return props;\n  }\n}\n\nexport default class OrbitController extends Controller {\n  constructor(props) {\n    super(OrbitState, props);\n  }\n\n  _getTransitionProps() {\n    // Enables Transitions on double-tap and key-down events.\n    return LINEAR_TRANSITION_PROPS;\n  }\n}\n"],"file":"orbit-controller.js"}