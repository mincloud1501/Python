{"version":3,"sources":["../../../src/controllers/transition-manager.js"],"names":["noop","TRANSITION_EVENTS","BREAK","SNAP_TO_END","IGNORE","DEFAULT_PROPS","transitionDuration","transitionEasing","t","transitionInterpolator","LinearInterpolator","transitionInterruption","onTransitionStart","onTransitionInterrupt","onTransitionEnd","TransitionManager","ControllerState","props","Object","assign","propsInTransition","transition","Transition","timeline","onViewStateChange","_onTransitionUpdate","bind","cancel","nextProps","transitionTriggered","currentProps","_shouldIgnoreViewportChange","_isTransitionEnabled","settings","interruption","endProps","startProps","_triggerTransition","update","inProgress","interpolator","arePropsEqual","_isUpdateDueToCurrentTransition","startViewstate","endViewStateProps","shortestPathFrom","initialProps","initializeProps","start","duration","easing","end","onStart","onUpdate","onInterrupt","_onTransitionEnd","onEnd","updateTransition","callback","time","viewport","interpolateProps","getViewportProps","viewState","interactionState","inTransition","oldViewState","defaultProps"],"mappings":"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","sourcesContent":["import LinearInterpolator from '../transitions/linear-interpolator';\nimport Transition from '../transitions/transition';\nimport assert from '../utils/assert';\n\nconst noop = () => {};\n\nexport const TRANSITION_EVENTS = {\n  BREAK: 1,\n  SNAP_TO_END: 2,\n  IGNORE: 3\n};\n\nconst DEFAULT_PROPS = {\n  transitionDuration: 0,\n  transitionEasing: t => t,\n  transitionInterpolator: new LinearInterpolator(),\n  transitionInterruption: TRANSITION_EVENTS.BREAK,\n  onTransitionStart: noop,\n  onTransitionInterrupt: noop,\n  onTransitionEnd: noop\n};\n\nexport default class TransitionManager {\n  constructor(ControllerState, props = {}) {\n    assert(ControllerState);\n    this.ControllerState = ControllerState;\n    this.props = Object.assign({}, DEFAULT_PROPS, props);\n    this.propsInTransition = null;\n    this.transition = new Transition(props.timeline);\n\n    this.onViewStateChange = props.onViewStateChange;\n\n    this._onTransitionUpdate = this._onTransitionUpdate.bind(this);\n  }\n\n  finalize() {\n    this.transition.cancel();\n  }\n\n  // Returns current transitioned viewport.\n  getViewportInTransition() {\n    return this.propsInTransition;\n  }\n\n  // Process the vewiport change, either ignore or trigger a new transition.\n  // Return true if a new transition is triggered, false otherwise.\n  processViewStateChange(nextProps) {\n    let transitionTriggered = false;\n    const currentProps = this.props;\n    // Set this.props here as '_triggerTransition' calls '_updateViewport' that uses this.props.\n    nextProps = Object.assign({}, DEFAULT_PROPS, nextProps);\n    this.props = nextProps;\n\n    // NOTE: Be cautious re-ordering statements in this function.\n    if (this._shouldIgnoreViewportChange(currentProps, nextProps)) {\n      return transitionTriggered;\n    }\n\n    if (this._isTransitionEnabled(nextProps)) {\n      const {interruption, endProps} = this.transition.settings;\n      const startProps = Object.assign(\n        {},\n        currentProps,\n        interruption === TRANSITION_EVENTS.SNAP_TO_END\n          ? endProps\n          : this.propsInTransition || currentProps\n      );\n\n      this._triggerTransition(startProps, nextProps);\n\n      transitionTriggered = true;\n    } else {\n      this.transition.cancel();\n    }\n\n    return transitionTriggered;\n  }\n\n  updateTransition() {\n    this.transition.update();\n  }\n\n  // Helper methods\n\n  _isTransitionEnabled(props) {\n    return props.transitionDuration > 0 && props.transitionInterpolator;\n  }\n\n  _isUpdateDueToCurrentTransition(props) {\n    if (this.transition.inProgress) {\n      return this.transition.settings.interpolator.arePropsEqual(props, this.propsInTransition);\n    }\n    return false;\n  }\n\n  _shouldIgnoreViewportChange(currentProps, nextProps) {\n    if (this.transition.inProgress) {\n      // Ignore update if it is requested to be ignored\n      return (\n        this.transition.settings.interruption === TRANSITION_EVENTS.IGNORE ||\n        // Ignore update if it is due to current active transition.\n        this._isUpdateDueToCurrentTransition(nextProps)\n      );\n    } else if (this._isTransitionEnabled(nextProps)) {\n      // Ignore if none of the viewport props changed.\n      return nextProps.transitionInterpolator.arePropsEqual(currentProps, nextProps);\n    }\n    return true;\n  }\n\n  _triggerTransition(startProps, endProps) {\n    assert(this._isTransitionEnabled(endProps), 'Transition is not enabled');\n\n    const startViewstate = new this.ControllerState(startProps);\n    const endViewStateProps = new this.ControllerState(endProps).shortestPathFrom(startViewstate);\n\n    const initialProps = endProps.transitionInterpolator.initializeProps(\n      startProps,\n      endViewStateProps\n    );\n\n    this.propsInTransition = {};\n    this.transition.start({\n      duration: endProps.transitionDuration,\n      easing: endProps.transitionEasing,\n      interpolator: endProps.transitionInterpolator,\n      interruption: endProps.transitionInterruption,\n\n      startProps: initialProps.start,\n      endProps: initialProps.end,\n\n      onStart: endProps.onTransitionStart,\n      onUpdate: this._onTransitionUpdate,\n      onInterrupt: this._onTransitionEnd(endProps.onTransitionInterrupt),\n      onEnd: this._onTransitionEnd(endProps.onTransitionEnd)\n    });\n    this.updateTransition();\n  }\n\n  _onTransitionEnd(callback) {\n    return transition => {\n      this.propsInTransition = null;\n      callback(transition);\n    };\n  }\n\n  _onTransitionUpdate(transition) {\n    // NOTE: Be cautious re-ordering statements in this function.\n    const {\n      time,\n      settings: {interpolator, startProps, endProps, duration, easing}\n    } = transition;\n    const t = easing(time / duration);\n    const viewport = interpolator.interpolateProps(startProps, endProps, t);\n\n    // This gurantees all props (e.g. bearing, longitude) are normalized\n    // So when viewports are compared they are in same range.\n    this.propsInTransition = new this.ControllerState(\n      Object.assign({}, this.props, viewport)\n    ).getViewportProps();\n\n    if (this.onViewStateChange) {\n      this.onViewStateChange({\n        viewState: this.propsInTransition,\n        interactionState: {inTransition: true},\n        oldViewState: this.props\n      });\n    }\n  }\n}\n\nTransitionManager.defaultProps = DEFAULT_PROPS;\n"],"file":"transition-manager.js"}