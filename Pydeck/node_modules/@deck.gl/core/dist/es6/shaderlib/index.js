import { registerShaderModules, ProgramManager } from '@luma.gl/core';
import { fp32, picking, gouraudlighting, phonglighting } from '@luma.gl/core';
import geometry from './misc/geometry';
import project from './project/project';
import project32 from './project32/project32';
import project64 from './project64/project64';
import shadow from './shadow/shadow';
const DEFAULT_MODULES = [geometry, project];
const SHADER_HOOKS = ['vs:DECKGL_FILTER_SIZE(inout vec3 size, VertexGeometry geometry)', 'vs:DECKGL_FILTER_GL_POSITION(inout vec4 position, VertexGeometry geometry)', 'vs:DECKGL_FILTER_COLOR(inout vec4 color, VertexGeometry geometry)', 'fs:DECKGL_FILTER_COLOR(inout vec4 color, FragmentGeometry geometry)'];
const MODULE_INJECTIONS = {
  picking: [{
    hook: 'fs:DECKGL_FILTER_COLOR',
    order: 99,
    injection: "\n    // use highlight color if this fragment belongs to the selected object.\n    color = picking_filterHighlightColor(color);\n\n    // use picking color if rendering to picking FBO.\n    color = picking_filterPickingColor(color);\n  "
  }]
};
export function initializeShaderModules() {
  registerShaderModules([fp32, project, project32, gouraudlighting, phonglighting, picking]);
}
export function createProgramManager(gl) {
  const programManager = ProgramManager.getDefaultProgramManager(gl);

  for (const shaderModule of DEFAULT_MODULES) {
    programManager.addDefaultModule(shaderModule);
  }

  for (const shaderHook of SHADER_HOOKS) {
    programManager.addShaderHook(shaderHook);
  }

  for (const moduleName in MODULE_INJECTIONS) {
    for (const injection of MODULE_INJECTIONS[moduleName]) {
      programManager.addModuleInjection(moduleName, injection);
    }
  }

  return programManager;
}
export { picking, project, project64, gouraudlighting, phonglighting, shadow };
//# sourceMappingURL=index.js.map