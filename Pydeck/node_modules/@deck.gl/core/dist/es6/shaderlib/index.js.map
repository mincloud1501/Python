{"version":3,"sources":["../../../src/shaderlib/index.js"],"names":["registerShaderModules","ProgramManager","fp32","picking","gouraudlighting","phonglighting","geometry","project","project32","project64","shadow","DEFAULT_MODULES","SHADER_HOOKS","MODULE_INJECTIONS","hook","order","injection","initializeShaderModules","createProgramManager","gl","programManager","getDefaultProgramManager","shaderModule","addDefaultModule","shaderHook","addShaderHook","moduleName","addModuleInjection"],"mappings":"AAoBA,SAAQA,qBAAR,EAA+BC,cAA/B,QAAoD,eAApD;AACA,SAAQC,IAAR,EAAcC,OAAd,EAAuBC,eAAvB,EAAwCC,aAAxC,QAA4D,eAA5D;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AAEA,MAAMC,eAAe,GAAG,CAACL,QAAD,EAAWC,OAAX,CAAxB;AAEA,MAAMK,YAAY,GAAG,CACnB,iEADmB,EAEnB,4EAFmB,EAGnB,mEAHmB,EAInB,qEAJmB,CAArB;AAOA,MAAMC,iBAAiB,GAAG;AACxBV,EAAAA,OAAO,EAAE,CACP;AACEW,IAAAA,IAAI,EAAE,wBADR;AAEEC,IAAAA,KAAK,EAAE,EAFT;AAGEC,IAAAA,SAAS;AAHX,GADO;AADe,CAA1B;AAgBA,OAAO,SAASC,uBAAT,GAAmC;AACxCjB,EAAAA,qBAAqB,CAAC,CAACE,IAAD,EAAOK,OAAP,EAAgBC,SAAhB,EAA2BJ,eAA3B,EAA4CC,aAA5C,EAA2DF,OAA3D,CAAD,CAArB;AACD;AAED,OAAO,SAASe,oBAAT,CAA8BC,EAA9B,EAAkC;AACvC,QAAMC,cAAc,GAAGnB,cAAc,CAACoB,wBAAf,CAAwCF,EAAxC,CAAvB;;AAEA,OAAK,MAAMG,YAAX,IAA2BX,eAA3B,EAA4C;AAC1CS,IAAAA,cAAc,CAACG,gBAAf,CAAgCD,YAAhC;AACD;;AACD,OAAK,MAAME,UAAX,IAAyBZ,YAAzB,EAAuC;AACrCQ,IAAAA,cAAc,CAACK,aAAf,CAA6BD,UAA7B;AACD;;AACD,OAAK,MAAME,UAAX,IAAyBb,iBAAzB,EAA4C;AAC1C,SAAK,MAAMG,SAAX,IAAwBH,iBAAiB,CAACa,UAAD,CAAzC,EAAuD;AACrDN,MAAAA,cAAc,CAACO,kBAAf,CAAkCD,UAAlC,EAA8CV,SAA9C;AACD;AACF;;AAED,SAAOI,cAAP;AACD;AAED,SAAQjB,OAAR,EAAiBI,OAAjB,EAA0BE,SAA1B,EAAqCL,eAArC,EAAsDC,aAAtD,EAAqEK,MAArE","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {registerShaderModules, ProgramManager} from '@luma.gl/core';\nimport {fp32, picking, gouraudlighting, phonglighting} from '@luma.gl/core';\nimport geometry from './misc/geometry';\nimport project from './project/project';\nimport project32 from './project32/project32';\nimport project64 from './project64/project64';\nimport shadow from './shadow/shadow';\n\nconst DEFAULT_MODULES = [geometry, project];\n\nconst SHADER_HOOKS = [\n  'vs:DECKGL_FILTER_SIZE(inout vec3 size, VertexGeometry geometry)',\n  'vs:DECKGL_FILTER_GL_POSITION(inout vec4 position, VertexGeometry geometry)',\n  'vs:DECKGL_FILTER_COLOR(inout vec4 color, VertexGeometry geometry)',\n  'fs:DECKGL_FILTER_COLOR(inout vec4 color, FragmentGeometry geometry)'\n];\n\nconst MODULE_INJECTIONS = {\n  picking: [\n    {\n      hook: 'fs:DECKGL_FILTER_COLOR',\n      order: 99,\n      injection: `\n    // use highlight color if this fragment belongs to the selected object.\n    color = picking_filterHighlightColor(color);\n\n    // use picking color if rendering to picking FBO.\n    color = picking_filterPickingColor(color);\n  `\n    }\n  ]\n};\n\nexport function initializeShaderModules() {\n  registerShaderModules([fp32, project, project32, gouraudlighting, phonglighting, picking]);\n}\n\nexport function createProgramManager(gl) {\n  const programManager = ProgramManager.getDefaultProgramManager(gl);\n\n  for (const shaderModule of DEFAULT_MODULES) {\n    programManager.addDefaultModule(shaderModule);\n  }\n  for (const shaderHook of SHADER_HOOKS) {\n    programManager.addShaderHook(shaderHook);\n  }\n  for (const moduleName in MODULE_INJECTIONS) {\n    for (const injection of MODULE_INJECTIONS[moduleName]) {\n      programManager.addModuleInjection(moduleName, injection);\n    }\n  }\n\n  return programManager;\n}\n\nexport {picking, project, project64, gouraudlighting, phonglighting, shadow};\n"],"file":"index.js"}