{"version":3,"sources":["../../../src/utils/typed-array-manager.js"],"names":["TypedArrayManager","constructor","overAlloc","poolSize","_pool","allocate","typedArray","count","size","type","padding","copy","Type","Float32Array","newSize","ArrayBuffer","isView","length","BYTES_PER_ELEMENT","buffer","byteLength","newArray","_allocate","set","fill","_release","release","Math","max","ceil","pool","i","findIndex","b","splice","push","shift"],"mappings":"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","sourcesContent":["export class TypedArrayManager {\n  constructor({overAlloc = 2, poolSize = 100} = {}) {\n    this.overAlloc = overAlloc;\n    this.poolSize = poolSize;\n\n    this._pool = [];\n  }\n\n  allocate(typedArray, count, {size = 1, type, padding = 0, copy = false}) {\n    const Type = type || (typedArray && typedArray.constructor) || Float32Array;\n\n    const newSize = count * size + padding;\n    if (ArrayBuffer.isView(typedArray)) {\n      if (newSize <= typedArray.length) {\n        return typedArray;\n      }\n      if (newSize * typedArray.BYTES_PER_ELEMENT <= typedArray.buffer.byteLength) {\n        return new Type(typedArray.buffer, 0, newSize);\n      }\n    }\n\n    const newArray = this._allocate(Type, newSize);\n\n    if (typedArray && copy) {\n      newArray.set(typedArray);\n    } else {\n      // Hack - viewing a buffer with a different type may create NaNs\n      // which crashes the Attribute validation\n      newArray.fill(0, 0, 4);\n    }\n\n    this._release(typedArray);\n    return newArray;\n  }\n\n  release(typedArray) {\n    this._release(typedArray);\n  }\n\n  _allocate(Type, size) {\n    // Allocate at least one element to ensure a valid buffer\n    size = Math.max(Math.ceil(size * this.overAlloc), 1);\n\n    // Check if available in pool\n    const pool = this._pool;\n    const byteLength = Type.BYTES_PER_ELEMENT * size;\n    const i = pool.findIndex(b => b.byteLength >= byteLength);\n    if (i >= 0) {\n      // Create a new array using an existing buffer\n      return new Type(pool.splice(i, 1)[0], 0, size);\n    }\n    return new Type(size);\n  }\n\n  _release(typedArray) {\n    if (!ArrayBuffer.isView(typedArray)) {\n      return;\n    }\n    const pool = this._pool;\n    const {buffer} = typedArray;\n    // Save the buffer of the released array into the pool\n    // Sort buffers by size\n    // TODO - implement binary search?\n    const {byteLength} = buffer;\n    const i = pool.findIndex(b => b.byteLength >= byteLength);\n    if (i < 0) {\n      pool.push(buffer);\n    } else if (i > 0 || pool.length < this.poolSize) {\n      pool.splice(i, 0, buffer);\n    }\n    if (pool.length > this.poolSize) {\n      // Drop the smallest one\n      pool.shift();\n    }\n  }\n}\n\nexport default new TypedArrayManager();\n"],"file":"typed-array-manager.js"}