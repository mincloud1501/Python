{"version":3,"sources":["../../../src/lib/base-attribute.js"],"names":["Buffer","hasFeature","FEATURES","_Accessor","Accessor","log","uid","BaseAttribute","constructor","gl","opts","id","type","isIndexed","target","ELEMENT_INDEX_UINT32","value","externalBuffer","buffer","userData","update","_validateAttributeDefinition","delete","constant","accessor","divisor","undefined","size","length","Float32Array","_setAccessor","index","elementOffset","i","_createBuffer","setData","data","normalized","_normalizeConstant","getBuffer","getValue","props","Object","assign","Number","isFinite","offset","stride","integer","instanced","isInstanced","getBytesPerElement","deprecated","map","x"],"mappings":"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","sourcesContent":["/* eslint-disable complexity */\nimport GL from '@luma.gl/constants';\nimport {Buffer, hasFeature, FEATURES, _Accessor as Accessor} from '@luma.gl/core';\nimport {log, uid} from '@luma.gl/core';\n\nexport default class BaseAttribute {\n  constructor(gl, opts = {}) {\n    const {id = uid('attribute'), type, isIndexed = false} = opts;\n\n    // Options that cannot be changed later\n    this.gl = gl;\n    this.id = id;\n    this.isIndexed = isIndexed;\n    this.target = isIndexed ? GL.ELEMENT_ARRAY_BUFFER : GL.ARRAY_BUFFER;\n    this.type = type;\n\n    if (isIndexed && !type) {\n      // If the attribute is indices, auto infer the correct type\n      // WebGL2 and WebGL1 w/ uint32 index extension support accepts Uint32Array, otherwise Uint16Array\n      this.type =\n        gl && hasFeature(gl, FEATURES.ELEMENT_INDEX_UINT32) ? GL.UNSIGNED_INT : GL.UNSIGNED_SHORT;\n    }\n\n    // Initialize the attribute descriptor, with WebGL and metadata fields\n    this.value = null;\n    this.externalBuffer = null;\n    this.buffer = null;\n    this.userData = {}; // Reserved for application\n    this.update(opts);\n\n    // Check all fields and generate helpful error messages\n    this._validateAttributeDefinition();\n  }\n\n  delete() {\n    if (this.buffer) {\n      this.buffer.delete();\n      this.buffer = null;\n    }\n  }\n\n  /* eslint-disable max-statements */\n  update(opts) {\n    const {value, buffer, constant = this.constant || false} = opts;\n\n    this.constant = constant;\n\n    if (buffer) {\n      this.externalBuffer = buffer;\n      this.constant = false;\n      // Hack: Float64Array value is required for double-precision attributes\n      // to generate correct shader attributes\n      // This is so that we can manually set value to indicate that the external\n      // buffer uses interleaved 64-bit values\n      this.value = value || null;\n\n      this.type = opts.type || buffer.accessor.type;\n      if (buffer.accessor.divisor !== undefined) {\n        this.divisor = buffer.accessor.divisor;\n      }\n      if (opts.divisor !== undefined) {\n        this.divisor = opts.divisor;\n      }\n    } else if (value) {\n      this.externalBuffer = null;\n\n      const size = this.size || opts.size || 0;\n      if (constant && value.length !== size) {\n        this.value = new Float32Array(size);\n        // initiate offset values\n        this._setAccessor(opts);\n        const index = this.elementOffset;\n        for (let i = 0; i < this.size; ++i) {\n          this.value[i] = value[index + i];\n        }\n      } else {\n        this.value = value;\n      }\n\n      // Create buffer if needed\n      if (!constant && this.gl) {\n        this.buffer = this.buffer || this._createBuffer(opts);\n        this.buffer.setData({data: value});\n        this.type = this.buffer.accessor.type;\n      }\n    }\n\n    this._setAccessor(opts);\n\n    if (constant && this.normalized) {\n      this.value = this._normalizeConstant(this.value);\n    }\n  }\n\n  getBuffer() {\n    if (this.constant) {\n      return null;\n    }\n    return this.externalBuffer || this.buffer;\n  }\n\n  getValue() {\n    if (this.constant) {\n      return this.value;\n    }\n    const buffer = this.externalBuffer || this.buffer;\n    if (buffer) {\n      return [buffer, this];\n    }\n    return null;\n  }\n\n  _createBuffer(opts) {\n    // Move accessor fields to accessor object\n    const props = Object.assign({}, opts, {\n      id: this.id,\n      target: this.target,\n      accessor: {\n        type: this.type\n      }\n    });\n    if (Number.isFinite(props.divisor)) {\n      props.accessor.divisor = props.divisor;\n    }\n    delete props.divisor;\n    if (Number.isFinite(props.size)) {\n      props.accessor.size = props.size;\n    }\n    delete props.size;\n\n    return new Buffer(this.gl, props);\n  }\n\n  // Sets all accessor props except type\n  // TODO - store on `this.accessor`\n  _setAccessor(opts) {\n    const {\n      // accessor props\n      size = this.size,\n      offset = this.offset || 0,\n      stride = this.stride || 0,\n      normalized = this.normalized || false,\n      integer = this.integer || false,\n      divisor = this.divisor || 0,\n      instanced,\n      isInstanced\n    } = opts;\n\n    this.size = size;\n    this.offset = offset;\n    this.elementOffset = offset / Accessor.getBytesPerElement(this);\n    this.stride = stride;\n    this.normalized = normalized;\n    this.integer = integer;\n\n    this.divisor = divisor;\n\n    if (isInstanced !== undefined) {\n      log.deprecated('Attribute.isInstanced')();\n      this.divisor = isInstanced ? 1 : 0;\n    }\n    if (instanced !== undefined) {\n      log.deprecated('Attribute.instanced')();\n      this.divisor = instanced ? 1 : 0;\n    }\n  }\n\n  // https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer\n  _normalizeConstant(value) {\n    switch (this.type) {\n      case GL.BYTE:\n        // normalize [-128, 127] to [-1, 1]\n        return new Float32Array(value).map(x => ((x + 128) / 255) * 2 - 1);\n\n      case GL.SHORT:\n        // normalize [-32768, 32767] to [-1, 1]\n        return new Float32Array(value).map(x => ((x + 32768) / 65535) * 2 - 1);\n\n      case GL.UNSIGNED_BYTE:\n        // normalize [0, 255] to [0, 1]\n        return new Float32Array(value).map(x => x / 255);\n\n      case GL.UNSIGNED_SHORT:\n        // normalize [0, 65535] to [0, 1]\n        return new Float32Array(value).map(x => x / 65535);\n\n      default:\n        // No normalization for gl.FLOAT and gl.HALF_FLOAT\n        return value;\n    }\n  }\n\n  _validateAttributeDefinition() {\n    // Can be undefined for buffers (auto deduced from shaders)\n    // or larger than 4 for uniform arrays\n    // assert(\n    //   this.size >= 1 && this.size <= 4,\n    //   `Attribute definition for ${this.id} invalid size`\n    // );\n  }\n}\n"],"file":"base-attribute.js"}