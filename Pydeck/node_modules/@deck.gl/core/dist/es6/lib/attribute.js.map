{"version":3,"sources":["../../../src/lib/attribute.js"],"names":["Buffer","assert","createIterable","fillArray","range","log","BaseAttribute","typedArrayManager","toDoublePrecisionArray","normalizeTransitionSettings","DEFAULT_STATE","isExternalBuffer","lastExternalBuffer","allocatedValue","needsUpdate","needsRedraw","updateRanges","FULL","addDoublePrecisionAttributes","attribute","shaderAttributeDefs","doubleShaderAttributeDefs","shaderAttributeName","def","offset","stride","size","Object","assign","Attribute","constructor","gl","opts","logicalType","type","doublePrecision","transition","noAlloc","update","accessor","transform","bufferLayout","defaultValue","Array","isArray","defaultType","shaderAttributes","hasShaderAttributes","fp64","id","shaderAttributeNames","keys","shaderAttribute","normalized","integer","divisor","buffer","getBuffer","userData","_standardAccessor","seal","_validateAttributeUpdaters","layout","delete","release","clearChangedFlags","getUpdateTriggers","concat","getAccessor","getShaderAttributes","isBuffer64Bit","value","Float64Array","shaderAttributeLowPartName","Float32Array","supportsTransition","Boolean","getTransitionSetting","layerSettings","userSettings","find","a","setNeedsUpdate","reason","dataRange","startRow","endRow","Infinity","add","clearNeedsUpdate","EMPTY","setNeedsRedraw","allocate","numInstances","state","Number","isFinite","allocCount","Math","max","ArrayType","glArrayFromType","oldValue","shouldCopy","constant","padding","elementOffset","copy","byteLength","reallocate","subData","data","updateBuffer","props","context","updated","call","attributeValue","startOffset","getVertexOffset","endOffset","length","startIndex","endIndex","subarray","BYTES_PER_ELEMENT","_checkAttributeArray","_updateShaderAttributes","setConstantValue","undefined","_normalizeValue","hasChanged","_areValuesEqual","setExternalBuffer","ArrayBuffer","isView","_checkExternalBuffer","originalValue","illegalArrayType","values","some","Error","name","warn","row","index","geometrySize","out","start","value1","value2","i","accessorFunc","iterable","objectInfo","object","objectValue","target","numVertices","source","count","hasUpdater","valid","glType","Uint16Array","Uint32Array","Uint8ClampedArray","Int8Array","Int16Array","Int32Array"],"mappings":";;;;;;AAEA,SAAQA,MAAR,QAAqB,eAArB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,SAAQC,cAAR,QAA6B,yBAA7B;AACA,SAAQC,SAAR,QAAwB,kBAAxB;AACA,OAAO,KAAKC,KAAZ,MAAuB,gBAAvB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,OAAOC,iBAAP,MAA8B,8BAA9B;AACA,SAAQC,sBAAR,QAAqC,qBAArC;AACA,SAAQC,2BAAR,QAA0C,8BAA1C;AAEA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,gBAAgB,EAAE,KADE;AAEpBC,EAAAA,kBAAkB,EAAE,IAFA;AAGpBC,EAAAA,cAAc,EAAE,IAHI;AAIpBC,EAAAA,WAAW,EAAE,IAJO;AAKpBC,EAAAA,WAAW,EAAE,KALO;AAMpBC,EAAAA,YAAY,EAAEZ,KAAK,CAACa;AANA,CAAtB;;AASA,SAASC,4BAAT,CAAsCC,SAAtC,EAAiDC,mBAAjD,EAAsE;AACpE,QAAMC,yBAAyB,GAAG,EAAlC;;AACA,OAAK,MAAMC,mBAAX,IAAkCF,mBAAlC,EAAuD;AACrD,UAAMG,GAAG,GAAGH,mBAAmB,CAACE,mBAAD,CAA/B;AACA,UAAME,MAAM,GAAG,YAAYD,GAAZ,GAAkBA,GAAG,CAACC,MAAtB,GAA+BL,SAAS,CAACK,MAAxD;AACA,UAAMC,MAAM,GAAG,YAAYF,GAAZ,GAAkBA,GAAG,CAACE,MAAtB,GAA+BN,SAAS,CAACO,IAAV,GAAiB,CAA/D;AAEAL,IAAAA,yBAAyB,WAAIC,mBAAJ,QAAzB,GAAwDK,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,GAAlB,EAAuB;AAC7EC,MAAAA,MAD6E;AAE7EC,MAAAA;AAF6E,KAAvB,CAAxD;AAIAJ,IAAAA,yBAAyB,WAAIC,mBAAJ,QAAzB,GAAwDK,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,GAAlB,EAAuB;AAC7EC,MAAAA,MAAM,EAAEA,MAAM,GAAG,CAD4D;AAE7EC,MAAAA,MAAM,EAAEA,MAAM,GAAG;AAF4D,KAAvB,CAAxD;AAIAJ,IAAAA,yBAAyB,WAAIC,mBAAJ,aAAzB,GAA6DK,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,GAAlB,EAAuB;AAClFC,MAAAA,MAAM,EAAEA,MAAM,GAAG,CAAT,GAAaC,MAD6D;AAElFA,MAAAA,MAAM,EAAEA,MAAM,GAAG;AAFiE,KAAvB,CAA7D;AAID;;AACD,SAAOJ,yBAAP;AACD;;AAED,eAAe,MAAMQ,SAAN,SAAwBvB,aAAxB,CAAsC;AACnDwB,EAAAA,WAAW,CAACC,EAAD,EAAKC,IAAI,GAAG,EAAZ,EAAgB;AACzB,UAAMC,WAAW,GAAGD,IAAI,CAACE,IAAzB;AACA,UAAMC,eAAe,GAAGF,WAAW,SAAnC;AAIA,UAAMF,EAAN,EAAUI,eAAe,qBAAOH,IAAP;AAAaE,MAAAA,IAAI;AAAjB,SAA+BF,IAAxD;AAEA,UAAM;AAEJI,MAAAA,UAAU,GAAG,KAFT;AAGJC,MAAAA,OAAO,GAAG,KAHN;AAIJC,MAAAA,MAAM,GAAG,IAJL;AAKJC,MAAAA,QAAQ,GAAG,IALP;AAMJC,MAAAA,SAAS,GAAG,IANR;AAOJC,MAAAA,YAAY,GAAG;AAPX,QAQFT,IARJ;AAUA,QAAI;AAACU,MAAAA,YAAY,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV;AAAhB,QAAgCV,IAApC;AACAU,IAAAA,YAAY,GAAGC,KAAK,CAACC,OAAN,CAAcF,YAAd,IAA8BA,YAA9B,GAA6C,CAACA,YAAD,CAA5D;AAKA,SAAKG,WAAL,GAAmBZ,WAAW,IAAI,KAAKC,IAApB,QAAnB;AACA,SAAKY,gBAAL,GAAwB,EAAxB;AACA,SAAKC,mBAAL,GAA2B,KAA3B;AACA,SAAKZ,eAAL,GAAuBA,eAAvB;;AAMA,QAAIA,eAAe,IAAIH,IAAI,CAACgB,IAAL,KAAc,KAArC,EAA4C;AAC1C,WAAKH,WAAL;AACD;;AAED,QAAIC,gBAAgB,GAAGd,IAAI,CAACc,gBAAL,IAA0BX,eAAe,IAAI;AAAC,OAAC,KAAKc,EAAN,GAAW;AAAZ,KAApE;;AAEA,QAAIH,gBAAJ,EAAsB;AACpB,YAAMI,oBAAoB,GAAGvB,MAAM,CAACwB,IAAP,CAAYL,gBAAZ,CAA7B;AACAA,MAAAA,gBAAgB,GAAGX,eAAe,GAC9BjB,4BAA4B,CAAC,IAAD,EAAO4B,gBAAP,CADE,GAE9BA,gBAFJ;;AAGA,WAAK,MAAMxB,mBAAX,IAAkCwB,gBAAlC,EAAoD;AAClD,cAAMM,eAAe,GAAGN,gBAAgB,CAACxB,mBAAD,CAAxC;AAGA,aAAKwB,gBAAL,CAAsBxB,mBAAtB,IAA6C,IAAIhB,aAAJ,CAC3C,KAAKyB,EADsC,EAE3CJ,MAAM,CAACC,MAAP,CACE;AACEF,UAAAA,IAAI,EAAE,KAAKA,IADb;AAEE2B,UAAAA,UAAU,EAAE,KAAKA,UAFnB;AAGEC,UAAAA,OAAO,EAAE,KAAKA,OAHhB;AAIE9B,UAAAA,MAAM,EAAE,KAAKA,MAJf;AAKEC,UAAAA,MAAM,EAAE,KAAKA,MALf;AAME8B,UAAAA,OAAO,EAAE,KAAKA;AANhB,SADF,EASEH,eATF,EAUE;AACEH,UAAAA,EAAE,EAAE3B,mBADN;AAEEkC,UAAAA,MAAM,EAAE,KAAKC,SAAL;AAFV,SAVF,CAF2C,CAA7C;AAmBA,aAAKV,mBAAL,GAA2BG,oBAA3B;AACD;AACF;;AAEDvB,IAAAA,MAAM,CAACC,MAAP,CAAc,KAAK8B,QAAnB,EAA6BhD,aAA7B,EAA4CsB,IAA5C,EAAkD;AAChDI,MAAAA,UADgD;AAEhDC,MAAAA,OAFgD;AAGhDC,MAAAA,MAAM,EAAEA,MAAM,IAAKC,QAAQ,IAAI,KAAKoB,iBAHY;AAIhDpB,MAAAA,QAJgD;AAKhDC,MAAAA,SALgD;AAMhDE,MAAAA,YANgD;AAOhDD,MAAAA;AAPgD,KAAlD;AAUAd,IAAAA,MAAM,CAACiC,IAAP,CAAY,KAAKF,QAAjB;;AAGA,SAAKG,0BAAL;AACD;;AAED,MAAIpB,YAAJ,GAAmB;AACjB,WAAO,KAAKiB,QAAL,CAAcjB,YAArB;AACD;;AAED,MAAIA,YAAJ,CAAiBqB,MAAjB,EAAyB;AACvB,SAAKJ,QAAL,CAAcjB,YAAd,GAA6BqB,MAA7B;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,UAAMA,MAAN;AACAxD,IAAAA,iBAAiB,CAACyD,OAAlB,CAA0B,KAAKN,QAAL,CAAc7C,cAAxC;AACD;;AAEDC,EAAAA,WAAW,GAAG;AACZ,WAAO,KAAK4C,QAAL,CAAc5C,WAArB;AACD;;AAEDC,EAAAA,WAAW,CAAC;AAACkD,IAAAA,iBAAiB,GAAG;AAArB,MAA8B,EAA/B,EAAmC;AAC5C,UAAMlD,WAAW,GAAG,KAAK2C,QAAL,CAAc3C,WAAlC;AACA,SAAK2C,QAAL,CAAc3C,WAAd,GAA4B,KAAK2C,QAAL,CAAc3C,WAAd,IAA6B,CAACkD,iBAA1D;AACA,WAAOlD,WAAP;AACD;;AAEDmD,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAC3B,MAAAA;AAAD,QAAa,KAAKmB,QAAxB;AAGA,WAAO,CAAC,KAAKT,EAAN,EAAUkB,MAAV,CAAkB,OAAO5B,QAAP,KAAoB,UAApB,IAAkCA,QAAnC,IAAgD,EAAjE,CAAP;AACD;;AAED6B,EAAAA,WAAW,GAAG;AACZ,WAAO,KAAKV,QAAL,CAAcnB,QAArB;AACD;;AAED8B,EAAAA,mBAAmB,GAAG;AACpB,UAAMvB,gBAAgB,GAAG,EAAzB;;AACA,QAAI,KAAKX,eAAT,EAA0B;AACxB,YAAMmC,aAAa,GAAG,KAAKC,KAAL,YAAsBC,YAA5C;;AACA,WAAK,MAAMlD,mBAAX,IAAkC,KAAKyB,mBAAvC,EAA4D;AAC1DD,QAAAA,gBAAgB,CAACxB,mBAAD,CAAhB,GAAwC,KAAKwB,gBAAL,CACtCwB,aAAa,aAAMhD,mBAAN,oBAAmCA,mBAAnC,OADyB,CAAxC;AAGA,cAAMmD,0BAA0B,aAAMnD,mBAAN,YAAhC;AACAwB,QAAAA,gBAAgB,CAAC2B,0BAAD,CAAhB,GAA+CH,aAAa,GACxD,KAAKxB,gBAAL,CAAsB2B,0BAAtB,CADwD,GAExD,IAAIC,YAAJ,CAAiB,KAAKhD,IAAtB,CAFJ;AAGD;AACF,KAXD,MAWO,IAAI,KAAKqB,mBAAT,EAA8B;AACnCpB,MAAAA,MAAM,CAACC,MAAP,CAAckB,gBAAd,EAAgC,KAAKA,gBAArC;AACD,KAFM,MAEA;AACLA,MAAAA,gBAAgB,CAAC,KAAKG,EAAN,CAAhB,GAA4B,IAA5B;AACD;;AAED,WAAOH,gBAAP;AACD;;AAED6B,EAAAA,kBAAkB,GAAG;AACnB,WAAOC,OAAO,CAAC,KAAKlB,QAAL,CAActB,UAAf,CAAd;AACD;;AAGDyC,EAAAA,oBAAoB,CAAC7C,IAAD,EAAO;AACzB,UAAM;AAACO,MAAAA;AAAD,QAAa,KAAKmB,QAAxB;AAIA,UAAMoB,aAAa,GAAG,KAAKpB,QAAL,CAActB,UAApC;;AACA,QAAI,CAAC,KAAKuC,kBAAL,EAAL,EAAgC;AAC9B,aAAO,IAAP;AACD;;AAED,UAAMI,YAAY,GAAGpC,KAAK,CAACC,OAAN,CAAcL,QAAd,IACjBP,IAAI,CAACO,QAAQ,CAACyC,IAAT,CAAcC,CAAC,IAAIjD,IAAI,CAACiD,CAAD,CAAvB,CAAD,CADa,GAEjBjD,IAAI,CAACO,QAAD,CAFR;AAKA,WAAO9B,2BAA2B,CAACsE,YAAD,EAAeD,aAAf,CAAlC;AACD;;AAEDI,EAAAA,cAAc,CAACC,MAAM,GAAG,KAAKlC,EAAf,EAAmBmC,SAAnB,EAA8B;AAC1C,SAAK1B,QAAL,CAAc5C,WAAd,GAA4B,KAAK4C,QAAL,CAAc5C,WAAd,IAA6BqE,MAAzD;;AACA,QAAIC,SAAJ,EAAe;AACb,YAAM;AAACC,QAAAA,QAAQ,GAAG,CAAZ;AAAeC,QAAAA,MAAM,GAAGC;AAAxB,UAAoCH,SAA1C;AACA,WAAK1B,QAAL,CAAc1C,YAAd,GAA6BZ,KAAK,CAACoF,GAAN,CAAU,KAAK9B,QAAL,CAAc1C,YAAxB,EAAsC,CAACqE,QAAD,EAAWC,MAAX,CAAtC,CAA7B;AACD,KAHD,MAGO;AACL,WAAK5B,QAAL,CAAc1C,YAAd,GAA6BZ,KAAK,CAACa,IAAnC;AACD;AACF;;AAEDwE,EAAAA,gBAAgB,GAAG;AACjB,SAAK/B,QAAL,CAAc5C,WAAd,GAA4B,KAA5B;AACA,SAAK4C,QAAL,CAAc1C,YAAd,GAA6BZ,KAAK,CAACsF,KAAnC;AACD;;AAEDC,EAAAA,cAAc,CAACR,MAAM,GAAG,KAAKlC,EAAf,EAAmB;AAC/B,SAAKS,QAAL,CAAc3C,WAAd,GAA4B,KAAK2C,QAAL,CAAc3C,WAAd,IAA6BoE,MAAzD;AACD;;AAEDS,EAAAA,QAAQ,CAACC,YAAD,EAAe;AACrB,UAAMC,KAAK,GAAG,KAAKpC,QAAnB;;AAEA,QAAIoC,KAAK,CAACnF,gBAAN,IAA0BmF,KAAK,CAACzD,OAApC,EAA6C;AAE3C,aAAO,KAAP;AACD;;AAED,QAAIyD,KAAK,CAACxD,MAAV,EAAkB;AAChBrC,MAAAA,MAAM,CAAC8F,MAAM,CAACC,QAAP,CAAgBH,YAAhB,CAAD,CAAN;AAEA,YAAMI,UAAU,GAAGC,IAAI,CAACC,GAAL,CAASN,YAAT,EAAuB,CAAvB,CAAnB;AACA,YAAMO,SAAS,GAAGC,eAAe,CAAC,KAAKxD,WAAN,CAAjC;AACA,YAAMyD,QAAQ,GAAGR,KAAK,CAACjF,cAAvB;AACA,YAAM0F,UAAU,GAAGT,KAAK,CAAC9E,YAAN,KAAuBZ,KAAK,CAACa,IAAhD;AAEA,WAAKuF,QAAL,GAAgB,KAAhB;AACA,WAAKjC,KAAL,GAAahE,iBAAiB,CAACqF,QAAlB,CAA2BU,QAA3B,EAAqCL,UAArC,EAAiD;AAC5DvE,QAAAA,IAAI,EAAE,KAAKA,IADiD;AAE5DQ,QAAAA,IAAI,EAAEkE,SAFsD;AAG5DK,QAAAA,OAAO,EAAE,KAAKC,aAH8C;AAI5DC,QAAAA,IAAI,EAAEJ;AAJsD,OAAjD,CAAb;;AAOA,UAAI,KAAK/C,MAAL,IAAe,KAAKA,MAAL,CAAYoD,UAAZ,GAAyB,KAAKrC,KAAL,CAAWqC,UAAvD,EAAmE;AACjE,aAAKpD,MAAL,CAAYqD,UAAZ,CAAuB,KAAKtC,KAAL,CAAWqC,UAAlC;;AAEA,YAAIL,UAAU,IAAID,QAAlB,EAA4B;AAI1B,eAAK9C,MAAL,CAAYsD,OAAZ,CAAoB;AAClBC,YAAAA,IAAI,EACFT,QAAQ,YAAY9B,YAApB,GACIhE,sBAAsB,CAAC8F,QAAD,EAAW;AAAC5E,cAAAA,IAAI,EAAE,KAAKA;AAAZ,aAAX,CAD1B,GAEI4E;AAJY,WAApB;AAMD;AACF;;AAEDR,MAAAA,KAAK,CAACjF,cAAN,GAAuB,KAAK0D,KAA5B;AACA,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD;;AAEDyC,EAAAA,YAAY,CAAC;AAACnB,IAAAA,YAAD;AAAepD,IAAAA,YAAf;AAA6BsE,IAAAA,IAA7B;AAAmCE,IAAAA,KAAnC;AAA0CC,IAAAA;AAA1C,GAAD,EAAqD;AAC/D,QAAI,CAAC,KAAKpG,WAAL,EAAL,EAAyB;AACvB,aAAO,KAAP;AACD;;AAED,UAAMgF,KAAK,GAAG,KAAKpC,QAAnB;AAEA,UAAM;AAACpB,MAAAA,MAAD;AAAStB,MAAAA,YAAT;AAAuBqB,MAAAA;AAAvB,QAAkCyD,KAAxC;AAEA,QAAIqB,OAAO,GAAG,IAAd;;AACA,QAAI7E,MAAJ,EAAY;AAEV,WAAK,MAAM,CAAC+C,QAAD,EAAWC,MAAX,CAAX,IAAiCtE,YAAjC,EAA+C;AAC7CsB,QAAAA,MAAM,CAAC8E,IAAP,CAAYF,OAAZ,EAAqB,IAArB,EAA2B;AAACH,UAAAA,IAAD;AAAO1B,UAAAA,QAAP;AAAiBC,UAAAA,MAAjB;AAAyB2B,UAAAA,KAAzB;AAAgCpB,UAAAA,YAAhC;AAA8CpD,UAAAA;AAA9C,SAA3B;AACD;;AACD,YAAMN,eAAe,GAAG,KAAKA,eAAL,IAAwB,KAAKoC,KAAL,YAAsBC,YAAtE;;AACA,UAAI,KAAKgC,QAAL,IAAiB,CAAC,KAAKhD,MAAvB,IAAiC,KAAKA,MAAL,CAAYoD,UAAZ,GAAyB,KAAKrC,KAAL,CAAWqC,UAAzE,EAAqF;AACnF,cAAMS,cAAc,GAAG,KAAK9C,KAA5B;AAEA,aAAKjC,MAAL,CAAY;AACViC,UAAAA,KAAK,EAAEpC,eAAe,GAAG3B,sBAAsB,CAAC6G,cAAD,EAAiB,IAAjB,CAAzB,GAAkDA,cAD9D;AAEVb,UAAAA,QAAQ,EAAE,KAAKA;AAFL,SAAZ;AAKA,aAAKjC,KAAL,GAAa8C,cAAb;AACD,OATD,MASO;AACL,aAAK,MAAM,CAAChC,QAAD,EAAWC,MAAX,CAAX,IAAiCtE,YAAjC,EAA+C;AAC7C,gBAAMsG,WAAW,GAAGvB,MAAM,CAACC,QAAP,CAAgBX,QAAhB,IAA4B,KAAKkC,eAAL,CAAqBlC,QAArB,CAA5B,GAA6D,CAAjF;AACA,gBAAMmC,SAAS,GAAGzB,MAAM,CAACC,QAAP,CAAgBV,MAAhB,IACd,KAAKiC,eAAL,CAAqBjC,MAArB,CADc,GAEdjD,OAAO,IAAI,CAAC0D,MAAM,CAACC,QAAP,CAAgBH,YAAhB,CAAZ,GACE,KAAKtB,KAAL,CAAWkD,MADb,GAEE5B,YAAY,GAAG,KAAKnE,IAJ1B;AAOA,eAAK8B,MAAL,CAAYsD,OAAZ,CAAoB;AAClBC,YAAAA,IAAI,EAAE5E,eAAe,GACjB3B,sBAAsB,CAAC,KAAK+D,KAAN,EAAa;AACjC7C,cAAAA,IAAI,EAAE,KAAKA,IADsB;AAEjCgG,cAAAA,UAAU,EAAEJ,WAFqB;AAGjCK,cAAAA,QAAQ,EAAEH;AAHuB,aAAb,CADL,GAMjB,KAAKjD,KAAL,CAAWqD,QAAX,CAAoBN,WAApB,EAAiCE,SAAjC,CAPc;AAQlBhG,YAAAA,MAAM,EAAE8F,WAAW,GAAG,KAAK/C,KAAL,CAAWsD;AARf,WAApB;AAUD;AACF;;AACD,WAAKC,oBAAL;AACD,KAtCD,MAsCO;AACLX,MAAAA,OAAO,GAAG,KAAV;AACD;;AAED,SAAKY,uBAAL;;AAEA,SAAKtC,gBAAL;AACAK,IAAAA,KAAK,CAAC/E,WAAN,GAAoB,IAApB;AAEA,WAAOoG,OAAP;AACD;;AAED7E,EAAAA,MAAM,CAAC2E,KAAD,EAAQ;AACZ,UAAM3E,MAAN,CAAa2E,KAAb;;AACA,SAAKc,uBAAL;AACD;;AAIDC,EAAAA,gBAAgB,CAACzD,KAAD,EAAQ;AACtB,UAAMuB,KAAK,GAAG,KAAKpC,QAAnB;;AAEA,QAAIa,KAAK,KAAK0D,SAAV,IAAuB,OAAO1D,KAAP,KAAiB,UAA5C,EAAwD;AAGtDuB,MAAAA,KAAK,CAACnF,gBAAN,GAAyB,KAAzB;AACA,aAAO,KAAP;AACD;;AAED4D,IAAAA,KAAK,GAAG,KAAK2D,eAAL,CAAqB3D,KAArB,CAAR;AACA,UAAM4D,UAAU,GAAG,CAAC,KAAK3B,QAAN,IAAkB,CAAC,KAAK4B,eAAL,CAAqB7D,KAArB,EAA4B,KAAKA,KAAjC,CAAtC;;AAEA,QAAI4D,UAAJ,EAAgB;AACd,WAAK7F,MAAL,CAAY;AAACkE,QAAAA,QAAQ,EAAE,IAAX;AAAiBjC,QAAAA;AAAjB,OAAZ;AACD;;AACDuB,IAAAA,KAAK,CAAC/E,WAAN,GAAoB+E,KAAK,CAAChF,WAAN,IAAqBqH,UAAzC;AACA,SAAK1C,gBAAL;AACAK,IAAAA,KAAK,CAACnF,gBAAN,GAAyB,IAAzB;AACA,WAAO,IAAP;AACD;;AAKD0H,EAAAA,iBAAiB,CAAC7E,MAAD,EAAS;AACxB,UAAMsC,KAAK,GAAG,KAAKpC,QAAnB;;AAEA,QAAI,CAACF,MAAL,EAAa;AACXsC,MAAAA,KAAK,CAACnF,gBAAN,GAAyB,KAAzB;AACAmF,MAAAA,KAAK,CAAClF,kBAAN,GAA2B,IAA3B;AACA,aAAO,KAAP;AACD;;AAED,SAAK6E,gBAAL;;AAEA,QAAIK,KAAK,CAAClF,kBAAN,KAA6B4C,MAAjC,EAAyC;AACvC,aAAO,IAAP;AACD;;AACDsC,IAAAA,KAAK,CAACnF,gBAAN,GAAyB,IAAzB;AACAmF,IAAAA,KAAK,CAAClF,kBAAN,GAA2B4C,MAA3B;AAEA,QAAIxB,IAAJ;;AACA,QAAIsG,WAAW,CAACC,MAAZ,CAAmB/E,MAAnB,CAAJ,EAAgC;AAC9BxB,MAAAA,IAAI,GAAG;AAACwE,QAAAA,QAAQ,EAAE,KAAX;AAAkBjC,QAAAA,KAAK,EAAEf;AAAzB,OAAP;AACD,KAFD,MAEO,IAAIA,MAAM,YAAYxD,MAAtB,EAA8B;AACnCgC,MAAAA,IAAI,GAAG;AAACwE,QAAAA,QAAQ,EAAE,KAAX;AAAkBhD,QAAAA;AAAlB,OAAP;AACD,KAFM,MAEA;AACLxB,MAAAA,IAAI,GAAGL,MAAM,CAACC,MAAP,CAAc;AAAC4E,QAAAA,QAAQ,EAAE;AAAX,OAAd,EAAiChD,MAAjC,CAAP;AACD;;AAED,SAAKgF,oBAAL,CAA0BxG,IAA1B;;AAEA,QAAI,KAAKG,eAAL,IAAwBH,IAAI,CAACuC,KAAL,YAAsBC,YAAlD,EAAgE;AAC9DxC,MAAAA,IAAI,CAACyG,aAAL,GAAqBzG,IAAI,CAACuC,KAA1B;AACAvC,MAAAA,IAAI,CAACuC,KAAL,GAAa/D,sBAAsB,CAACwB,IAAI,CAACuC,KAAN,EAAa,IAAb,CAAnC;AACD;;AAED,SAAKjC,MAAL,CAAYN,IAAZ;AAEA8D,IAAAA,KAAK,CAAC/E,WAAN,GAAoB,IAApB;;AACA,QAAIiB,IAAI,CAACyG,aAAT,EAAwB;AACtB,WAAKlE,KAAL,GAAavC,IAAI,CAACyG,aAAlB;AACD;;AAED,WAAO,IAAP;AACD;;AAGDD,EAAAA,oBAAoB,CAACxG,IAAD,EAAO;AACzB,UAAM;AAACuC,MAAAA;AAAD,QAAUvC,IAAhB;;AACA,QAAI,CAACA,IAAI,CAACwE,QAAN,IAAkBjC,KAAtB,EAA6B;AAC3B,YAAM6B,SAAS,GAAGC,eAAe,CAAC,KAAKxD,WAAN,CAAjC;AAEA,UAAI6F,gBAAgB,GAAG,KAAvB;;AACA,UAAI,KAAKvG,eAAT,EAA0B;AAExBuG,QAAAA,gBAAgB,GAAGnE,KAAK,CAACsD,iBAAN,GAA0B,CAA7C;AACD,OAHD,MAGO,IAAI,KAAK9E,mBAAT,EAA8B;AACnC2F,QAAAA,gBAAgB,GACdnE,KAAK,CAACsD,iBAAN,KAA4BzB,SAAS,CAACyB,iBAAtC,IAGAlG,MAAM,CAACgH,MAAP,CAAc,KAAK7F,gBAAnB,EAAqC8F,IAArC,CACEzH,SAAS,IAAIA,SAAS,CAACK,MAAV,IAAoBL,SAAS,CAACM,MAD7C,CAJF;AAOD;;AACD,UAAIiH,gBAAJ,EAAsB;AACpB,cAAM,IAAIG,KAAJ,qBAAuB,KAAK5F,EAA5B,+BAAmDsB,KAAK,CAACzC,WAAN,CAAkBgH,IAArE,EAAN;AACD;;AACD,UAAI,EAAEvE,KAAK,YAAY6B,SAAnB,KAAiC,KAAK/C,UAAtC,IAAoD,EAAE,gBAAgBrB,IAAlB,CAAxD,EAAiF;AAC/E3B,QAAAA,GAAG,CAAC0I,IAAJ,qBAAsB,KAAK9F,EAA3B;AACD;AACF;AACF;;AAEDsE,EAAAA,eAAe,CAACyB,GAAD,EAAMvG,YAAY,GAAG,KAAKA,YAA1B,EAAwC;AACrD,QAAIjB,MAAM,GAAG,KAAKkF,aAAlB;;AACA,QAAIjE,YAAJ,EAAkB;AAChB,UAAIwG,KAAK,GAAG,CAAZ;;AACA,WAAK,MAAMC,YAAX,IAA2BzG,YAA3B,EAAyC;AACvC,YAAIwG,KAAK,IAAID,GAAb,EAAkB;AAChB;AACD;;AACDxH,QAAAA,MAAM,IAAI0H,YAAY,GAAG,KAAKxH,IAA9B;AACAuH,QAAAA,KAAK;AACN;;AACD,aAAOzH,MAAP;AACD;;AACD,WAAOA,MAAM,GAAGwH,GAAG,GAAG,KAAKtH,IAA3B;AACD;;AAGDwG,EAAAA,eAAe,CAAC3D,KAAD,EAAQ4E,GAAG,GAAG,EAAd,EAAkBC,KAAK,GAAG,CAA1B,EAA6B;AAC1C,UAAM;AAAC1G,MAAAA;AAAD,QAAiB,KAAKgB,QAA5B;;AAEA,QAAI,CAACf,KAAK,CAACC,OAAN,CAAc2B,KAAd,CAAD,IAAyB,CAAC+D,WAAW,CAACC,MAAZ,CAAmBhE,KAAnB,CAA9B,EAAyD;AACvD4E,MAAAA,GAAG,CAACC,KAAD,CAAH,GAAarD,MAAM,CAACC,QAAP,CAAgBzB,KAAhB,IAAyBA,KAAzB,GAAiC7B,YAAY,CAAC,CAAD,CAA1D;AACA,aAAOyG,GAAP;AACD;;AAGD,YAAQ,KAAKzH,IAAb;AACE,WAAK,CAAL;AACEyH,QAAAA,GAAG,CAACC,KAAK,GAAG,CAAT,CAAH,GAAiBrD,MAAM,CAACC,QAAP,CAAgBzB,KAAK,CAAC,CAAD,CAArB,IAA4BA,KAAK,CAAC,CAAD,CAAjC,GAAuC7B,YAAY,CAAC,CAAD,CAApE;;AACF,WAAK,CAAL;AACEyG,QAAAA,GAAG,CAACC,KAAK,GAAG,CAAT,CAAH,GAAiBrD,MAAM,CAACC,QAAP,CAAgBzB,KAAK,CAAC,CAAD,CAArB,IAA4BA,KAAK,CAAC,CAAD,CAAjC,GAAuC7B,YAAY,CAAC,CAAD,CAApE;;AACF,WAAK,CAAL;AACEyG,QAAAA,GAAG,CAACC,KAAK,GAAG,CAAT,CAAH,GAAiBrD,MAAM,CAACC,QAAP,CAAgBzB,KAAK,CAAC,CAAD,CAArB,IAA4BA,KAAK,CAAC,CAAD,CAAjC,GAAuC7B,YAAY,CAAC,CAAD,CAApE;;AACF,WAAK,CAAL;AACEyG,QAAAA,GAAG,CAACC,KAAK,GAAG,CAAT,CAAH,GAAiBrD,MAAM,CAACC,QAAP,CAAgBzB,KAAK,CAAC,CAAD,CAArB,IAA4BA,KAAK,CAAC,CAAD,CAAjC,GAAuC7B,YAAY,CAAC,CAAD,CAApE;AARJ;;AAWA,WAAOyG,GAAP;AACD;;AAEDf,EAAAA,eAAe,CAACiB,MAAD,EAASC,MAAT,EAAiB5H,IAAI,GAAG,KAAKA,IAA7B,EAAmC;AAChD,SAAK,IAAI6H,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG7H,IAApB,EAA0B6H,CAAC,EAA3B,EAA+B;AAC7B,UAAIF,MAAM,CAACE,CAAD,CAAN,KAAcD,MAAM,CAACC,CAAD,CAAxB,EAA6B;AAC3B,eAAO,KAAP;AACD;AACF;;AACD,WAAO,IAAP;AACD;;AAED5F,EAAAA,iBAAiB,CAACxC,SAAD,EAAY;AAAC4F,IAAAA,IAAD;AAAO1B,IAAAA,QAAP;AAAiBC,IAAAA,MAAjB;AAAyB2B,IAAAA,KAAzB;AAAgCpB,IAAAA,YAAhC;AAA8CpD,IAAAA;AAA9C,GAAZ,EAAyE;AACxF,UAAMqD,KAAK,GAAG3E,SAAS,CAACuC,QAAxB;AAEA,UAAM;AAACnB,MAAAA,QAAD;AAAWC,MAAAA;AAAX,QAAwBsD,KAA9B;AACA,UAAM;AAACvB,MAAAA,KAAD;AAAQ7C,MAAAA;AAAR,QAAgBP,SAAtB;AACA,UAAMqI,YAAY,GAAG,OAAOjH,QAAP,KAAoB,UAApB,GAAiCA,QAAjC,GAA4C0E,KAAK,CAAC1E,QAAD,CAAtE;AAEAtC,IAAAA,MAAM,CAAC,OAAOuJ,YAAP,KAAwB,UAAzB,uBAAkDjH,QAAlD,0BAAN;AAEA,QAAIgH,CAAC,GAAGpI,SAAS,CAACoG,eAAV,CAA0BlC,QAA1B,EAAoC5C,YAApC,CAAR;AACA,UAAM;AAACgH,MAAAA,QAAD;AAAWC,MAAAA;AAAX,QAAyBxJ,cAAc,CAAC6G,IAAD,EAAO1B,QAAP,EAAiBC,MAAjB,CAA7C;;AACA,SAAK,MAAMqE,MAAX,IAAqBF,QAArB,EAA+B;AAC7BC,MAAAA,UAAU,CAACT,KAAX;AAEA,UAAIW,WAAW,GAAGJ,YAAY,CAACG,MAAD,EAASD,UAAT,CAA9B;;AACA,UAAIlH,SAAJ,EAAe;AAGboH,QAAAA,WAAW,GAAGpH,SAAS,CAAC4E,IAAV,CAAe,IAAf,EAAqBwC,WAArB,CAAd;AACD;;AAED,UAAInH,YAAJ,EAAkB;AAChBtB,QAAAA,SAAS,CAAC+G,eAAV,CAA0B0B,WAA1B,EAAuCF,UAAU,CAACG,MAAlD;;AACA,cAAMC,WAAW,GAAGrH,YAAY,CAACiH,UAAU,CAACT,KAAZ,CAAhC;AACA9I,QAAAA,SAAS,CAAC;AACR0J,UAAAA,MAAM,EAAE1I,SAAS,CAACoD,KADV;AAERwF,UAAAA,MAAM,EAAEL,UAAU,CAACG,MAFX;AAGRT,UAAAA,KAAK,EAAEG,CAHC;AAIRS,UAAAA,KAAK,EAAEF;AAJC,SAAD,CAAT;AAMAP,QAAAA,CAAC,IAAIO,WAAW,GAAGpI,IAAnB;AACD,OAVD,MAUO;AACLP,QAAAA,SAAS,CAAC+G,eAAV,CAA0B0B,WAA1B,EAAuCrF,KAAvC,EAA8CgF,CAA9C;;AACAA,QAAAA,CAAC,IAAI7H,IAAL;AACD;AACF;;AACDP,IAAAA,SAAS,CAACqF,QAAV,GAAqB,KAArB;AACArF,IAAAA,SAAS,CAACsB,YAAV,GAAyBA,YAAzB;AACD;;AAGDoB,EAAAA,0BAA0B,GAAG;AAC3B,UAAMiC,KAAK,GAAG,KAAKpC,QAAnB;AAGA,UAAMuG,UAAU,GAAGnE,KAAK,CAACzD,OAAN,IAAiB,OAAOyD,KAAK,CAACxD,MAAb,KAAwB,UAA5D;;AACA,QAAI,CAAC2H,UAAL,EAAiB;AACf,YAAM,IAAIpB,KAAJ,qBAAuB,KAAK5F,EAA5B,iCAAN;AACD;AACF;;AAED6E,EAAAA,oBAAoB,GAAG;AACrB,UAAM;AAACvD,MAAAA;AAAD,QAAU,IAAhB;;AACA,QAAIA,KAAK,IAAIA,KAAK,CAACkD,MAAN,IAAgB,CAA7B,EAAgC;AAC9B,YAAMyC,KAAK,GACTnE,MAAM,CAACC,QAAP,CAAgBzB,KAAK,CAAC,CAAD,CAArB,KACAwB,MAAM,CAACC,QAAP,CAAgBzB,KAAK,CAAC,CAAD,CAArB,CADA,IAEAwB,MAAM,CAACC,QAAP,CAAgBzB,KAAK,CAAC,CAAD,CAArB,CAFA,IAGAwB,MAAM,CAACC,QAAP,CAAgBzB,KAAK,CAAC,CAAD,CAArB,CAJF;;AAKA,UAAI,CAAC2F,KAAL,EAAY;AACV,cAAM,IAAIrB,KAAJ,2CAA6C,KAAK5F,EAAlD,EAAN;AACD;AACF;AACF;;AAED8E,EAAAA,uBAAuB,GAAG;AACxB,UAAMjF,gBAAgB,GAAG,KAAKA,gBAA9B;;AACA,SAAK,MAAMxB,mBAAX,IAAkCwB,gBAAlC,EAAoD;AAClD,YAAMM,eAAe,GAAGN,gBAAgB,CAACxB,mBAAD,CAAxC;AACA8B,MAAAA,eAAe,CAACd,MAAhB,CAAuB;AACrBkB,QAAAA,MAAM,EAAE,KAAKC,SAAL,EADa;AAErBc,QAAAA,KAAK,EAAE,KAAKA,KAFS;AAGrBiC,QAAAA,QAAQ,EAAE,KAAKA;AAHM,OAAvB;AAKD;AACF;;AAxgBkD;;AA4gBrD,SAASH,eAAT,CAAyB8D,MAAzB,EAAiC;AAE/B,UAAQA,MAAR;AACE;AACE,aAAOzF,YAAP;;AACF;AACE,aAAOF,YAAP;;AACF;AACA;AACA;AACA;AACE,aAAO4F,WAAP;;AACF;AACE,aAAOC,WAAP;;AACF;AACE,aAAOC,iBAAP;;AACF;AACE,aAAOC,SAAP;;AACF;AACE,aAAOC,UAAP;;AACF;AACE,aAAOC,UAAP;;AACF;AACE,YAAM,IAAI5B,KAAJ,CAAU,kCAAV,CAAN;AArBJ;AAuBD","sourcesContent":["/* eslint-disable complexity */\nimport GL from '@luma.gl/constants';\nimport {Buffer} from '@luma.gl/core';\nimport assert from '../utils/assert';\nimport {createIterable} from '../utils/iterable-utils';\nimport {fillArray} from '../utils/flatten';\nimport * as range from '../utils/range';\nimport log from '../utils/log';\nimport BaseAttribute from './base-attribute';\nimport typedArrayManager from '../utils/typed-array-manager';\nimport {toDoublePrecisionArray} from '../utils/math-utils';\nimport {normalizeTransitionSettings} from './attribute-transition-utils';\n\nconst DEFAULT_STATE = {\n  isExternalBuffer: false,\n  lastExternalBuffer: null,\n  allocatedValue: null,\n  needsUpdate: true,\n  needsRedraw: false,\n  updateRanges: range.FULL\n};\n\nfunction addDoublePrecisionAttributes(attribute, shaderAttributeDefs) {\n  const doubleShaderAttributeDefs = {};\n  for (const shaderAttributeName in shaderAttributeDefs) {\n    const def = shaderAttributeDefs[shaderAttributeName];\n    const offset = 'offset' in def ? def.offset : attribute.offset;\n    const stride = 'stride' in def ? def.stride : attribute.size * 4;\n\n    doubleShaderAttributeDefs[`${shaderAttributeName}32`] = Object.assign({}, def, {\n      offset,\n      stride\n    });\n    doubleShaderAttributeDefs[`${shaderAttributeName}64`] = Object.assign({}, def, {\n      offset: offset * 2,\n      stride: stride * 2\n    });\n    doubleShaderAttributeDefs[`${shaderAttributeName}64xyLow`] = Object.assign({}, def, {\n      offset: offset * 2 + stride,\n      stride: stride * 2\n    });\n  }\n  return doubleShaderAttributeDefs;\n}\n\nexport default class Attribute extends BaseAttribute {\n  constructor(gl, opts = {}) {\n    const logicalType = opts.type;\n    const doublePrecision = logicalType === GL.DOUBLE;\n\n    // DOUBLE is not a valid WebGL buffer type\n    // tell BaseAttribute to set the accessor type to FLOAT\n    super(gl, doublePrecision ? {...opts, type: GL.FLOAT} : opts);\n\n    const {\n      // deck.gl fields\n      transition = false,\n      noAlloc = false,\n      update = null,\n      accessor = null,\n      transform = null,\n      bufferLayout = null\n    } = opts;\n\n    let {defaultValue = [0, 0, 0, 0]} = opts;\n    defaultValue = Array.isArray(defaultValue) ? defaultValue : [defaultValue];\n\n    // This is the attribute type defined by the layer\n    // If an external buffer is provided, this.type may be overwritten\n    // But we always want to use defaultType for allocation\n    this.defaultType = logicalType || this.type || GL.FLOAT;\n    this.shaderAttributes = {};\n    this.hasShaderAttributes = false;\n    this.doublePrecision = doublePrecision;\n\n    // `fp64: false` tells a double-precision attribute to allocate Float32Arrays\n    // by default when using auto-packing. This is more efficient in use cases where\n    // high precision is unnecessary, but the `64xyLow` attribute is still required\n    // by the shader.\n    if (doublePrecision && opts.fp64 === false) {\n      this.defaultType = GL.FLOAT;\n    }\n\n    let shaderAttributes = opts.shaderAttributes || (doublePrecision && {[this.id]: {}});\n\n    if (shaderAttributes) {\n      const shaderAttributeNames = Object.keys(shaderAttributes);\n      shaderAttributes = doublePrecision\n        ? addDoublePrecisionAttributes(this, shaderAttributes)\n        : shaderAttributes;\n      for (const shaderAttributeName in shaderAttributes) {\n        const shaderAttribute = shaderAttributes[shaderAttributeName];\n\n        // Initialize the attribute descriptor, with WebGL and metadata fields\n        this.shaderAttributes[shaderAttributeName] = new BaseAttribute(\n          this.gl,\n          Object.assign(\n            {\n              size: this.size,\n              normalized: this.normalized,\n              integer: this.integer,\n              offset: this.offset,\n              stride: this.stride,\n              divisor: this.divisor\n            },\n            shaderAttribute,\n            {\n              id: shaderAttributeName,\n              buffer: this.getBuffer()\n            }\n          )\n        );\n\n        this.hasShaderAttributes = shaderAttributeNames;\n      }\n    }\n\n    Object.assign(this.userData, DEFAULT_STATE, opts, {\n      transition,\n      noAlloc,\n      update: update || (accessor && this._standardAccessor),\n      accessor,\n      transform,\n      defaultValue,\n      bufferLayout\n    });\n\n    Object.seal(this.userData);\n\n    // Check all fields and generate helpful error messages\n    this._validateAttributeUpdaters();\n  }\n\n  get bufferLayout() {\n    return this.userData.bufferLayout;\n  }\n\n  set bufferLayout(layout) {\n    this.userData.bufferLayout = layout;\n  }\n\n  delete() {\n    super.delete();\n    typedArrayManager.release(this.userData.allocatedValue);\n  }\n\n  needsUpdate() {\n    return this.userData.needsUpdate;\n  }\n\n  needsRedraw({clearChangedFlags = false} = {}) {\n    const needsRedraw = this.userData.needsRedraw;\n    this.userData.needsRedraw = this.userData.needsRedraw && !clearChangedFlags;\n    return needsRedraw;\n  }\n\n  getUpdateTriggers() {\n    const {accessor} = this.userData;\n\n    // Backards compatibility: allow attribute name to be used as update trigger key\n    return [this.id].concat((typeof accessor !== 'function' && accessor) || []);\n  }\n\n  getAccessor() {\n    return this.userData.accessor;\n  }\n\n  getShaderAttributes() {\n    const shaderAttributes = {};\n    if (this.doublePrecision) {\n      const isBuffer64Bit = this.value instanceof Float64Array;\n      for (const shaderAttributeName of this.hasShaderAttributes) {\n        shaderAttributes[shaderAttributeName] = this.shaderAttributes[\n          isBuffer64Bit ? `${shaderAttributeName}64` : `${shaderAttributeName}32`\n        ];\n        const shaderAttributeLowPartName = `${shaderAttributeName}64xyLow`;\n        shaderAttributes[shaderAttributeLowPartName] = isBuffer64Bit\n          ? this.shaderAttributes[shaderAttributeLowPartName]\n          : new Float32Array(this.size); // use constant for low part if buffer is 32-bit\n      }\n    } else if (this.hasShaderAttributes) {\n      Object.assign(shaderAttributes, this.shaderAttributes);\n    } else {\n      shaderAttributes[this.id] = this;\n    }\n\n    return shaderAttributes;\n  }\n\n  supportsTransition() {\n    return Boolean(this.userData.transition);\n  }\n\n  // Resolve transition settings object if transition is enabled, otherwise `null`\n  getTransitionSetting(opts) {\n    const {accessor} = this.userData;\n    // `userData` is a bit of a misnomer here, these are the transition settings defined by\n    // the layer itself, not the layer's user\n    // TODO: have the layer resolve these transition settings itself?\n    const layerSettings = this.userData.transition;\n    if (!this.supportsTransition()) {\n      return null;\n    }\n    // these are the transition settings passed in by the user\n    const userSettings = Array.isArray(accessor)\n      ? opts[accessor.find(a => opts[a])]\n      : opts[accessor];\n\n    // Shorthand: use duration instead of parameter object\n    return normalizeTransitionSettings(userSettings, layerSettings);\n  }\n\n  setNeedsUpdate(reason = this.id, dataRange) {\n    this.userData.needsUpdate = this.userData.needsUpdate || reason;\n    if (dataRange) {\n      const {startRow = 0, endRow = Infinity} = dataRange;\n      this.userData.updateRanges = range.add(this.userData.updateRanges, [startRow, endRow]);\n    } else {\n      this.userData.updateRanges = range.FULL;\n    }\n  }\n\n  clearNeedsUpdate() {\n    this.userData.needsUpdate = false;\n    this.userData.updateRanges = range.EMPTY;\n  }\n\n  setNeedsRedraw(reason = this.id) {\n    this.userData.needsRedraw = this.userData.needsRedraw || reason;\n  }\n\n  allocate(numInstances) {\n    const state = this.userData;\n\n    if (state.isExternalBuffer || state.noAlloc) {\n      // Data is provided through a Buffer object.\n      return false;\n    }\n\n    if (state.update) {\n      assert(Number.isFinite(numInstances));\n      // Allocate at least one element to ensure a valid buffer\n      const allocCount = Math.max(numInstances, 1);\n      const ArrayType = glArrayFromType(this.defaultType);\n      const oldValue = state.allocatedValue;\n      const shouldCopy = state.updateRanges !== range.FULL;\n\n      this.constant = false;\n      this.value = typedArrayManager.allocate(oldValue, allocCount, {\n        size: this.size,\n        type: ArrayType,\n        padding: this.elementOffset,\n        copy: shouldCopy\n      });\n\n      if (this.buffer && this.buffer.byteLength < this.value.byteLength) {\n        this.buffer.reallocate(this.value.byteLength);\n\n        if (shouldCopy && oldValue) {\n          // Upload the full existing attribute value to the GPU, so that updateBuffer\n          // can choose to only update a partial range.\n          // TODO - copy old buffer to new buffer on the GPU\n          this.buffer.subData({\n            data:\n              oldValue instanceof Float64Array\n                ? toDoublePrecisionArray(oldValue, {size: this.size})\n                : oldValue\n          });\n        }\n      }\n\n      state.allocatedValue = this.value;\n      return true;\n    }\n\n    return false;\n  }\n\n  updateBuffer({numInstances, bufferLayout, data, props, context}) {\n    if (!this.needsUpdate()) {\n      return false;\n    }\n\n    const state = this.userData;\n\n    const {update, updateRanges, noAlloc} = state;\n\n    let updated = true;\n    if (update) {\n      // Custom updater - typically for non-instanced layers\n      for (const [startRow, endRow] of updateRanges) {\n        update.call(context, this, {data, startRow, endRow, props, numInstances, bufferLayout});\n      }\n      const doublePrecision = this.doublePrecision && this.value instanceof Float64Array;\n      if (this.constant || !this.buffer || this.buffer.byteLength < this.value.byteLength) {\n        const attributeValue = this.value;\n        // call base clas `update` method to upload value to GPU\n        this.update({\n          value: doublePrecision ? toDoublePrecisionArray(attributeValue, this) : attributeValue,\n          constant: this.constant\n        });\n        // Save the 64-bit version\n        this.value = attributeValue;\n      } else {\n        for (const [startRow, endRow] of updateRanges) {\n          const startOffset = Number.isFinite(startRow) ? this.getVertexOffset(startRow) : 0;\n          const endOffset = Number.isFinite(endRow)\n            ? this.getVertexOffset(endRow)\n            : noAlloc || !Number.isFinite(numInstances)\n              ? this.value.length\n              : numInstances * this.size;\n\n          // Only update the changed part of the attribute\n          this.buffer.subData({\n            data: doublePrecision\n              ? toDoublePrecisionArray(this.value, {\n                  size: this.size,\n                  startIndex: startOffset,\n                  endIndex: endOffset\n                })\n              : this.value.subarray(startOffset, endOffset),\n            offset: startOffset * this.value.BYTES_PER_ELEMENT\n          });\n        }\n      }\n      this._checkAttributeArray();\n    } else {\n      updated = false;\n    }\n\n    this._updateShaderAttributes();\n\n    this.clearNeedsUpdate();\n    state.needsRedraw = true;\n\n    return updated;\n  }\n\n  update(props) {\n    super.update(props);\n    this._updateShaderAttributes();\n  }\n\n  // Use generic value\n  // Returns true if successful\n  setConstantValue(value) {\n    const state = this.userData;\n\n    if (value === undefined || typeof value === 'function') {\n      // ignore if this attribute has no accessor\n      // ignore if accessor is function, will be used in updateBuffer\n      state.isExternalBuffer = false;\n      return false;\n    }\n\n    value = this._normalizeValue(value);\n    const hasChanged = !this.constant || !this._areValuesEqual(value, this.value);\n\n    if (hasChanged) {\n      this.update({constant: true, value});\n    }\n    state.needsRedraw = state.needsUpdate || hasChanged;\n    this.clearNeedsUpdate();\n    state.isExternalBuffer = true;\n    return true;\n  }\n\n  // Use external buffer\n  // Returns true if successful\n  // eslint-disable-next-line max-statements\n  setExternalBuffer(buffer) {\n    const state = this.userData;\n\n    if (!buffer) {\n      state.isExternalBuffer = false;\n      state.lastExternalBuffer = null;\n      return false;\n    }\n\n    this.clearNeedsUpdate();\n\n    if (state.lastExternalBuffer === buffer) {\n      return true;\n    }\n    state.isExternalBuffer = true;\n    state.lastExternalBuffer = buffer;\n\n    let opts;\n    if (ArrayBuffer.isView(buffer)) {\n      opts = {constant: false, value: buffer};\n    } else if (buffer instanceof Buffer) {\n      opts = {constant: false, buffer};\n    } else {\n      opts = Object.assign({constant: false}, buffer);\n    }\n\n    this._checkExternalBuffer(opts);\n\n    if (this.doublePrecision && opts.value instanceof Float64Array) {\n      opts.originalValue = opts.value;\n      opts.value = toDoublePrecisionArray(opts.value, this);\n    }\n\n    this.update(opts);\n\n    state.needsRedraw = true;\n    if (opts.originalValue) {\n      this.value = opts.originalValue;\n    }\n\n    return true;\n  }\n\n  // PRIVATE HELPER METHODS\n  _checkExternalBuffer(opts) {\n    const {value} = opts;\n    if (!opts.constant && value) {\n      const ArrayType = glArrayFromType(this.defaultType);\n\n      let illegalArrayType = false;\n      if (this.doublePrecision) {\n        // not 32bit or 64bit\n        illegalArrayType = value.BYTES_PER_ELEMENT < 4;\n      } else if (this.hasShaderAttributes) {\n        illegalArrayType =\n          value.BYTES_PER_ELEMENT !== ArrayType.BYTES_PER_ELEMENT &&\n          // Shader attributes have hard-coded offsets and strides\n          // TODO - switch to element offsets and element strides?\n          Object.values(this.shaderAttributes).some(\n            attribute => attribute.offset || attribute.stride\n          );\n      }\n      if (illegalArrayType) {\n        throw new Error(`Attribute ${this.id} does not support ${value.constructor.name}`);\n      }\n      if (!(value instanceof ArrayType) && this.normalized && !('normalized' in opts)) {\n        log.warn(`Attribute ${this.id} is normalized`)();\n      }\n    }\n  }\n\n  getVertexOffset(row, bufferLayout = this.bufferLayout) {\n    let offset = this.elementOffset;\n    if (bufferLayout) {\n      let index = 0;\n      for (const geometrySize of bufferLayout) {\n        if (index >= row) {\n          break;\n        }\n        offset += geometrySize * this.size;\n        index++;\n      }\n      return offset;\n    }\n    return offset + row * this.size;\n  }\n\n  /* check user supplied values and apply fallback */\n  _normalizeValue(value, out = [], start = 0) {\n    const {defaultValue} = this.userData;\n\n    if (!Array.isArray(value) && !ArrayBuffer.isView(value)) {\n      out[start] = Number.isFinite(value) ? value : defaultValue[0];\n      return out;\n    }\n\n    /* eslint-disable no-fallthrough, default-case */\n    switch (this.size) {\n      case 4:\n        out[start + 3] = Number.isFinite(value[3]) ? value[3] : defaultValue[3];\n      case 3:\n        out[start + 2] = Number.isFinite(value[2]) ? value[2] : defaultValue[2];\n      case 2:\n        out[start + 1] = Number.isFinite(value[1]) ? value[1] : defaultValue[1];\n      case 1:\n        out[start + 0] = Number.isFinite(value[0]) ? value[0] : defaultValue[0];\n    }\n\n    return out;\n  }\n\n  _areValuesEqual(value1, value2, size = this.size) {\n    for (let i = 0; i < size; i++) {\n      if (value1[i] !== value2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  _standardAccessor(attribute, {data, startRow, endRow, props, numInstances, bufferLayout}) {\n    const state = attribute.userData;\n\n    const {accessor, transform} = state;\n    const {value, size} = attribute;\n    const accessorFunc = typeof accessor === 'function' ? accessor : props[accessor];\n\n    assert(typeof accessorFunc === 'function', `accessor \"${accessor}\" is not a function`);\n\n    let i = attribute.getVertexOffset(startRow, bufferLayout);\n    const {iterable, objectInfo} = createIterable(data, startRow, endRow);\n    for (const object of iterable) {\n      objectInfo.index++;\n\n      let objectValue = accessorFunc(object, objectInfo);\n      if (transform) {\n        // transform callbacks could be bound to a particular layer instance.\n        // always point `this` to the current layer.\n        objectValue = transform.call(this, objectValue);\n      }\n\n      if (bufferLayout) {\n        attribute._normalizeValue(objectValue, objectInfo.target);\n        const numVertices = bufferLayout[objectInfo.index];\n        fillArray({\n          target: attribute.value,\n          source: objectInfo.target,\n          start: i,\n          count: numVertices\n        });\n        i += numVertices * size;\n      } else {\n        attribute._normalizeValue(objectValue, value, i);\n        i += size;\n      }\n    }\n    attribute.constant = false;\n    attribute.bufferLayout = bufferLayout;\n  }\n\n  // Validate deck.gl level fields\n  _validateAttributeUpdaters() {\n    const state = this.userData;\n\n    // Check that 'update' is a valid function\n    const hasUpdater = state.noAlloc || typeof state.update === 'function';\n    if (!hasUpdater) {\n      throw new Error(`Attribute ${this.id} missing update or accessor`);\n    }\n  }\n\n  _checkAttributeArray() {\n    const {value} = this;\n    if (value && value.length >= 4) {\n      const valid =\n        Number.isFinite(value[0]) &&\n        Number.isFinite(value[1]) &&\n        Number.isFinite(value[2]) &&\n        Number.isFinite(value[3]);\n      if (!valid) {\n        throw new Error(`Illegal attribute generated for ${this.id}`);\n      }\n    }\n  }\n\n  _updateShaderAttributes() {\n    const shaderAttributes = this.shaderAttributes;\n    for (const shaderAttributeName in shaderAttributes) {\n      const shaderAttribute = shaderAttributes[shaderAttributeName];\n      shaderAttribute.update({\n        buffer: this.getBuffer(),\n        value: this.value,\n        constant: this.constant\n      });\n    }\n  }\n}\n\n/* eslint-disable complexity */\nfunction glArrayFromType(glType) {\n  // Sorted in some order of likelihood to reduce amount of comparisons\n  switch (glType) {\n    case GL.FLOAT:\n      return Float32Array;\n    case GL.DOUBLE:\n      return Float64Array;\n    case GL.UNSIGNED_SHORT:\n    case GL.UNSIGNED_SHORT_5_6_5:\n    case GL.UNSIGNED_SHORT_4_4_4_4:\n    case GL.UNSIGNED_SHORT_5_5_5_1:\n      return Uint16Array;\n    case GL.UNSIGNED_INT:\n      return Uint32Array;\n    case GL.UNSIGNED_BYTE:\n      return Uint8ClampedArray;\n    case GL.BYTE:\n      return Int8Array;\n    case GL.SHORT:\n      return Int16Array;\n    case GL.INT:\n      return Int32Array;\n    default:\n      throw new Error('Failed to deduce type from array');\n  }\n}\n/* eslint-enable complexity */\n"],"file":"attribute.js"}