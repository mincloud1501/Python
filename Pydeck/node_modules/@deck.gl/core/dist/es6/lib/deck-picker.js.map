{"version":3,"sources":["../../../src/lib/deck-picker.js"],"names":["Framebuffer","readPixelsToArray","cssToDeviceRatio","cssToDevicePixels","assert","PickLayersPass","getClosestObject","getUniqueObjects","processPickInfo","getLayerPickingInfo","DeckPicker","constructor","gl","pickingFBO","pickLayersPass","layerFilter","pickingEvent","lastPickedInfo","index","layerId","info","setProps","props","pickObject","x","y","mode","radius","layers","viewports","activateViewport","depth","event","result","pickClosestObject","onViewportActive","pickObjects","width","height","pickVisibleObjects","getLastPickedObject","lastPickedLayerId","layer","id","find","l","coordinate","unproject","lngLat","Object","assign","color","object","updatePickingBuffer","resize","canvas","pixelRatio","devicePixelRange","devicePixel","Math","floor","deviceRadius","round","deviceRect","getPickingRect","deviceX","deviceY","deviceWidth","deviceHeight","infos","affectedLayers","i","pickedColors","drawAndSamplePickingBuffer","redrawReason","pickInfo","pickedColor","clearPickingColor","processedPickInfos","callLayerPickingCallbacks","forEach","push","restorePickingColors","emptyInfo","get","leftTop","deviceLeft","deviceTop","rightBottom","deviceRight","deviceBottom","pickInfos","uniqueInfos","Map","pickedObjectIndex","picked","pickedLayer","has","set","Array","from","values","Number","isFinite","pickableLayers","filter","isPickable","length","effectProps","lightSources","render","Uint8Array","sourceX","sourceY","sourceWidth","sourceHeight","target","max","min","unhandledPickInfos","handled","onHover","Error"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Framebuffer, readPixelsToArray, cssToDeviceRatio, cssToDevicePixels} from '@luma.gl/core';\nimport assert from '../utils/assert';\nimport PickLayersPass from '../passes/pick-layers-pass';\nimport {getClosestObject, getUniqueObjects} from './picking/query-object';\nimport {processPickInfo, getLayerPickingInfo} from './picking/pick-info';\n\nexport default class DeckPicker {\n  constructor(gl) {\n    this.gl = gl;\n    this.pickingFBO = null;\n    this.pickLayersPass = new PickLayersPass(gl);\n    this.layerFilter = null;\n    this.pickingEvent = null;\n    this.lastPickedInfo = {\n      // For callback tracking and auto highlight\n      index: -1,\n      layerId: null,\n      info: null\n    };\n  }\n\n  setProps(props) {\n    if ('layerFilter' in props) {\n      this.layerFilter = props.layerFilter;\n    }\n    this.pickLayersPass.setProps({\n      layerFilter: this.layerFilter\n    });\n  }\n\n  // Pick the closest info at given coordinate\n  pickObject({\n    x,\n    y,\n    mode,\n    radius = 0,\n    layers,\n    viewports,\n    activateViewport,\n    depth = 1,\n    event = null\n  }) {\n    // Allow layers to access the event\n    this.pickingEvent = event;\n    const result = this.pickClosestObject({\n      // User params\n      x,\n      y,\n      radius,\n      layers,\n      mode,\n      depth,\n      // Injected params\n      viewports,\n      onViewportActive: activateViewport\n    });\n\n    // Clear the current event\n    this.pickingEvent = null;\n    return result;\n  }\n\n  // Get all unique infos within a bounding box\n  pickObjects({x, y, width, height, layers, viewports, activateViewport}) {\n    return this.pickVisibleObjects({\n      x,\n      y,\n      width,\n      height,\n      layers,\n      mode: 'pickObjects',\n      viewports,\n      onViewportActive: activateViewport\n    });\n  }\n\n  // Returns a new picking info object by assuming the last picked object is still picked\n  getLastPickedObject({x, y, layers, viewports}, lastPickedInfo = this.lastPickedInfo.info) {\n    const lastPickedLayerId = lastPickedInfo && lastPickedInfo.layer && lastPickedInfo.layer.id;\n    const layer = lastPickedLayerId ? layers.find(l => l.id === lastPickedLayerId) : null;\n    const coordinate = viewports[0] && viewports[0].unproject([x, y]);\n\n    const info = {\n      x,\n      y,\n      coordinate,\n      // TODO remove the lngLat prop after compatibility check\n      lngLat: coordinate,\n      layer\n    };\n\n    if (layer) {\n      return Object.assign({}, lastPickedInfo, info);\n    }\n    return Object.assign(info, {color: null, object: null, index: -1});\n  }\n\n  // Private\n  updatePickingBuffer() {\n    const {gl} = this;\n    // Create a frame buffer if not already available\n    if (!this.pickingFBO) {\n      this.pickingFBO = new Framebuffer(gl);\n    }\n    // Resize it to current canvas size (this is a noop if size hasn't changed)\n    this.pickingFBO.resize({width: gl.canvas.width, height: gl.canvas.height});\n    return this.pickingFBO;\n  }\n\n  // Pick the closest object at the given (x,y) coordinate\n  // eslint-disable-next-line max-statements\n  pickClosestObject({layers, viewports, x, y, radius, depth = 1, mode, onViewportActive}) {\n    this.updatePickingBuffer();\n    // Convert from canvas top-left to WebGL bottom-left coordinates\n    // Top-left coordinates [x, y] to bottom-left coordinates [deviceX, deviceY]\n    // And compensate for pixelRatio\n    const pixelRatio = cssToDeviceRatio(this.gl);\n    const devicePixelRange = cssToDevicePixels(this.gl, [x, y], true);\n    const devicePixel = [\n      devicePixelRange.x + Math.floor(devicePixelRange.width / 2),\n      devicePixelRange.y + Math.floor(devicePixelRange.height / 2)\n    ];\n\n    const deviceRadius = Math.round(radius * pixelRatio);\n    const {width, height} = this.pickingFBO;\n    const deviceRect = this.getPickingRect({\n      deviceX: devicePixel[0],\n      deviceY: devicePixel[1],\n      deviceRadius,\n      deviceWidth: width,\n      deviceHeight: height\n    });\n\n    let infos;\n    const result = [];\n    const affectedLayers = {};\n\n    for (let i = 0; i < depth; i++) {\n      const pickedColors =\n        deviceRect &&\n        this.drawAndSamplePickingBuffer({\n          layers,\n          viewports,\n          onViewportActive,\n          deviceRect,\n          redrawReason: mode\n        });\n\n      const pickInfo = getClosestObject({\n        pickedColors,\n        layers,\n        deviceX: devicePixel[0],\n        deviceY: devicePixel[1],\n        deviceRadius,\n        deviceRect\n      });\n\n      // Only exclude if we need to run picking again.\n      // We need to run picking again if an object is detected AND\n      // we have not exhausted the requested depth.\n      if (pickInfo.pickedColor && i + 1 < depth) {\n        const layerId = pickInfo.pickedColor[3] - 1;\n        affectedLayers[layerId] = true;\n        layers[layerId].clearPickingColor(pickInfo.pickedColor);\n      }\n\n      // This logic needs to run even if no object is picked.\n      infos = processPickInfo({\n        pickInfo,\n        lastPickedInfo: this.lastPickedInfo,\n        mode,\n        layers,\n        viewports,\n        x,\n        y,\n        deviceX: devicePixel[0],\n        deviceY: devicePixel[1],\n        pixelRatio\n      });\n\n      const processedPickInfos = this.callLayerPickingCallbacks(infos, mode);\n\n      if (processedPickInfos) {\n        processedPickInfos.forEach(info => result.push(info));\n      }\n\n      // If no object is picked stop.\n      if (!pickInfo.pickedColor) {\n        break;\n      }\n    }\n\n    // reset only affected buffers\n    for (const layerId in affectedLayers) {\n      layers[layerId].restorePickingColors();\n    }\n\n    return {result, emptyInfo: infos && infos.get(null)};\n  }\n\n  // Pick all objects within the given bounding box\n  pickVisibleObjects({layers, viewports, x, y, width, height, mode, onViewportActive}) {\n    this.updatePickingBuffer();\n    // Convert from canvas top-left to WebGL bottom-left coordinates\n    // And compensate for pixelRatio\n    const pixelRatio = cssToDeviceRatio(this.gl);\n    const leftTop = cssToDevicePixels(this.gl, [x, y], true);\n\n    // take left and top (y inverted in device pixels) from start location\n    const deviceLeft = leftTop.x;\n    const deviceTop = leftTop.y + leftTop.height;\n\n    // take right and bottom (y inverted in device pixels) from end location\n    const rightBottom = cssToDevicePixels(this.gl, [x + width, y + height], true);\n    const deviceRight = rightBottom.x + rightBottom.width;\n    const deviceBottom = rightBottom.y;\n\n    const deviceRect = {\n      x: deviceLeft,\n      y: deviceBottom,\n      // deviceTop and deviceRight represent the first pixel outside the desired rect\n      width: deviceRight - deviceLeft,\n      height: deviceTop - deviceBottom\n    };\n\n    const pickedColors = this.drawAndSamplePickingBuffer({\n      layers,\n      viewports,\n      onViewportActive,\n      deviceRect,\n      redrawReason: mode\n    });\n\n    const pickInfos = getUniqueObjects({pickedColors, layers});\n\n    // Only return unique infos, identified by info.object\n    const uniqueInfos = new Map();\n\n    pickInfos.forEach(pickInfo => {\n      let info = {\n        color: pickInfo.pickedColor,\n        layer: null,\n        index: pickInfo.pickedObjectIndex,\n        picked: true,\n        x,\n        y,\n        width,\n        height,\n        pixelRatio\n      };\n\n      info = getLayerPickingInfo({layer: pickInfo.pickedLayer, info, mode});\n      if (!uniqueInfos.has(info.object)) {\n        uniqueInfos.set(info.object, info);\n      }\n    });\n\n    return Array.from(uniqueInfos.values());\n  }\n\n  // returns pickedColor or null if no pickable layers found.\n  drawAndSamplePickingBuffer({layers, viewports, onViewportActive, deviceRect, redrawReason}) {\n    assert(deviceRect);\n    assert(Number.isFinite(deviceRect.width) && deviceRect.width > 0, '`width` must be > 0');\n    assert(Number.isFinite(deviceRect.height) && deviceRect.height > 0, '`height` must be > 0');\n\n    const pickableLayers = layers.filter(layer => layer.isPickable());\n    if (pickableLayers.length < 1) {\n      return null;\n    }\n\n    const pickingFBO = this.pickingFBO;\n    // turn off lighting by adding empty light source object\n    // lights shader module relies on the `lightSources` to turn on/off lighting\n    const effectProps = {lightSources: {}};\n\n    this.pickLayersPass.render({\n      layers,\n      viewports,\n      onViewportActive,\n      pickingFBO,\n      deviceRect,\n      redrawReason,\n      effectProps\n    });\n\n    // Read from an already rendered picking buffer\n    // Returns an Uint8ClampedArray of picked pixels\n    const {x, y, width, height} = deviceRect;\n    const pickedColors = new Uint8Array(width * height * 4);\n    readPixelsToArray(pickingFBO, {\n      sourceX: x,\n      sourceY: y,\n      sourceWidth: width,\n      sourceHeight: height,\n      target: pickedColors\n    });\n    return pickedColors;\n  }\n\n  // Calculate a picking rect centered on deviceX and deviceY and clipped to device\n  // Returns null if pixel is outside of device\n  getPickingRect({deviceX, deviceY, deviceRadius, deviceWidth, deviceHeight}) {\n    // Create a box of size `radius * 2 + 1` centered at [deviceX, deviceY]\n    const x = Math.max(0, deviceX - deviceRadius);\n    const y = Math.max(0, deviceY - deviceRadius);\n    const width = Math.min(deviceWidth, deviceX + deviceRadius + 1) - x;\n    const height = Math.min(deviceHeight, deviceY + deviceRadius + 1) - y;\n\n    // x, y out of bounds.\n    if (width <= 0 || height <= 0) {\n      return null;\n    }\n\n    return {x, y, width, height};\n  }\n\n  // Per-layer event handlers (e.g. onClick, onHover) are provided by the\n  // user and out of deck.gl's control. It's very much possible that\n  // the user calls React lifecycle methods in these function, such as\n  // ReactComponent.setState(). React lifecycle methods sometimes induce\n  // a re-render and re-generation of props of deck.gl and its layers,\n  // which invalidates all layers currently passed to this very function.\n\n  // Therefore, per-layer event handlers must be invoked at the end\n  // of the picking operation. NO operation that relies on the states of current\n  // layers should be called after this code.\n  callLayerPickingCallbacks(infos, mode) {\n    const unhandledPickInfos = [];\n    const pickingEvent = this.pickingEvent;\n\n    infos.forEach(info => {\n      if (!info.layer) {\n        return;\n      }\n\n      let handled = false;\n      switch (mode) {\n        case 'hover':\n          handled = info.layer.onHover(info, pickingEvent);\n          break;\n        case 'query':\n          break;\n        default:\n          throw new Error('unknown pick type');\n      }\n\n      if (!handled) {\n        unhandledPickInfos.push(info);\n      }\n    });\n\n    return unhandledPickInfos;\n  }\n}\n"],"file":"deck-picker.js"}