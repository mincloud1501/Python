import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { Buffer } from '@luma.gl/core';
import assert from '../utils/assert';
import { createIterable } from '../utils/iterable-utils';
import { fillArray } from '../utils/flatten';
import * as range from '../utils/range';
import log from '../utils/log';
import BaseAttribute from './base-attribute';
import typedArrayManager from '../utils/typed-array-manager';
import { toDoublePrecisionArray } from '../utils/math-utils';
import { normalizeTransitionSettings } from './attribute-transition-utils';
const DEFAULT_STATE = {
  isExternalBuffer: false,
  lastExternalBuffer: null,
  allocatedValue: null,
  needsUpdate: true,
  needsRedraw: false,
  updateRanges: range.FULL
};

function addDoublePrecisionAttributes(attribute, shaderAttributeDefs) {
  const doubleShaderAttributeDefs = {};

  for (const shaderAttributeName in shaderAttributeDefs) {
    const def = shaderAttributeDefs[shaderAttributeName];
    const offset = 'offset' in def ? def.offset : attribute.offset;
    const stride = 'stride' in def ? def.stride : attribute.size * 4;
    doubleShaderAttributeDefs["".concat(shaderAttributeName, "32")] = Object.assign({}, def, {
      offset,
      stride
    });
    doubleShaderAttributeDefs["".concat(shaderAttributeName, "64")] = Object.assign({}, def, {
      offset: offset * 2,
      stride: stride * 2
    });
    doubleShaderAttributeDefs["".concat(shaderAttributeName, "64xyLow")] = Object.assign({}, def, {
      offset: offset * 2 + stride,
      stride: stride * 2
    });
  }

  return doubleShaderAttributeDefs;
}

export default class Attribute extends BaseAttribute {
  constructor(gl, opts = {}) {
    const logicalType = opts.type;
    const doublePrecision = logicalType === 5130;
    super(gl, doublePrecision ? _objectSpread({}, opts, {
      type: 5126
    }) : opts);
    const {
      transition = false,
      noAlloc = false,
      update = null,
      accessor = null,
      transform = null,
      bufferLayout = null
    } = opts;
    let {
      defaultValue = [0, 0, 0, 0]
    } = opts;
    defaultValue = Array.isArray(defaultValue) ? defaultValue : [defaultValue];
    this.defaultType = logicalType || this.type || 5126;
    this.shaderAttributes = {};
    this.hasShaderAttributes = false;
    this.doublePrecision = doublePrecision;

    if (doublePrecision && opts.fp64 === false) {
      this.defaultType = 5126;
    }

    let shaderAttributes = opts.shaderAttributes || doublePrecision && {
      [this.id]: {}
    };

    if (shaderAttributes) {
      const shaderAttributeNames = Object.keys(shaderAttributes);
      shaderAttributes = doublePrecision ? addDoublePrecisionAttributes(this, shaderAttributes) : shaderAttributes;

      for (const shaderAttributeName in shaderAttributes) {
        const shaderAttribute = shaderAttributes[shaderAttributeName];
        this.shaderAttributes[shaderAttributeName] = new BaseAttribute(this.gl, Object.assign({
          size: this.size,
          normalized: this.normalized,
          integer: this.integer,
          offset: this.offset,
          stride: this.stride,
          divisor: this.divisor
        }, shaderAttribute, {
          id: shaderAttributeName,
          buffer: this.getBuffer()
        }));
        this.hasShaderAttributes = shaderAttributeNames;
      }
    }

    Object.assign(this.userData, DEFAULT_STATE, opts, {
      transition,
      noAlloc,
      update: update || accessor && this._standardAccessor,
      accessor,
      transform,
      defaultValue,
      bufferLayout
    });
    Object.seal(this.userData);

    this._validateAttributeUpdaters();
  }

  get bufferLayout() {
    return this.userData.bufferLayout;
  }

  set bufferLayout(layout) {
    this.userData.bufferLayout = layout;
  }

  delete() {
    super.delete();
    typedArrayManager.release(this.userData.allocatedValue);
  }

  needsUpdate() {
    return this.userData.needsUpdate;
  }

  needsRedraw({
    clearChangedFlags = false
  } = {}) {
    const needsRedraw = this.userData.needsRedraw;
    this.userData.needsRedraw = this.userData.needsRedraw && !clearChangedFlags;
    return needsRedraw;
  }

  getUpdateTriggers() {
    const {
      accessor
    } = this.userData;
    return [this.id].concat(typeof accessor !== 'function' && accessor || []);
  }

  getAccessor() {
    return this.userData.accessor;
  }

  getShaderAttributes() {
    const shaderAttributes = {};

    if (this.doublePrecision) {
      const isBuffer64Bit = this.value instanceof Float64Array;

      for (const shaderAttributeName of this.hasShaderAttributes) {
        shaderAttributes[shaderAttributeName] = this.shaderAttributes[isBuffer64Bit ? "".concat(shaderAttributeName, "64") : "".concat(shaderAttributeName, "32")];
        const shaderAttributeLowPartName = "".concat(shaderAttributeName, "64xyLow");
        shaderAttributes[shaderAttributeLowPartName] = isBuffer64Bit ? this.shaderAttributes[shaderAttributeLowPartName] : new Float32Array(this.size);
      }
    } else if (this.hasShaderAttributes) {
      Object.assign(shaderAttributes, this.shaderAttributes);
    } else {
      shaderAttributes[this.id] = this;
    }

    return shaderAttributes;
  }

  supportsTransition() {
    return Boolean(this.userData.transition);
  }

  getTransitionSetting(opts) {
    const {
      accessor
    } = this.userData;
    const layerSettings = this.userData.transition;

    if (!this.supportsTransition()) {
      return null;
    }

    const userSettings = Array.isArray(accessor) ? opts[accessor.find(a => opts[a])] : opts[accessor];
    return normalizeTransitionSettings(userSettings, layerSettings);
  }

  setNeedsUpdate(reason = this.id, dataRange) {
    this.userData.needsUpdate = this.userData.needsUpdate || reason;

    if (dataRange) {
      const {
        startRow = 0,
        endRow = Infinity
      } = dataRange;
      this.userData.updateRanges = range.add(this.userData.updateRanges, [startRow, endRow]);
    } else {
      this.userData.updateRanges = range.FULL;
    }
  }

  clearNeedsUpdate() {
    this.userData.needsUpdate = false;
    this.userData.updateRanges = range.EMPTY;
  }

  setNeedsRedraw(reason = this.id) {
    this.userData.needsRedraw = this.userData.needsRedraw || reason;
  }

  allocate(numInstances) {
    const state = this.userData;

    if (state.isExternalBuffer || state.noAlloc) {
      return false;
    }

    if (state.update) {
      assert(Number.isFinite(numInstances));
      const allocCount = Math.max(numInstances, 1);
      const ArrayType = glArrayFromType(this.defaultType);
      const oldValue = state.allocatedValue;
      const shouldCopy = state.updateRanges !== range.FULL;
      this.constant = false;
      this.value = typedArrayManager.allocate(oldValue, allocCount, {
        size: this.size,
        type: ArrayType,
        padding: this.elementOffset,
        copy: shouldCopy
      });

      if (this.buffer && this.buffer.byteLength < this.value.byteLength) {
        this.buffer.reallocate(this.value.byteLength);

        if (shouldCopy && oldValue) {
          this.buffer.subData({
            data: oldValue instanceof Float64Array ? toDoublePrecisionArray(oldValue, {
              size: this.size
            }) : oldValue
          });
        }
      }

      state.allocatedValue = this.value;
      return true;
    }

    return false;
  }

  updateBuffer({
    numInstances,
    bufferLayout,
    data,
    props,
    context
  }) {
    if (!this.needsUpdate()) {
      return false;
    }

    const state = this.userData;
    const {
      update,
      updateRanges,
      noAlloc
    } = state;
    let updated = true;

    if (update) {
      for (const [startRow, endRow] of updateRanges) {
        update.call(context, this, {
          data,
          startRow,
          endRow,
          props,
          numInstances,
          bufferLayout
        });
      }

      const doublePrecision = this.doublePrecision && this.value instanceof Float64Array;

      if (this.constant || !this.buffer || this.buffer.byteLength < this.value.byteLength) {
        const attributeValue = this.value;
        this.update({
          value: doublePrecision ? toDoublePrecisionArray(attributeValue, this) : attributeValue,
          constant: this.constant
        });
        this.value = attributeValue;
      } else {
        for (const [startRow, endRow] of updateRanges) {
          const startOffset = Number.isFinite(startRow) ? this.getVertexOffset(startRow) : 0;
          const endOffset = Number.isFinite(endRow) ? this.getVertexOffset(endRow) : noAlloc || !Number.isFinite(numInstances) ? this.value.length : numInstances * this.size;
          this.buffer.subData({
            data: doublePrecision ? toDoublePrecisionArray(this.value, {
              size: this.size,
              startIndex: startOffset,
              endIndex: endOffset
            }) : this.value.subarray(startOffset, endOffset),
            offset: startOffset * this.value.BYTES_PER_ELEMENT
          });
        }
      }

      this._checkAttributeArray();
    } else {
      updated = false;
    }

    this._updateShaderAttributes();

    this.clearNeedsUpdate();
    state.needsRedraw = true;
    return updated;
  }

  update(props) {
    super.update(props);

    this._updateShaderAttributes();
  }

  setConstantValue(value) {
    const state = this.userData;

    if (value === undefined || typeof value === 'function') {
      state.isExternalBuffer = false;
      return false;
    }

    value = this._normalizeValue(value);
    const hasChanged = !this.constant || !this._areValuesEqual(value, this.value);

    if (hasChanged) {
      this.update({
        constant: true,
        value
      });
    }

    state.needsRedraw = state.needsUpdate || hasChanged;
    this.clearNeedsUpdate();
    state.isExternalBuffer = true;
    return true;
  }

  setExternalBuffer(buffer) {
    const state = this.userData;

    if (!buffer) {
      state.isExternalBuffer = false;
      state.lastExternalBuffer = null;
      return false;
    }

    this.clearNeedsUpdate();

    if (state.lastExternalBuffer === buffer) {
      return true;
    }

    state.isExternalBuffer = true;
    state.lastExternalBuffer = buffer;
    let opts;

    if (ArrayBuffer.isView(buffer)) {
      opts = {
        constant: false,
        value: buffer
      };
    } else if (buffer instanceof Buffer) {
      opts = {
        constant: false,
        buffer
      };
    } else {
      opts = Object.assign({
        constant: false
      }, buffer);
    }

    this._checkExternalBuffer(opts);

    if (this.doublePrecision && opts.value instanceof Float64Array) {
      opts.originalValue = opts.value;
      opts.value = toDoublePrecisionArray(opts.value, this);
    }

    this.update(opts);
    state.needsRedraw = true;

    if (opts.originalValue) {
      this.value = opts.originalValue;
    }

    return true;
  }

  _checkExternalBuffer(opts) {
    const {
      value
    } = opts;

    if (!opts.constant && value) {
      const ArrayType = glArrayFromType(this.defaultType);
      let illegalArrayType = false;

      if (this.doublePrecision) {
        illegalArrayType = value.BYTES_PER_ELEMENT < 4;
      } else if (this.hasShaderAttributes) {
        illegalArrayType = value.BYTES_PER_ELEMENT !== ArrayType.BYTES_PER_ELEMENT && Object.values(this.shaderAttributes).some(attribute => attribute.offset || attribute.stride);
      }

      if (illegalArrayType) {
        throw new Error("Attribute ".concat(this.id, " does not support ").concat(value.constructor.name));
      }

      if (!(value instanceof ArrayType) && this.normalized && !('normalized' in opts)) {
        log.warn("Attribute ".concat(this.id, " is normalized"))();
      }
    }
  }

  getVertexOffset(row, bufferLayout = this.bufferLayout) {
    let offset = this.elementOffset;

    if (bufferLayout) {
      let index = 0;

      for (const geometrySize of bufferLayout) {
        if (index >= row) {
          break;
        }

        offset += geometrySize * this.size;
        index++;
      }

      return offset;
    }

    return offset + row * this.size;
  }

  _normalizeValue(value, out = [], start = 0) {
    const {
      defaultValue
    } = this.userData;

    if (!Array.isArray(value) && !ArrayBuffer.isView(value)) {
      out[start] = Number.isFinite(value) ? value : defaultValue[0];
      return out;
    }

    switch (this.size) {
      case 4:
        out[start + 3] = Number.isFinite(value[3]) ? value[3] : defaultValue[3];

      case 3:
        out[start + 2] = Number.isFinite(value[2]) ? value[2] : defaultValue[2];

      case 2:
        out[start + 1] = Number.isFinite(value[1]) ? value[1] : defaultValue[1];

      case 1:
        out[start + 0] = Number.isFinite(value[0]) ? value[0] : defaultValue[0];
    }

    return out;
  }

  _areValuesEqual(value1, value2, size = this.size) {
    for (let i = 0; i < size; i++) {
      if (value1[i] !== value2[i]) {
        return false;
      }
    }

    return true;
  }

  _standardAccessor(attribute, {
    data,
    startRow,
    endRow,
    props,
    numInstances,
    bufferLayout
  }) {
    const state = attribute.userData;
    const {
      accessor,
      transform
    } = state;
    const {
      value,
      size
    } = attribute;
    const accessorFunc = typeof accessor === 'function' ? accessor : props[accessor];
    assert(typeof accessorFunc === 'function', "accessor \"".concat(accessor, "\" is not a function"));
    let i = attribute.getVertexOffset(startRow, bufferLayout);
    const {
      iterable,
      objectInfo
    } = createIterable(data, startRow, endRow);

    for (const object of iterable) {
      objectInfo.index++;
      let objectValue = accessorFunc(object, objectInfo);

      if (transform) {
        objectValue = transform.call(this, objectValue);
      }

      if (bufferLayout) {
        attribute._normalizeValue(objectValue, objectInfo.target);

        const numVertices = bufferLayout[objectInfo.index];
        fillArray({
          target: attribute.value,
          source: objectInfo.target,
          start: i,
          count: numVertices
        });
        i += numVertices * size;
      } else {
        attribute._normalizeValue(objectValue, value, i);

        i += size;
      }
    }

    attribute.constant = false;
    attribute.bufferLayout = bufferLayout;
  }

  _validateAttributeUpdaters() {
    const state = this.userData;
    const hasUpdater = state.noAlloc || typeof state.update === 'function';

    if (!hasUpdater) {
      throw new Error("Attribute ".concat(this.id, " missing update or accessor"));
    }
  }

  _checkAttributeArray() {
    const {
      value
    } = this;

    if (value && value.length >= 4) {
      const valid = Number.isFinite(value[0]) && Number.isFinite(value[1]) && Number.isFinite(value[2]) && Number.isFinite(value[3]);

      if (!valid) {
        throw new Error("Illegal attribute generated for ".concat(this.id));
      }
    }
  }

  _updateShaderAttributes() {
    const shaderAttributes = this.shaderAttributes;

    for (const shaderAttributeName in shaderAttributes) {
      const shaderAttribute = shaderAttributes[shaderAttributeName];
      shaderAttribute.update({
        buffer: this.getBuffer(),
        value: this.value,
        constant: this.constant
      });
    }
  }

}

function glArrayFromType(glType) {
  switch (glType) {
    case 5126:
      return Float32Array;

    case 5130:
      return Float64Array;

    case 5123:
    case 33635:
    case 32819:
    case 32820:
      return Uint16Array;

    case 5125:
      return Uint32Array;

    case 5121:
      return Uint8ClampedArray;

    case 5120:
      return Int8Array;

    case 5122:
      return Int16Array;

    case 5124:
      return Int32Array;

    default:
      throw new Error('Failed to deduce type from array');
  }
}
//# sourceMappingURL=attribute.js.map