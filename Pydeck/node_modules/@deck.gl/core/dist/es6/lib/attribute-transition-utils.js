import BaseAttribute from '../lib/base-attribute';
import { padArray } from '../utils/array-utils';
const DEFAULT_TRANSITION_SETTINGS = {
  interpolation: {
    duration: 0,
    easing: t => t
  },
  spring: {
    stiffness: 0.05,
    damping: 0.5
  }
};
export function normalizeTransitionSettings(userSettings, layerSettings) {
  if (!userSettings) {
    return null;
  }

  if (Number.isFinite(userSettings)) {
    userSettings = {
      duration: userSettings
    };
  }

  userSettings.type = userSettings.type || 'interpolation';
  return Object.assign({}, DEFAULT_TRANSITION_SETTINGS[userSettings.type], layerSettings, userSettings);
}
export function getSourceBufferAttribute(gl, attribute) {
  const {
    size,
    value,
    normalized,
    constant
  } = attribute;

  if (constant) {
    return new BaseAttribute(gl, {
      constant,
      value,
      size
    });
  }

  const buffer = attribute.getBuffer();
  return new BaseAttribute(gl, {
    divisor: 0,
    constant,
    buffer,
    size,
    normalized
  });
}
export function getAttributeTypeFromSize(size) {
  switch (size) {
    case 1:
      return 'float';

    case 2:
      return 'vec2';

    case 3:
      return 'vec3';

    case 4:
      return 'vec4';

    default:
      throw new Error("No defined attribute type for size \"".concat(size, "\""));
  }
}
export function cycleBuffers(buffers) {
  buffers.push(buffers.shift());
}
export function getAttributeBufferLength(attribute, numInstances) {
  const {
    doublePrecision,
    userData,
    value,
    size
  } = attribute;
  const multiplier = doublePrecision ? 2 : 1;
  return (userData.noAlloc ? value.length : numInstances * size) * multiplier;
}
export function padBuffer({
  buffer,
  numInstances,
  attribute,
  fromLength,
  fromBufferLayout,
  getData = x => x
}) {
  const precisionMultiplier = attribute.doublePrecision ? 2 : 1;
  const size = attribute.size * precisionMultiplier;
  const offset = attribute.elementOffset * precisionMultiplier;
  const toBufferLayout = attribute.bufferLayout;
  const hasBufferLayout = fromBufferLayout && toBufferLayout;
  const toLength = getAttributeBufferLength(attribute, numInstances);

  if (!hasBufferLayout && fromLength >= toLength) {
    return;
  }

  const toData = attribute.constant ? attribute.getValue() : attribute.getBuffer().getData({});

  if (attribute.normalized) {
    const getter = getData;

    getData = (value, chunk) => attribute._normalizeConstant(getter(value, chunk));
  }

  const getMissingData = attribute.constant ? (i, chunk) => getData(toData, chunk) : (i, chunk) => getData(toData.subarray(i, i + size), chunk);
  const source = buffer.getData({
    length: fromLength
  });
  const data = new Float32Array(toLength);
  padArray({
    source,
    target: data,
    sourceLayout: fromBufferLayout,
    targetLayout: toBufferLayout,
    offset,
    size,
    getData: getMissingData
  });
  buffer.setData({
    data
  });
}
//# sourceMappingURL=attribute-transition-utils.js.map