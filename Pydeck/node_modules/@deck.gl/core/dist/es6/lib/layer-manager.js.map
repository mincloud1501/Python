{"version":3,"sources":["../../../src/lib/layer-manager.js"],"names":["assert","Timeline","seer","Layer","LIFECYCLE","log","flatten","Stats","Viewport","createProgramManager","setPropOverrides","layerEditListener","seerInitListener","initLayerInSeer","updateLayerInSeer","LOG_PRIORITY_LIFECYCLE","LOG_PRIORITY_LIFECYCLE_MINOR","INITIAL_CONTEXT","Object","seal","layerManager","deck","gl","stats","shaderCache","pickingFBO","mousePosition","userData","layerName","layer","LayerManager","constructor","viewport","timeline","lastRenderedLayers","layers","context","assign","programManager","id","_needsRedraw","_needsUpdate","_debug","activateViewport","bind","_initSeer","_editSeer","finalize","_finalizeLayer","removeListener","needsRedraw","opts","clearRedrawFlags","_checkIfNeedsRedraw","needsUpdate","setNeedsRedraw","reason","setNeedsUpdate","getLayers","layerIds","filter","find","layerId","indexOf","setProps","props","debug","setLayers","newLayers","forceUpdate","Boolean","error","generatedLayers","_updateLayers","oldLayers","updateLayers","redraw","layerNeedsRedraw","getNeedsRedraw","oldViewport","viewportChanged","equals","setChangeFlags","_updateLayer","oldLayerMap","oldLayer","warn","_updateSublayersRecursively","error2","_finalizeOldLayers","some","hasUniformTransition","firstError","newLayer","sublayers","validateProps","err","_initializeLayer","_transferLayerState","push","isComposite","getSubLayers","_initialize","lifecycle","INITIALIZED","internalState","model","getModels","_transferState","MATCHED","AWAITING_GC","printChangeFlags","_update","AWAITING_FINALIZATION","_finalize","FINALIZED","forEach","payload","type","valuePath","itemKey","slice","value"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport assert from '../utils/assert';\nimport {Timeline} from '@luma.gl/addons';\nimport seer from 'seer';\nimport Layer from './layer';\nimport {LIFECYCLE} from '../lifecycle/constants';\nimport log from '../utils/log';\nimport {flatten} from '../utils/flatten';\nimport {Stats} from 'probe.gl';\n\nimport Viewport from '../viewports/viewport';\nimport {createProgramManager} from '../shaderlib';\n\nimport {\n  setPropOverrides,\n  layerEditListener,\n  seerInitListener,\n  initLayerInSeer,\n  updateLayerInSeer\n} from './seer-integration';\n\nconst LOG_PRIORITY_LIFECYCLE = 2;\nconst LOG_PRIORITY_LIFECYCLE_MINOR = 4;\n\n// CONTEXT IS EXPOSED TO LAYERS\nconst INITIAL_CONTEXT = Object.seal({\n  layerManager: null,\n  deck: null,\n  gl: null,\n\n  // General resources\n  stats: null, // for tracking lifecycle performance\n\n  // GL Resources\n  shaderCache: null,\n  pickingFBO: null, // Screen-size framebuffer that layers can reuse\n\n  mousePosition: null,\n\n  userData: {} // Place for any custom app `context`\n});\n\nconst layerName = layer => (layer instanceof Layer ? `${layer}` : !layer ? 'null' : 'invalid');\n\nexport default class LayerManager {\n  // eslint-disable-next-line\n  constructor(gl, {deck, stats, viewport = null, timeline = null} = {}) {\n    // Currently deck.gl expects the DeckGL.layers array to be different\n    // whenever React rerenders. If the same layers array is used, the\n    // LayerManager's diffing algorithm will generate a fatal error and\n    // break the rendering.\n\n    // `this.lastRenderedLayers` stores the UNFILTERED layers sent\n    // down to LayerManager, so that `layers` reference can be compared.\n    // If it's the same across two React render calls, the diffing logic\n    // will be skipped.\n    this.lastRenderedLayers = [];\n    this.layers = [];\n\n    this.context = Object.assign({}, INITIAL_CONTEXT, {\n      layerManager: this,\n      deck,\n      gl,\n      // Enabling luma.gl Program caching using private API (_cachePrograms)\n      programManager: gl && createProgramManager(gl),\n      stats: stats || new Stats({id: 'deck.gl'}),\n      // Make sure context.viewport is not empty on the first layer initialization\n      viewport: viewport || new Viewport({id: 'DEFAULT-INITIAL-VIEWPORT'}), // Current viewport, exposed to layers for project* function\n      timeline: timeline || new Timeline()\n    });\n\n    this._needsRedraw = 'Initial render';\n    this._needsUpdate = false;\n    this._debug = false;\n\n    this.activateViewport = this.activateViewport.bind(this);\n\n    // Seer integration\n    this._initSeer = this._initSeer.bind(this);\n    this._editSeer = this._editSeer.bind(this);\n\n    Object.seal(this);\n\n    seerInitListener(this._initSeer);\n    layerEditListener(this._editSeer);\n  }\n\n  // Method to call when the layer manager is not needed anymore.\n  // Currently used in the <DeckGL> componentWillUnmount lifecycle to unbind Seer listeners.\n  finalize() {\n    // Finalize all layers\n    for (const layer of this.layers) {\n      this._finalizeLayer(layer);\n    }\n\n    seer.removeListener(this._initSeer);\n    seer.removeListener(this._editSeer);\n  }\n\n  // Check if a redraw is needed\n  needsRedraw(opts = {clearRedrawFlags: false}) {\n    return this._checkIfNeedsRedraw(opts);\n  }\n\n  // Check if a deep update of all layers is needed\n  needsUpdate() {\n    return this._needsUpdate;\n  }\n\n  // Layers will be redrawn (in next animation frame)\n  setNeedsRedraw(reason) {\n    this._needsRedraw = this._needsRedraw || reason;\n  }\n\n  // Layers will be updated deeply (in next animation frame)\n  // Potentially regenerating attributes and sub layers\n  setNeedsUpdate(reason) {\n    this._needsUpdate = this._needsUpdate || reason;\n  }\n\n  // Gets an (optionally) filtered list of layers\n  getLayers({layerIds = null} = {}) {\n    // Filtering by layerId compares beginning of strings, so that sublayers will be included\n    // Dependes on the convention of adding suffixes to the parent's layer name\n    return layerIds\n      ? this.layers.filter(layer => layerIds.find(layerId => layer.id.indexOf(layerId) === 0))\n      : this.layers;\n  }\n\n  // Set props needed for layer rendering and picking.\n  setProps(props) {\n    if ('debug' in props) {\n      this._debug = props.debug;\n    }\n\n    // A way for apps to add data to context that can be accessed in layers\n    if ('userData' in props) {\n      this.context.userData = props.userData;\n    }\n\n    // TODO - For now we set layers before viewports to preserve changeFlags\n    if ('layers' in props) {\n      this.setLayers(props.layers);\n    }\n  }\n\n  // Supply a new layer list, initiating sublayer generation and layer matching\n  setLayers(newLayers, forceUpdate = false) {\n    // TODO - something is generating state updates that cause rerender of the same\n    if (!forceUpdate && newLayers === this.lastRenderedLayers) {\n      log.log(3, 'Ignoring layer update due to layer array not changed')();\n      return this;\n    }\n    this.lastRenderedLayers = newLayers;\n\n    newLayers = flatten(newLayers, {filter: Boolean});\n\n    for (const layer of newLayers) {\n      layer.context = this.context;\n    }\n\n    const {error, generatedLayers} = this._updateLayers({\n      oldLayers: this.layers,\n      newLayers\n    });\n\n    this.layers = generatedLayers;\n\n    // Throw first error found, if any\n    if (error) {\n      throw error;\n    }\n    return this;\n  }\n\n  // Update layers from last cycle if `setNeedsUpdate()` has been called\n  updateLayers() {\n    // NOTE: For now, even if only some layer has changed, we update all layers\n    // to ensure that layer id maps etc remain consistent even if different\n    // sublayers are rendered\n    const reason = this.needsUpdate();\n    if (reason) {\n      this.setNeedsRedraw(`updating layers: ${reason}`);\n      // Force a full update\n      const forceUpdate = true;\n      this.setLayers(this.lastRenderedLayers, forceUpdate);\n    }\n  }\n\n  //\n  // PRIVATE METHODS\n  //\n\n  _checkIfNeedsRedraw(opts) {\n    let redraw = this._needsRedraw;\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n\n    // This layers list doesn't include sublayers, relying on composite layers\n    for (const layer of this.layers) {\n      // Call every layer to clear their flags\n      const layerNeedsRedraw = layer.getNeedsRedraw(opts);\n      redraw = redraw || layerNeedsRedraw;\n    }\n\n    return redraw;\n  }\n\n  // Make a viewport \"current\" in layer context, updating viewportChanged flags\n  activateViewport(viewport) {\n    const oldViewport = this.context.viewport;\n    const viewportChanged = !oldViewport || !viewport.equals(oldViewport);\n\n    if (viewportChanged) {\n      log.log(4, 'Viewport changed', viewport)();\n\n      this.context.viewport = viewport;\n\n      // Update layers states\n      // Let screen space layers update their state based on viewport\n      for (const layer of this.layers) {\n        layer.setChangeFlags({viewportChanged: 'Viewport changed'});\n        this._updateLayer(layer);\n      }\n    }\n\n    assert(this.context.viewport, 'LayerManager: viewport not set');\n\n    return this;\n  }\n\n  // Match all layers, checking for caught errors\n  // To avoid having an exception in one layer disrupt other layers\n  // TODO - mark layers with exceptions as bad and remove from rendering cycle?\n  _updateLayers({oldLayers, newLayers}) {\n    // Create old layer map\n    const oldLayerMap = {};\n    for (const oldLayer of oldLayers) {\n      if (oldLayerMap[oldLayer.id]) {\n        log.warn(`Multiple old layers with same id ${layerName(oldLayer)}`)();\n      } else {\n        oldLayerMap[oldLayer.id] = oldLayer;\n      }\n    }\n\n    // Allocate array for generated layers\n    const generatedLayers = [];\n\n    // Match sublayers\n    const error = this._updateSublayersRecursively({\n      newLayers,\n      oldLayerMap,\n      generatedLayers\n    });\n\n    // Finalize unmatched layers\n    const error2 = this._finalizeOldLayers(oldLayerMap);\n\n    this._needsUpdate = generatedLayers.some(layer => layer.hasUniformTransition());\n\n    const firstError = error || error2;\n    return {error: firstError, generatedLayers};\n  }\n\n  /* eslint-disable complexity,max-statements */\n  // Note: adds generated layers to `generatedLayers` array parameter\n  _updateSublayersRecursively({newLayers, oldLayerMap, generatedLayers}) {\n    let error = null;\n\n    for (const newLayer of newLayers) {\n      newLayer.context = this.context;\n\n      // Given a new coming layer, find its matching old layer (if any)\n      const oldLayer = oldLayerMap[newLayer.id];\n      if (oldLayer === null) {\n        // null, rather than undefined, means this id was originally there\n        log.warn(`Multiple new layers with same id ${layerName(newLayer)}`)();\n      }\n      // Remove the old layer from candidates, as it has been matched with this layer\n      oldLayerMap[newLayer.id] = null;\n\n      let sublayers = null;\n\n      // We must not generate exceptions until after layer matching is complete\n      try {\n        if (this._debug && oldLayer !== newLayer) {\n          newLayer.validateProps();\n        }\n\n        if (!oldLayer) {\n          const err = this._initializeLayer(newLayer);\n          error = error || err;\n          initLayerInSeer(newLayer); // Initializes layer in seer chrome extension (if connected)\n        } else {\n          this._transferLayerState(oldLayer, newLayer);\n          const err = this._updateLayer(newLayer);\n          error = error || err;\n          updateLayerInSeer(newLayer); // Updates layer in seer chrome extension (if connected)\n        }\n        generatedLayers.push(newLayer);\n\n        // Call layer lifecycle method: render sublayers\n        sublayers = newLayer.isComposite && newLayer.getSubLayers();\n        // End layer lifecycle method: render sublayers\n      } catch (err) {\n        log.warn(`error during matching of ${layerName(newLayer)}`, err)();\n        error = error || err; // Record first exception\n      }\n\n      if (sublayers) {\n        const err = this._updateSublayersRecursively({\n          newLayers: sublayers,\n          oldLayerMap,\n          generatedLayers\n        });\n        error = error || err;\n      }\n    }\n\n    return error;\n  }\n  /* eslint-enable complexity,max-statements */\n\n  // Finalize any old layers that were not matched\n  _finalizeOldLayers(oldLayerMap) {\n    let error = null;\n    for (const layerId in oldLayerMap) {\n      const layer = oldLayerMap[layerId];\n      if (layer) {\n        error = error || this._finalizeLayer(layer);\n      }\n    }\n    return error;\n  }\n\n  // EXCEPTION SAFE LAYER ACCESS\n\n  // Initializes a single layer, calling layer methods\n  _initializeLayer(layer) {\n    log.log(LOG_PRIORITY_LIFECYCLE, `initializing ${layerName(layer)}`)();\n\n    let error = null;\n    try {\n      layer._initialize();\n      layer.lifecycle = LIFECYCLE.INITIALIZED;\n    } catch (err) {\n      log.warn(`error while initializing ${layerName(layer)}\\n`, err)();\n      error = error || err;\n      // TODO - what should the lifecycle state be here? LIFECYCLE.INITIALIZATION_FAILED?\n    }\n\n    // Set back pointer (used in picking)\n    layer.internalState.layer = layer;\n\n    // Save layer on model for picking purposes\n    // store on model.userData rather than directly on model\n    for (const model of layer.getModels()) {\n      model.userData.layer = layer;\n    }\n\n    return error;\n  }\n\n  _transferLayerState(oldLayer, newLayer) {\n    newLayer._transferState(oldLayer);\n    newLayer.lifecycle = LIFECYCLE.MATCHED;\n\n    if (newLayer !== oldLayer) {\n      log.log(\n        LOG_PRIORITY_LIFECYCLE_MINOR,\n        `matched ${layerName(newLayer)}`,\n        oldLayer,\n        '->',\n        newLayer\n      )();\n      oldLayer.lifecycle = LIFECYCLE.AWAITING_GC;\n    } else {\n      log.log(LOG_PRIORITY_LIFECYCLE_MINOR, `Matching layer is unchanged ${newLayer.id}`)();\n    }\n  }\n\n  // Updates a single layer, cleaning all flags\n  _updateLayer(layer) {\n    log.log(\n      LOG_PRIORITY_LIFECYCLE_MINOR,\n      `updating ${layer} because: ${layer.printChangeFlags()}`\n    )();\n    let error = null;\n    try {\n      layer._update();\n    } catch (err) {\n      log.warn(`error during update of ${layerName(layer)}`, err)();\n      // Save first error\n      error = err;\n    }\n    return error;\n  }\n\n  // Finalizes a single layer\n  _finalizeLayer(layer) {\n    assert(layer.lifecycle !== LIFECYCLE.AWAITING_FINALIZATION);\n    layer.lifecycle = LIFECYCLE.AWAITING_FINALIZATION;\n    let error = null;\n    this.setNeedsRedraw(`finalized ${layerName(layer)}`);\n    try {\n      layer._finalize();\n    } catch (err) {\n      log.warn(`error during finalization of ${layerName(layer)}`, err)();\n      error = err;\n    }\n    layer.lifecycle = LIFECYCLE.FINALIZED;\n    log.log(LOG_PRIORITY_LIFECYCLE, `finalizing ${layerName(layer)}`)();\n    return error;\n  }\n\n  // SEER INTEGRATION\n\n  /**\n   * Called upon Seer initialization, manually sends layers data.\n   */\n  _initSeer() {\n    this.layers.forEach(layer => {\n      initLayerInSeer(layer);\n      updateLayerInSeer(layer);\n    });\n  }\n\n  /**\n   * On Seer property edition, set override and update layers.\n   */\n  _editSeer(payload) {\n    if (payload.type !== 'edit' || payload.valuePath[0] !== 'props') {\n      return;\n    }\n\n    setPropOverrides(payload.itemKey, payload.valuePath.slice(1), payload.value);\n    this.updateLayers();\n  }\n}\n"],"file":"layer-manager.js"}