{"version":3,"sources":["../../../src/lib/deck-renderer.js"],"names":["log","DrawLayersPass","PickLayersPass","PostProcessEffect","Framebuffer","LOG_PRIORITY_DRAW","DeckRenderer","constructor","gl","layerFilter","drawPickingColors","drawLayersPass","pickLayersPass","renderCount","_needsRedraw","screenBuffer","offscreenBuffer","lastPostProcessEffect","setProps","props","renderLayers","layers","viewports","activateViewport","views","redrawReason","clearCanvas","effects","pass","stats","layerPass","effectProps","prepareEffects","onViewportActive","outputBuffer","getDefaultFramebuffer","renderStats","render","postRender","priority","forEach","status","logRenderStats","needsRedraw","opts","clearRedrawFlags","redraw","finalize","delete","params","effect","Object","assign","prepare","prepareRenderBuffers","resize","inputBuffer","target","totalCount","visibleCount","compositeCount","pickableCount","primitiveCount","hiddenCount","message","get","add"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,cAAhB;AACA,OAAOC,cAAP,MAA2B,4BAA3B;AACA,OAAOC,cAAP,MAA2B,4BAA3B;AACA,OAAOC,iBAAP,MAA8B,gCAA9B;AACA,SAAQC,WAAR,QAA0B,eAA1B;AAEA,MAAMC,iBAAiB,GAAG,CAA1B;AAEA,eAAe,MAAMC,YAAN,CAAmB;AAChCC,EAAAA,WAAW,CAACC,EAAD,EAAK;AACd,SAAKA,EAAL,GAAUA,EAAV;AACA,SAAKC,WAAL,GAAmB,IAAnB;AACA,SAAKC,iBAAL,GAAyB,KAAzB;AACA,SAAKC,cAAL,GAAsB,IAAIV,cAAJ,CAAmBO,EAAnB,CAAtB;AACA,SAAKI,cAAL,GAAsB,IAAIV,cAAJ,CAAmBM,EAAnB,CAAtB;AACA,SAAKK,WAAL,GAAmB,CAAnB;AACA,SAAKC,YAAL,GAAoB,gBAApB;AACA,SAAKC,YAAL,GAAoB,IAApB;AACA,SAAKC,eAAL,GAAuB,IAAvB;AACA,SAAKC,qBAAL,GAA6B,IAA7B;AACD;;AAEDC,EAAAA,QAAQ,CAACC,KAAD,EAAQ;AACd,QAAI,iBAAiBA,KAArB,EAA4B;AAC1B,UAAI,KAAKV,WAAL,KAAqBU,KAAK,CAACV,WAA/B,EAA4C;AAC1C,aAAKA,WAAL,GAAmBU,KAAK,CAACV,WAAzB;AACA,aAAKK,YAAL,GAAoB,qBAApB;AACD;AACF;;AAED,QAAI,uBAAuBK,KAA3B,EAAkC;AAChC,UAAI,KAAKT,iBAAL,KAA2BS,KAAK,CAACT,iBAArC,EAAwD;AACtD,aAAKA,iBAAL,GAAyBS,KAAK,CAACT,iBAA/B;AACA,aAAKI,YAAL,GAAoB,2BAApB;AACD;AACF;;AAED,UAAM;AAACL,MAAAA;AAAD,QAAgB,IAAtB;AAEA,SAAKE,cAAL,CAAoBO,QAApB,CAA6B;AAC3BT,MAAAA;AAD2B,KAA7B;AAGA,SAAKG,cAAL,CAAoBM,QAApB,CAA6B;AAC3BT,MAAAA;AAD2B,KAA7B;AAGD;;AAEDW,EAAAA,YAAY,CAAC;AACXC,IAAAA,MADW;AAEXC,IAAAA,SAFW;AAGXC,IAAAA,gBAHW;AAIXC,IAAAA,KAJW;AAKXC,IAAAA,YAAY,GAAG,gBALJ;AAMXC,IAAAA,WAAW,GAAG,IANH;AAOXC,IAAAA,OAAO,GAAG,EAPC;AAQXC,IAAAA,IARW;AASXC,IAAAA;AATW,GAAD,EAUT;AACD,UAAMC,SAAS,GAAG,KAAKpB,iBAAL,GAAyB,KAAKE,cAA9B,GAA+C,KAAKD,cAAtE;AACA,UAAMoB,WAAW,GAAG,KAAKC,cAAL,CAAoB;AACtCX,MAAAA,MADsC;AAEtCC,MAAAA,SAFsC;AAGtCW,MAAAA,gBAAgB,EAAEV,gBAHoB;AAItCC,MAAAA,KAJsC;AAKtCG,MAAAA;AALsC,KAApB,CAApB;AAOA,UAAMO,YAAY,GAAG,KAAKjB,qBAAL,GACjB,KAAKF,YADY,GAEjBX,WAAW,CAAC+B,qBAAZ,CAAkC,KAAK3B,EAAvC,CAFJ;AAIA,UAAM4B,WAAW,GAAGN,SAAS,CAACO,MAAV,CAAiB;AACnChB,MAAAA,MADmC;AAEnCC,MAAAA,SAFmC;AAGnCE,MAAAA,KAHmC;AAInCS,MAAAA,gBAAgB,EAAEV,gBAJiB;AAKnCE,MAAAA,YALmC;AAMnCC,MAAAA,WANmC;AAOnCC,MAAAA,OAPmC;AAQnCI,MAAAA,WARmC;AASnCG,MAAAA;AATmC,KAAjB,CAApB;AAYA,SAAKI,UAAL,CAAgBX,OAAhB;AAEA,SAAKd,WAAL;;AAEA,QAAIb,GAAG,CAACuC,QAAJ,IAAgBlC,iBAApB,EAAuC;AACrC+B,MAAAA,WAAW,CAACI,OAAZ,CAAoBC,MAAM,IAAI;AAC5B,aAAKC,cAAL,CAAoB;AAACD,UAAAA,MAAD;AAASb,UAAAA,IAAT;AAAeH,UAAAA,YAAf;AAA6BI,UAAAA,KAA7B;AAAoCO,UAAAA;AAApC,SAApB;AACD,OAFD;AAGD;AACF;;AAEDO,EAAAA,WAAW,CAACC,IAAI,GAAG;AAACC,IAAAA,gBAAgB,EAAE;AAAnB,GAAR,EAAmC;AAC5C,UAAMC,MAAM,GAAG,KAAKhC,YAApB;;AACA,QAAI8B,IAAI,CAACC,gBAAT,EAA2B;AACzB,WAAK/B,YAAL,GAAoB,KAApB;AACD;;AACD,WAAOgC,MAAP;AACD;;AAEDC,EAAAA,QAAQ,GAAG;AACT,QAAI,KAAKhC,YAAT,EAAuB;AACrB,WAAKA,YAAL,CAAkBiC,MAAlB;AACA,WAAKjC,YAAL,GAAoB,IAApB;AACD;;AACD,QAAI,KAAKC,eAAT,EAA0B;AACxB,WAAKA,eAAL,CAAqBgC,MAArB;AACA,WAAKhC,eAAL,GAAuB,IAAvB;AACD;AACF;;AAGDgB,EAAAA,cAAc,CAACiB,MAAD,EAAS;AACrB,UAAM;AAACtB,MAAAA;AAAD,QAAYsB,MAAlB;AACA,UAAMlB,WAAW,GAAG,EAApB;AACA,SAAKd,qBAAL,GAA6B,IAA7B;;AAEA,SAAK,MAAMiC,MAAX,IAAqBvB,OAArB,EAA8B;AAC5BwB,MAAAA,MAAM,CAACC,MAAP,CAAcrB,WAAd,EAA2BmB,MAAM,CAACG,OAAP,CAAe,KAAK7C,EAApB,EAAwByC,MAAxB,CAA3B;;AACA,UAAIC,MAAM,YAAY/C,iBAAtB,EAAyC;AACvC,aAAKc,qBAAL,GAA6BiC,MAA7B;AACD;AACF;;AAED,QAAI,KAAKjC,qBAAT,EAAgC;AAC9B,WAAKqC,oBAAL;AACD;;AAED,WAAOvB,WAAP;AACD;;AAEDuB,EAAAA,oBAAoB,GAAG;AACrB,QAAI,CAAC,KAAKvC,YAAV,EAAwB;AACtB,WAAKA,YAAL,GAAoB,IAAIX,WAAJ,CAAgB,KAAKI,EAArB,CAApB;AACD;;AACD,SAAKO,YAAL,CAAkBwC,MAAlB;;AAEA,QAAI,CAAC,KAAKvC,eAAV,EAA2B;AACzB,WAAKA,eAAL,GAAuB,IAAIZ,WAAJ,CAAgB,KAAKI,EAArB,CAAvB;AACD;;AACD,SAAKQ,eAAL,CAAqBuC,MAArB;AACD;;AAEDjB,EAAAA,UAAU,CAACX,OAAD,EAAU;AAClB,QAAIsB,MAAM,GAAG;AAACO,MAAAA,WAAW,EAAE,KAAKzC,YAAnB;AAAiCmB,MAAAA,YAAY,EAAE,KAAKlB,eAApD;AAAqEyC,MAAAA,MAAM,EAAE;AAA7E,KAAb;;AACA,SAAK,MAAMP,MAAX,IAAqBvB,OAArB,EAA8B;AAC5B,UAAIuB,MAAM,YAAY/C,iBAAtB,EAAyC;AACvC,YAAI+C,MAAM,KAAK,KAAKjC,qBAApB,EAA2C;AACzCkC,UAAAA,MAAM,CAACC,MAAP,CAAcH,MAAd,EAAsB;AAACQ,YAAAA,MAAM,EAAErD,WAAW,CAAC+B,qBAAZ,CAAkC,KAAK3B,EAAvC;AAAT,WAAtB;AACAyC,UAAAA,MAAM,GAAGC,MAAM,CAACb,MAAP,CAAcY,MAAd,CAAT;AACA;AACD;;AACDA,QAAAA,MAAM,GAAGC,MAAM,CAACb,MAAP,CAAcY,MAAd,CAAT;AACD;AACF;AACF;;AAEDP,EAAAA,cAAc,CAAC;AAACN,IAAAA,WAAD;AAAcR,IAAAA,IAAd;AAAoBH,IAAAA,YAApB;AAAkCI,IAAAA;AAAlC,GAAD,EAA2C;AACvD,UAAM;AAAC6B,MAAAA,UAAD;AAAaC,MAAAA,YAAb;AAA2BC,MAAAA,cAA3B;AAA2CC,MAAAA;AAA3C,QAA4DzB,WAAlE;AACA,UAAM0B,cAAc,GAAGJ,UAAU,GAAGE,cAApC;AACA,UAAMG,WAAW,GAAGD,cAAc,GAAGH,YAArC;AAEA,QAAIK,OAAO,GAAG,EAAd;AACAA,IAAAA,OAAO,sBAAe,KAAKnD,WAApB,cACT8C,YADS,kBACWD,UADX,yBACoC9B,IADpC,sBACoDH,YADpD,MAAP;;AAEA,QAAIzB,GAAG,CAACuC,QAAJ,GAAelC,iBAAnB,EAAsC;AACpC2D,MAAAA,OAAO,eACVD,WADU,sBACaH,cADb,wBACyCC,aADzC,eAAP;AAED;;AAED7D,IAAAA,GAAG,CAACA,GAAJ,CAAQK,iBAAR,EAA2B2D,OAA3B;;AAEA,QAAInC,KAAJ,EAAW;AACTA,MAAAA,KAAK,CAACoC,GAAN,CAAU,eAAV,EAA2BC,GAA3B,CAA+BP,YAA/B;AACD;AACF;;AAxK+B","sourcesContent":["import log from '../utils/log';\nimport DrawLayersPass from '../passes/draw-layers-pass';\nimport PickLayersPass from '../passes/pick-layers-pass';\nimport PostProcessEffect from '../effects/post-process-effect';\nimport {Framebuffer} from '@luma.gl/core';\n\nconst LOG_PRIORITY_DRAW = 2;\n\nexport default class DeckRenderer {\n  constructor(gl) {\n    this.gl = gl;\n    this.layerFilter = null;\n    this.drawPickingColors = false;\n    this.drawLayersPass = new DrawLayersPass(gl);\n    this.pickLayersPass = new PickLayersPass(gl);\n    this.renderCount = 0;\n    this._needsRedraw = 'Initial render';\n    this.screenBuffer = null;\n    this.offscreenBuffer = null;\n    this.lastPostProcessEffect = null;\n  }\n\n  setProps(props) {\n    if ('layerFilter' in props) {\n      if (this.layerFilter !== props.layerFilter) {\n        this.layerFilter = props.layerFilter;\n        this._needsRedraw = 'layerFilter changed';\n      }\n    }\n\n    if ('drawPickingColors' in props) {\n      if (this.drawPickingColors !== props.drawPickingColors) {\n        this.drawPickingColors = props.drawPickingColors;\n        this._needsRedraw = 'drawPickingColors changed';\n      }\n    }\n\n    const {layerFilter} = this;\n\n    this.drawLayersPass.setProps({\n      layerFilter\n    });\n    this.pickLayersPass.setProps({\n      layerFilter\n    });\n  }\n\n  renderLayers({\n    layers,\n    viewports,\n    activateViewport,\n    views,\n    redrawReason = 'unknown reason',\n    clearCanvas = true,\n    effects = [],\n    pass,\n    stats\n  }) {\n    const layerPass = this.drawPickingColors ? this.pickLayersPass : this.drawLayersPass;\n    const effectProps = this.prepareEffects({\n      layers,\n      viewports,\n      onViewportActive: activateViewport,\n      views,\n      effects\n    });\n    const outputBuffer = this.lastPostProcessEffect\n      ? this.screenBuffer\n      : Framebuffer.getDefaultFramebuffer(this.gl);\n\n    const renderStats = layerPass.render({\n      layers,\n      viewports,\n      views,\n      onViewportActive: activateViewport,\n      redrawReason,\n      clearCanvas,\n      effects,\n      effectProps,\n      outputBuffer\n    });\n\n    this.postRender(effects);\n\n    this.renderCount++;\n\n    if (log.priority >= LOG_PRIORITY_DRAW) {\n      renderStats.forEach(status => {\n        this.logRenderStats({status, pass, redrawReason, stats, renderStats});\n      });\n    }\n  }\n\n  needsRedraw(opts = {clearRedrawFlags: false}) {\n    const redraw = this._needsRedraw;\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n    return redraw;\n  }\n\n  finalize() {\n    if (this.screenBuffer) {\n      this.screenBuffer.delete();\n      this.screenBuffer = null;\n    }\n    if (this.offscreenBuffer) {\n      this.offscreenBuffer.delete();\n      this.offscreenBuffer = null;\n    }\n  }\n\n  // Private\n  prepareEffects(params) {\n    const {effects} = params;\n    const effectProps = {};\n    this.lastPostProcessEffect = null;\n\n    for (const effect of effects) {\n      Object.assign(effectProps, effect.prepare(this.gl, params));\n      if (effect instanceof PostProcessEffect) {\n        this.lastPostProcessEffect = effect;\n      }\n    }\n\n    if (this.lastPostProcessEffect) {\n      this.prepareRenderBuffers();\n    }\n\n    return effectProps;\n  }\n\n  prepareRenderBuffers() {\n    if (!this.screenBuffer) {\n      this.screenBuffer = new Framebuffer(this.gl);\n    }\n    this.screenBuffer.resize();\n\n    if (!this.offscreenBuffer) {\n      this.offscreenBuffer = new Framebuffer(this.gl);\n    }\n    this.offscreenBuffer.resize();\n  }\n\n  postRender(effects) {\n    let params = {inputBuffer: this.screenBuffer, outputBuffer: this.offscreenBuffer, target: null};\n    for (const effect of effects) {\n      if (effect instanceof PostProcessEffect) {\n        if (effect === this.lastPostProcessEffect) {\n          Object.assign(params, {target: Framebuffer.getDefaultFramebuffer(this.gl)});\n          params = effect.render(params);\n          break;\n        }\n        params = effect.render(params);\n      }\n    }\n  }\n\n  logRenderStats({renderStats, pass, redrawReason, stats}) {\n    const {totalCount, visibleCount, compositeCount, pickableCount} = renderStats;\n    const primitiveCount = totalCount - compositeCount;\n    const hiddenCount = primitiveCount - visibleCount;\n\n    let message = '';\n    message += `RENDER #${this.renderCount} \\\n${visibleCount} (of ${totalCount} layers) to ${pass} because ${redrawReason} `;\n    if (log.priority > LOG_PRIORITY_DRAW) {\n      message += `\\\n(${hiddenCount} hidden, ${compositeCount} composite ${pickableCount} pickable)`;\n    }\n\n    log.log(LOG_PRIORITY_DRAW, message)();\n\n    if (stats) {\n      stats.get('Redraw Layers').add(visibleCount);\n    }\n  }\n}\n"],"file":"deck-renderer.js"}