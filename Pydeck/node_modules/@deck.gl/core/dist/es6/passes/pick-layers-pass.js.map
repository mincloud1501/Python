{"version":3,"sources":["../../../src/passes/pick-layers-pass.js"],"names":["LayersPass","withParameters","cssToDeviceRatio","PickLayersPass","render","props","pickingFBO","drawPickingBuffer","layers","viewports","onViewportActive","effectProps","deviceRect","x","y","width","height","redrawReason","gl","framebuffer","scissorTest","scissor","clearColor","drawLayers","pass","parameters","blend","blendFunc","blendEquation","blendColor","depthMask","depthTest","depthRange","colorMask","shouldDrawLayer","layer","viewport","layerFilter","isComposite","visible","pickable","isPicking","getModuleParameters","effects","moduleParameters","Object","assign","create","context","pickingActive","devicePixelRatio","getLayerParameters","layerIndex","glViewport","layerParameters"],"mappings":"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","sourcesContent":["import LayersPass from './layers-pass';\nimport {withParameters, cssToDeviceRatio} from '@luma.gl/core';\n\nexport default class PickLayersPass extends LayersPass {\n  render(props) {\n    if (props.pickingFBO) {\n      this.drawPickingBuffer(props);\n    } else {\n      super.render(props);\n    }\n  }\n\n  // Private\n  // Draws list of layers and viewports into the picking buffer\n  // Note: does not sample the buffer, that has to be done by the caller\n  drawPickingBuffer({\n    layers,\n    viewports,\n    onViewportActive,\n    pickingFBO,\n    effectProps,\n    deviceRect: {x, y, width, height},\n    redrawReason = ''\n  }) {\n    const gl = this.gl;\n    // Make sure we clear scissor test and fbo bindings in case of exceptions\n    // We are only interested in one pixel, no need to render anything else\n    // Note that the callback here is called synchronously.\n    // Set blend mode for picking\n    // always overwrite existing pixel with [r,g,b,layerIndex]\n    return withParameters(\n      gl,\n      {\n        framebuffer: pickingFBO,\n        scissorTest: true,\n        scissor: [x, y, width, height],\n        clearColor: [0, 0, 0, 0]\n      },\n      () => {\n        this.drawLayers({\n          layers,\n          viewports,\n          onViewportActive,\n          pass: 'picking',\n          redrawReason,\n          effectProps,\n          parameters: {\n            blend: true,\n            blendFunc: [gl.ONE, gl.ZERO, gl.CONSTANT_ALPHA, gl.ZERO],\n            blendEquation: gl.FUNC_ADD,\n            blendColor: [0, 0, 0, 0],\n\n            // When used as Mapbox custom layer, the context state may be dirty\n            // TODO - Remove when mapbox fixes this issue\n            // https://github.com/mapbox/mapbox-gl-js/issues/7801\n            depthMask: true,\n            depthTest: true,\n            depthRange: [0, 1],\n            colorMask: [true, true, true, true]\n          }\n        });\n      }\n    );\n  }\n\n  // PRIVATE\n  shouldDrawLayer(layer, viewport) {\n    const layerFilter = this.props.layerFilter;\n    let shouldDrawLayer = !layer.isComposite && layer.props.visible && layer.props.pickable;\n\n    if (shouldDrawLayer && layerFilter) {\n      shouldDrawLayer = layerFilter({layer, viewport, isPicking: true});\n    }\n    return shouldDrawLayer;\n  }\n\n  getModuleParameters(layer, effects, effectProps) {\n    const moduleParameters = Object.assign(Object.create(layer.props), {\n      viewport: layer.context.viewport,\n      pickingActive: 1,\n      devicePixelRatio: cssToDeviceRatio(this.gl)\n    });\n\n    Object.assign(moduleParameters, effectProps);\n    return moduleParameters;\n  }\n\n  getLayerParameters(layer, layerIndex, glViewport, parameters) {\n    // All parameter resolving is done here instead of the layer\n    // Blend parameters must not be overridden\n    const layerParameters = Object.assign({}, layer.props.parameters || {}, parameters);\n\n    Object.assign(layerParameters, {\n      viewport: glViewport,\n      blendColor: [0, 0, 0, (layerIndex + 1) / 255]\n    });\n\n    return layerParameters;\n  }\n}\n"],"file":"pick-layers-pass.js"}