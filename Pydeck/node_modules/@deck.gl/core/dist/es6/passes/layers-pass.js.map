{"version":3,"sources":["../../../src/passes/layers-pass.js"],"names":["Pass","clear","setParameters","withParameters","cssToDeviceRatio","LayersPass","render","params","gl","framebuffer","outputBuffer","drawLayers","layers","viewports","views","onViewportActive","deviceRect","parameters","pass","redrawReason","clearCanvas","effects","effectProps","renderStats","forEach","viewportOrDescriptor","i","viewport","getViewportFromDescriptor","view","id","stats","drawLayersInViewport","push","glViewport","getGLViewport","props","clearOpts","color","depth","scissorTest","scissor","renderStatus","totalCount","length","visibleCount","compositeCount","pickableCount","layer","layerIndex","shouldDrawLayer","pickable","isComposite","drawLayerInViewport","moduleParameters","getModuleParameters","uniforms","Object","assign","context","layerParameters","getLayerParameters","drawLayer","layerFilter","visible","isPicking","create","mousePosition","pickingActive","devicePixelRatio","height","canvas","clientHeight","dimensions","pixelRatio","x","y","width","drawingBufferWidth","drawingBufferHeight"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport Pass from './pass';\nimport {clear, setParameters, withParameters, cssToDeviceRatio} from '@luma.gl/core';\n\nexport default class LayersPass extends Pass {\n  render(params) {\n    const gl = this.gl;\n\n    return withParameters(gl, {framebuffer: params.outputBuffer}, () => this.drawLayers(params));\n  }\n\n  // PRIVATE\n  // Draw a list of layers in a list of viewports\n  drawLayers({\n    layers,\n    viewports,\n    views,\n    onViewportActive,\n    deviceRect = null,\n    parameters = {},\n    pass = 'draw',\n    redrawReason = '',\n    clearCanvas = true,\n    effects,\n    effectProps\n  }) {\n    const gl = this.gl;\n    if (clearCanvas) {\n      this.clearCanvas(gl);\n    }\n\n    const renderStats = [];\n\n    viewports.forEach((viewportOrDescriptor, i) => {\n      const viewport = this.getViewportFromDescriptor(viewportOrDescriptor);\n      const view = views && views[viewport.id];\n\n      // Update context to point to this viewport\n      onViewportActive(viewport);\n\n      // render this viewport\n      const stats = this.drawLayersInViewport(gl, {\n        layers,\n        viewport,\n        view,\n        deviceRect,\n        parameters,\n        pass,\n        redrawReason,\n        effects,\n        effectProps\n      });\n      renderStats.push(stats);\n    });\n    return renderStats;\n  }\n\n  // Draws a list of layers in one viewport\n  // TODO - when picking we could completely skip rendering viewports that dont\n  // intersect with the picking rect\n  drawLayersInViewport(\n    gl,\n    {\n      layers,\n      viewport,\n      view,\n      deviceRect = null,\n      parameters = {},\n      pass = 'draw',\n      redrawReason = '',\n      effects,\n      effectProps\n    }\n  ) {\n    const glViewport = this.getGLViewport(gl, {viewport});\n\n    if (view && view.props.clear) {\n      const clearOpts = view.props.clear === true ? {color: true, depth: true} : view.props.clear;\n      withParameters(\n        gl,\n        {\n          scissorTest: true,\n          scissor: glViewport\n        },\n        () => clear(gl, clearOpts)\n      );\n    }\n\n    // render layers in normal colors\n    const renderStatus = {\n      totalCount: layers.length,\n      visibleCount: 0,\n      compositeCount: 0,\n      pickableCount: 0\n    };\n\n    setParameters(gl, parameters || {});\n\n    // render layers in normal colors\n    layers.forEach((layer, layerIndex) => {\n      // Check if we should draw layer\n      const shouldDrawLayer = this.shouldDrawLayer(layer, viewport);\n\n      // Calculate stats\n      if (shouldDrawLayer && layer.props.pickable) {\n        renderStatus.pickableCount++;\n      }\n      if (layer.isComposite) {\n        renderStatus.compositeCount++;\n      }\n\n      // Draw the layer\n      if (shouldDrawLayer) {\n        renderStatus.visibleCount++;\n\n        this.drawLayerInViewport({\n          gl,\n          layer,\n          layerIndex,\n          glViewport,\n          parameters,\n          effects,\n          effectProps\n        });\n      }\n    });\n\n    return renderStatus;\n  }\n\n  drawLayerInViewport({gl, layer, layerIndex, glViewport, parameters, effects, effectProps}) {\n    const moduleParameters = this.getModuleParameters(layer, effects, effectProps);\n    const uniforms = Object.assign({}, layer.context.uniforms, {layerIndex});\n    const layerParameters = this.getLayerParameters(layer, layerIndex, glViewport, parameters);\n\n    layer.drawLayer({\n      moduleParameters,\n      uniforms,\n      parameters: layerParameters\n    });\n  }\n\n  // Get a viewport from a viewport descriptor (which can be a plain viewport)\n  getViewportFromDescriptor(viewportOrDescriptor) {\n    return viewportOrDescriptor.viewport ? viewportOrDescriptor.viewport : viewportOrDescriptor;\n  }\n\n  shouldDrawLayer(layer, viewport) {\n    const layerFilter = this.props.layerFilter;\n    let shouldDrawLayer = !layer.isComposite && layer.props.visible;\n\n    if (shouldDrawLayer && layerFilter) {\n      shouldDrawLayer = layerFilter({layer, viewport, isPicking: false});\n    }\n    return shouldDrawLayer;\n  }\n\n  getModuleParameters(layer) {\n    const moduleParameters = Object.assign(Object.create(layer.props), {\n      viewport: layer.context.viewport,\n      mousePosition: layer.context.mousePosition,\n      pickingActive: 0,\n      devicePixelRatio: cssToDeviceRatio(this.gl)\n    });\n    return moduleParameters;\n  }\n\n  getLayerParameters(layer, layerIndex, glViewport, parameters) {\n    // All parameter resolving is done here instead of the layer\n    // Blend parameters must not be overridden\n    const layerParameters = Object.assign({}, layer.props.parameters || {}, parameters);\n\n    Object.assign(layerParameters, {\n      viewport: glViewport\n    });\n    return layerParameters;\n  }\n\n  // Convert viewport top-left CSS coordinates to bottom up WebGL coordinates\n  getGLViewport(gl, {viewport}) {\n    // TODO - dummy default for node\n    // Fallback to width/height when clientWidth/clientHeight are 0 or undefined.\n    const height = gl.canvas ? gl.canvas.clientHeight || gl.canvas.height : 100;\n    // Convert viewport top-left CSS coordinates to bottom up WebGL coordinates\n    const dimensions = viewport;\n    const pixelRatio = cssToDeviceRatio(this.gl);\n    return [\n      dimensions.x * pixelRatio,\n      (height - dimensions.y - dimensions.height) * pixelRatio,\n      dimensions.width * pixelRatio,\n      dimensions.height * pixelRatio\n    ];\n  }\n\n  clearCanvas(gl) {\n    const width = gl.drawingBufferWidth;\n    const height = gl.drawingBufferHeight;\n    // clear depth and color buffers, restoring transparency\n    withParameters(gl, {viewport: [0, 0, width, height]}, () => {\n      gl.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n    });\n  }\n}\n"],"file":"layers-pass.js"}