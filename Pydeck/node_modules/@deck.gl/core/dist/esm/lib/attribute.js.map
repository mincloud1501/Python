{"version":3,"sources":["../../../src/lib/attribute.js"],"names":["Buffer","assert","createIterable","fillArray","range","log","BaseAttribute","typedArrayManager","toDoublePrecisionArray","normalizeTransitionSettings","DEFAULT_STATE","isExternalBuffer","lastExternalBuffer","allocatedValue","needsUpdate","needsRedraw","updateRanges","FULL","addDoublePrecisionAttributes","attribute","shaderAttributeDefs","doubleShaderAttributeDefs","shaderAttributeName","def","offset","stride","size","Object","assign","Attribute","gl","opts","logicalType","type","doublePrecision","transition","noAlloc","update","accessor","transform","bufferLayout","defaultValue","Array","isArray","defaultType","shaderAttributes","hasShaderAttributes","fp64","id","shaderAttributeNames","keys","shaderAttribute","normalized","integer","divisor","buffer","getBuffer","userData","_standardAccessor","seal","_validateAttributeUpdaters","release","clearChangedFlags","concat","isBuffer64Bit","value","Float64Array","shaderAttributeLowPartName","Float32Array","Boolean","layerSettings","supportsTransition","userSettings","find","a","reason","dataRange","startRow","endRow","Infinity","add","EMPTY","numInstances","state","Number","isFinite","allocCount","Math","max","ArrayType","glArrayFromType","oldValue","shouldCopy","constant","allocate","padding","elementOffset","copy","byteLength","reallocate","subData","data","props","context","updated","call","attributeValue","startOffset","getVertexOffset","endOffset","length","startIndex","endIndex","subarray","BYTES_PER_ELEMENT","_checkAttributeArray","_updateShaderAttributes","clearNeedsUpdate","undefined","_normalizeValue","hasChanged","_areValuesEqual","ArrayBuffer","isView","_checkExternalBuffer","originalValue","illegalArrayType","values","some","Error","constructor","name","warn","row","index","geometrySize","out","start","value1","value2","i","accessorFunc","iterable","objectInfo","object","objectValue","target","numVertices","source","count","hasUpdater","valid","layout","glType","Uint16Array","Uint32Array","Uint8ClampedArray","Int8Array","Int16Array","Int32Array"],"mappings":"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","sourcesContent":["/* eslint-disable complexity */\nimport GL from '@luma.gl/constants';\nimport {Buffer} from '@luma.gl/core';\nimport assert from '../utils/assert';\nimport {createIterable} from '../utils/iterable-utils';\nimport {fillArray} from '../utils/flatten';\nimport * as range from '../utils/range';\nimport log from '../utils/log';\nimport BaseAttribute from './base-attribute';\nimport typedArrayManager from '../utils/typed-array-manager';\nimport {toDoublePrecisionArray} from '../utils/math-utils';\nimport {normalizeTransitionSettings} from './attribute-transition-utils';\n\nconst DEFAULT_STATE = {\n  isExternalBuffer: false,\n  lastExternalBuffer: null,\n  allocatedValue: null,\n  needsUpdate: true,\n  needsRedraw: false,\n  updateRanges: range.FULL\n};\n\nfunction addDoublePrecisionAttributes(attribute, shaderAttributeDefs) {\n  const doubleShaderAttributeDefs = {};\n  for (const shaderAttributeName in shaderAttributeDefs) {\n    const def = shaderAttributeDefs[shaderAttributeName];\n    const offset = 'offset' in def ? def.offset : attribute.offset;\n    const stride = 'stride' in def ? def.stride : attribute.size * 4;\n\n    doubleShaderAttributeDefs[`${shaderAttributeName}32`] = Object.assign({}, def, {\n      offset,\n      stride\n    });\n    doubleShaderAttributeDefs[`${shaderAttributeName}64`] = Object.assign({}, def, {\n      offset: offset * 2,\n      stride: stride * 2\n    });\n    doubleShaderAttributeDefs[`${shaderAttributeName}64xyLow`] = Object.assign({}, def, {\n      offset: offset * 2 + stride,\n      stride: stride * 2\n    });\n  }\n  return doubleShaderAttributeDefs;\n}\n\nexport default class Attribute extends BaseAttribute {\n  constructor(gl, opts = {}) {\n    const logicalType = opts.type;\n    const doublePrecision = logicalType === GL.DOUBLE;\n\n    // DOUBLE is not a valid WebGL buffer type\n    // tell BaseAttribute to set the accessor type to FLOAT\n    super(gl, doublePrecision ? {...opts, type: GL.FLOAT} : opts);\n\n    const {\n      // deck.gl fields\n      transition = false,\n      noAlloc = false,\n      update = null,\n      accessor = null,\n      transform = null,\n      bufferLayout = null\n    } = opts;\n\n    let {defaultValue = [0, 0, 0, 0]} = opts;\n    defaultValue = Array.isArray(defaultValue) ? defaultValue : [defaultValue];\n\n    // This is the attribute type defined by the layer\n    // If an external buffer is provided, this.type may be overwritten\n    // But we always want to use defaultType for allocation\n    this.defaultType = logicalType || this.type || GL.FLOAT;\n    this.shaderAttributes = {};\n    this.hasShaderAttributes = false;\n    this.doublePrecision = doublePrecision;\n\n    // `fp64: false` tells a double-precision attribute to allocate Float32Arrays\n    // by default when using auto-packing. This is more efficient in use cases where\n    // high precision is unnecessary, but the `64xyLow` attribute is still required\n    // by the shader.\n    if (doublePrecision && opts.fp64 === false) {\n      this.defaultType = GL.FLOAT;\n    }\n\n    let shaderAttributes = opts.shaderAttributes || (doublePrecision && {[this.id]: {}});\n\n    if (shaderAttributes) {\n      const shaderAttributeNames = Object.keys(shaderAttributes);\n      shaderAttributes = doublePrecision\n        ? addDoublePrecisionAttributes(this, shaderAttributes)\n        : shaderAttributes;\n      for (const shaderAttributeName in shaderAttributes) {\n        const shaderAttribute = shaderAttributes[shaderAttributeName];\n\n        // Initialize the attribute descriptor, with WebGL and metadata fields\n        this.shaderAttributes[shaderAttributeName] = new BaseAttribute(\n          this.gl,\n          Object.assign(\n            {\n              size: this.size,\n              normalized: this.normalized,\n              integer: this.integer,\n              offset: this.offset,\n              stride: this.stride,\n              divisor: this.divisor\n            },\n            shaderAttribute,\n            {\n              id: shaderAttributeName,\n              buffer: this.getBuffer()\n            }\n          )\n        );\n\n        this.hasShaderAttributes = shaderAttributeNames;\n      }\n    }\n\n    Object.assign(this.userData, DEFAULT_STATE, opts, {\n      transition,\n      noAlloc,\n      update: update || (accessor && this._standardAccessor),\n      accessor,\n      transform,\n      defaultValue,\n      bufferLayout\n    });\n\n    Object.seal(this.userData);\n\n    // Check all fields and generate helpful error messages\n    this._validateAttributeUpdaters();\n  }\n\n  get bufferLayout() {\n    return this.userData.bufferLayout;\n  }\n\n  set bufferLayout(layout) {\n    this.userData.bufferLayout = layout;\n  }\n\n  delete() {\n    super.delete();\n    typedArrayManager.release(this.userData.allocatedValue);\n  }\n\n  needsUpdate() {\n    return this.userData.needsUpdate;\n  }\n\n  needsRedraw({clearChangedFlags = false} = {}) {\n    const needsRedraw = this.userData.needsRedraw;\n    this.userData.needsRedraw = this.userData.needsRedraw && !clearChangedFlags;\n    return needsRedraw;\n  }\n\n  getUpdateTriggers() {\n    const {accessor} = this.userData;\n\n    // Backards compatibility: allow attribute name to be used as update trigger key\n    return [this.id].concat((typeof accessor !== 'function' && accessor) || []);\n  }\n\n  getAccessor() {\n    return this.userData.accessor;\n  }\n\n  getShaderAttributes() {\n    const shaderAttributes = {};\n    if (this.doublePrecision) {\n      const isBuffer64Bit = this.value instanceof Float64Array;\n      for (const shaderAttributeName of this.hasShaderAttributes) {\n        shaderAttributes[shaderAttributeName] = this.shaderAttributes[\n          isBuffer64Bit ? `${shaderAttributeName}64` : `${shaderAttributeName}32`\n        ];\n        const shaderAttributeLowPartName = `${shaderAttributeName}64xyLow`;\n        shaderAttributes[shaderAttributeLowPartName] = isBuffer64Bit\n          ? this.shaderAttributes[shaderAttributeLowPartName]\n          : new Float32Array(this.size); // use constant for low part if buffer is 32-bit\n      }\n    } else if (this.hasShaderAttributes) {\n      Object.assign(shaderAttributes, this.shaderAttributes);\n    } else {\n      shaderAttributes[this.id] = this;\n    }\n\n    return shaderAttributes;\n  }\n\n  supportsTransition() {\n    return Boolean(this.userData.transition);\n  }\n\n  // Resolve transition settings object if transition is enabled, otherwise `null`\n  getTransitionSetting(opts) {\n    const {accessor} = this.userData;\n    // `userData` is a bit of a misnomer here, these are the transition settings defined by\n    // the layer itself, not the layer's user\n    // TODO: have the layer resolve these transition settings itself?\n    const layerSettings = this.userData.transition;\n    if (!this.supportsTransition()) {\n      return null;\n    }\n    // these are the transition settings passed in by the user\n    const userSettings = Array.isArray(accessor)\n      ? opts[accessor.find(a => opts[a])]\n      : opts[accessor];\n\n    // Shorthand: use duration instead of parameter object\n    return normalizeTransitionSettings(userSettings, layerSettings);\n  }\n\n  setNeedsUpdate(reason = this.id, dataRange) {\n    this.userData.needsUpdate = this.userData.needsUpdate || reason;\n    if (dataRange) {\n      const {startRow = 0, endRow = Infinity} = dataRange;\n      this.userData.updateRanges = range.add(this.userData.updateRanges, [startRow, endRow]);\n    } else {\n      this.userData.updateRanges = range.FULL;\n    }\n  }\n\n  clearNeedsUpdate() {\n    this.userData.needsUpdate = false;\n    this.userData.updateRanges = range.EMPTY;\n  }\n\n  setNeedsRedraw(reason = this.id) {\n    this.userData.needsRedraw = this.userData.needsRedraw || reason;\n  }\n\n  allocate(numInstances) {\n    const state = this.userData;\n\n    if (state.isExternalBuffer || state.noAlloc) {\n      // Data is provided through a Buffer object.\n      return false;\n    }\n\n    if (state.update) {\n      assert(Number.isFinite(numInstances));\n      // Allocate at least one element to ensure a valid buffer\n      const allocCount = Math.max(numInstances, 1);\n      const ArrayType = glArrayFromType(this.defaultType);\n      const oldValue = state.allocatedValue;\n      const shouldCopy = state.updateRanges !== range.FULL;\n\n      this.constant = false;\n      this.value = typedArrayManager.allocate(oldValue, allocCount, {\n        size: this.size,\n        type: ArrayType,\n        padding: this.elementOffset,\n        copy: shouldCopy\n      });\n\n      if (this.buffer && this.buffer.byteLength < this.value.byteLength) {\n        this.buffer.reallocate(this.value.byteLength);\n\n        if (shouldCopy && oldValue) {\n          // Upload the full existing attribute value to the GPU, so that updateBuffer\n          // can choose to only update a partial range.\n          // TODO - copy old buffer to new buffer on the GPU\n          this.buffer.subData({\n            data:\n              oldValue instanceof Float64Array\n                ? toDoublePrecisionArray(oldValue, {size: this.size})\n                : oldValue\n          });\n        }\n      }\n\n      state.allocatedValue = this.value;\n      return true;\n    }\n\n    return false;\n  }\n\n  updateBuffer({numInstances, bufferLayout, data, props, context}) {\n    if (!this.needsUpdate()) {\n      return false;\n    }\n\n    const state = this.userData;\n\n    const {update, updateRanges, noAlloc} = state;\n\n    let updated = true;\n    if (update) {\n      // Custom updater - typically for non-instanced layers\n      for (const [startRow, endRow] of updateRanges) {\n        update.call(context, this, {data, startRow, endRow, props, numInstances, bufferLayout});\n      }\n      const doublePrecision = this.doublePrecision && this.value instanceof Float64Array;\n      if (this.constant || !this.buffer || this.buffer.byteLength < this.value.byteLength) {\n        const attributeValue = this.value;\n        // call base clas `update` method to upload value to GPU\n        this.update({\n          value: doublePrecision ? toDoublePrecisionArray(attributeValue, this) : attributeValue,\n          constant: this.constant\n        });\n        // Save the 64-bit version\n        this.value = attributeValue;\n      } else {\n        for (const [startRow, endRow] of updateRanges) {\n          const startOffset = Number.isFinite(startRow) ? this.getVertexOffset(startRow) : 0;\n          const endOffset = Number.isFinite(endRow)\n            ? this.getVertexOffset(endRow)\n            : noAlloc || !Number.isFinite(numInstances)\n              ? this.value.length\n              : numInstances * this.size;\n\n          // Only update the changed part of the attribute\n          this.buffer.subData({\n            data: doublePrecision\n              ? toDoublePrecisionArray(this.value, {\n                  size: this.size,\n                  startIndex: startOffset,\n                  endIndex: endOffset\n                })\n              : this.value.subarray(startOffset, endOffset),\n            offset: startOffset * this.value.BYTES_PER_ELEMENT\n          });\n        }\n      }\n      this._checkAttributeArray();\n    } else {\n      updated = false;\n    }\n\n    this._updateShaderAttributes();\n\n    this.clearNeedsUpdate();\n    state.needsRedraw = true;\n\n    return updated;\n  }\n\n  update(props) {\n    super.update(props);\n    this._updateShaderAttributes();\n  }\n\n  // Use generic value\n  // Returns true if successful\n  setConstantValue(value) {\n    const state = this.userData;\n\n    if (value === undefined || typeof value === 'function') {\n      // ignore if this attribute has no accessor\n      // ignore if accessor is function, will be used in updateBuffer\n      state.isExternalBuffer = false;\n      return false;\n    }\n\n    value = this._normalizeValue(value);\n    const hasChanged = !this.constant || !this._areValuesEqual(value, this.value);\n\n    if (hasChanged) {\n      this.update({constant: true, value});\n    }\n    state.needsRedraw = state.needsUpdate || hasChanged;\n    this.clearNeedsUpdate();\n    state.isExternalBuffer = true;\n    return true;\n  }\n\n  // Use external buffer\n  // Returns true if successful\n  // eslint-disable-next-line max-statements\n  setExternalBuffer(buffer) {\n    const state = this.userData;\n\n    if (!buffer) {\n      state.isExternalBuffer = false;\n      state.lastExternalBuffer = null;\n      return false;\n    }\n\n    this.clearNeedsUpdate();\n\n    if (state.lastExternalBuffer === buffer) {\n      return true;\n    }\n    state.isExternalBuffer = true;\n    state.lastExternalBuffer = buffer;\n\n    let opts;\n    if (ArrayBuffer.isView(buffer)) {\n      opts = {constant: false, value: buffer};\n    } else if (buffer instanceof Buffer) {\n      opts = {constant: false, buffer};\n    } else {\n      opts = Object.assign({constant: false}, buffer);\n    }\n\n    this._checkExternalBuffer(opts);\n\n    if (this.doublePrecision && opts.value instanceof Float64Array) {\n      opts.originalValue = opts.value;\n      opts.value = toDoublePrecisionArray(opts.value, this);\n    }\n\n    this.update(opts);\n\n    state.needsRedraw = true;\n    if (opts.originalValue) {\n      this.value = opts.originalValue;\n    }\n\n    return true;\n  }\n\n  // PRIVATE HELPER METHODS\n  _checkExternalBuffer(opts) {\n    const {value} = opts;\n    if (!opts.constant && value) {\n      const ArrayType = glArrayFromType(this.defaultType);\n\n      let illegalArrayType = false;\n      if (this.doublePrecision) {\n        // not 32bit or 64bit\n        illegalArrayType = value.BYTES_PER_ELEMENT < 4;\n      } else if (this.hasShaderAttributes) {\n        illegalArrayType =\n          value.BYTES_PER_ELEMENT !== ArrayType.BYTES_PER_ELEMENT &&\n          // Shader attributes have hard-coded offsets and strides\n          // TODO - switch to element offsets and element strides?\n          Object.values(this.shaderAttributes).some(\n            attribute => attribute.offset || attribute.stride\n          );\n      }\n      if (illegalArrayType) {\n        throw new Error(`Attribute ${this.id} does not support ${value.constructor.name}`);\n      }\n      if (!(value instanceof ArrayType) && this.normalized && !('normalized' in opts)) {\n        log.warn(`Attribute ${this.id} is normalized`)();\n      }\n    }\n  }\n\n  getVertexOffset(row, bufferLayout = this.bufferLayout) {\n    let offset = this.elementOffset;\n    if (bufferLayout) {\n      let index = 0;\n      for (const geometrySize of bufferLayout) {\n        if (index >= row) {\n          break;\n        }\n        offset += geometrySize * this.size;\n        index++;\n      }\n      return offset;\n    }\n    return offset + row * this.size;\n  }\n\n  /* check user supplied values and apply fallback */\n  _normalizeValue(value, out = [], start = 0) {\n    const {defaultValue} = this.userData;\n\n    if (!Array.isArray(value) && !ArrayBuffer.isView(value)) {\n      out[start] = Number.isFinite(value) ? value : defaultValue[0];\n      return out;\n    }\n\n    /* eslint-disable no-fallthrough, default-case */\n    switch (this.size) {\n      case 4:\n        out[start + 3] = Number.isFinite(value[3]) ? value[3] : defaultValue[3];\n      case 3:\n        out[start + 2] = Number.isFinite(value[2]) ? value[2] : defaultValue[2];\n      case 2:\n        out[start + 1] = Number.isFinite(value[1]) ? value[1] : defaultValue[1];\n      case 1:\n        out[start + 0] = Number.isFinite(value[0]) ? value[0] : defaultValue[0];\n    }\n\n    return out;\n  }\n\n  _areValuesEqual(value1, value2, size = this.size) {\n    for (let i = 0; i < size; i++) {\n      if (value1[i] !== value2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  _standardAccessor(attribute, {data, startRow, endRow, props, numInstances, bufferLayout}) {\n    const state = attribute.userData;\n\n    const {accessor, transform} = state;\n    const {value, size} = attribute;\n    const accessorFunc = typeof accessor === 'function' ? accessor : props[accessor];\n\n    assert(typeof accessorFunc === 'function', `accessor \"${accessor}\" is not a function`);\n\n    let i = attribute.getVertexOffset(startRow, bufferLayout);\n    const {iterable, objectInfo} = createIterable(data, startRow, endRow);\n    for (const object of iterable) {\n      objectInfo.index++;\n\n      let objectValue = accessorFunc(object, objectInfo);\n      if (transform) {\n        // transform callbacks could be bound to a particular layer instance.\n        // always point `this` to the current layer.\n        objectValue = transform.call(this, objectValue);\n      }\n\n      if (bufferLayout) {\n        attribute._normalizeValue(objectValue, objectInfo.target);\n        const numVertices = bufferLayout[objectInfo.index];\n        fillArray({\n          target: attribute.value,\n          source: objectInfo.target,\n          start: i,\n          count: numVertices\n        });\n        i += numVertices * size;\n      } else {\n        attribute._normalizeValue(objectValue, value, i);\n        i += size;\n      }\n    }\n    attribute.constant = false;\n    attribute.bufferLayout = bufferLayout;\n  }\n\n  // Validate deck.gl level fields\n  _validateAttributeUpdaters() {\n    const state = this.userData;\n\n    // Check that 'update' is a valid function\n    const hasUpdater = state.noAlloc || typeof state.update === 'function';\n    if (!hasUpdater) {\n      throw new Error(`Attribute ${this.id} missing update or accessor`);\n    }\n  }\n\n  _checkAttributeArray() {\n    const {value} = this;\n    if (value && value.length >= 4) {\n      const valid =\n        Number.isFinite(value[0]) &&\n        Number.isFinite(value[1]) &&\n        Number.isFinite(value[2]) &&\n        Number.isFinite(value[3]);\n      if (!valid) {\n        throw new Error(`Illegal attribute generated for ${this.id}`);\n      }\n    }\n  }\n\n  _updateShaderAttributes() {\n    const shaderAttributes = this.shaderAttributes;\n    for (const shaderAttributeName in shaderAttributes) {\n      const shaderAttribute = shaderAttributes[shaderAttributeName];\n      shaderAttribute.update({\n        buffer: this.getBuffer(),\n        value: this.value,\n        constant: this.constant\n      });\n    }\n  }\n}\n\n/* eslint-disable complexity */\nfunction glArrayFromType(glType) {\n  // Sorted in some order of likelihood to reduce amount of comparisons\n  switch (glType) {\n    case GL.FLOAT:\n      return Float32Array;\n    case GL.DOUBLE:\n      return Float64Array;\n    case GL.UNSIGNED_SHORT:\n    case GL.UNSIGNED_SHORT_5_6_5:\n    case GL.UNSIGNED_SHORT_4_4_4_4:\n    case GL.UNSIGNED_SHORT_5_5_5_1:\n      return Uint16Array;\n    case GL.UNSIGNED_INT:\n      return Uint32Array;\n    case GL.UNSIGNED_BYTE:\n      return Uint8ClampedArray;\n    case GL.BYTE:\n      return Int8Array;\n    case GL.SHORT:\n      return Int16Array;\n    case GL.INT:\n      return Int32Array;\n    default:\n      throw new Error('Failed to deduce type from array');\n  }\n}\n/* eslint-enable complexity */\n"],"file":"attribute.js"}