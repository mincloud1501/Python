{"version":3,"sources":["../../../src/lib/deck-renderer.js"],"names":["log","DrawLayersPass","PickLayersPass","PostProcessEffect","Framebuffer","LOG_PRIORITY_DRAW","DeckRenderer","gl","layerFilter","drawPickingColors","drawLayersPass","pickLayersPass","renderCount","_needsRedraw","screenBuffer","offscreenBuffer","lastPostProcessEffect","props","setProps","layers","viewports","activateViewport","views","redrawReason","clearCanvas","effects","pass","stats","layerPass","effectProps","prepareEffects","onViewportActive","outputBuffer","getDefaultFramebuffer","renderStats","render","postRender","priority","forEach","status","logRenderStats","opts","clearRedrawFlags","redraw","params","effect","Object","assign","prepare","prepareRenderBuffers","resize","inputBuffer","target","totalCount","visibleCount","compositeCount","pickableCount","primitiveCount","hiddenCount","message","get","add"],"mappings":"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","sourcesContent":["import log from '../utils/log';\nimport DrawLayersPass from '../passes/draw-layers-pass';\nimport PickLayersPass from '../passes/pick-layers-pass';\nimport PostProcessEffect from '../effects/post-process-effect';\nimport {Framebuffer} from '@luma.gl/core';\n\nconst LOG_PRIORITY_DRAW = 2;\n\nexport default class DeckRenderer {\n  constructor(gl) {\n    this.gl = gl;\n    this.layerFilter = null;\n    this.drawPickingColors = false;\n    this.drawLayersPass = new DrawLayersPass(gl);\n    this.pickLayersPass = new PickLayersPass(gl);\n    this.renderCount = 0;\n    this._needsRedraw = 'Initial render';\n    this.screenBuffer = null;\n    this.offscreenBuffer = null;\n    this.lastPostProcessEffect = null;\n  }\n\n  setProps(props) {\n    if ('layerFilter' in props) {\n      if (this.layerFilter !== props.layerFilter) {\n        this.layerFilter = props.layerFilter;\n        this._needsRedraw = 'layerFilter changed';\n      }\n    }\n\n    if ('drawPickingColors' in props) {\n      if (this.drawPickingColors !== props.drawPickingColors) {\n        this.drawPickingColors = props.drawPickingColors;\n        this._needsRedraw = 'drawPickingColors changed';\n      }\n    }\n\n    const {layerFilter} = this;\n\n    this.drawLayersPass.setProps({\n      layerFilter\n    });\n    this.pickLayersPass.setProps({\n      layerFilter\n    });\n  }\n\n  renderLayers({\n    layers,\n    viewports,\n    activateViewport,\n    views,\n    redrawReason = 'unknown reason',\n    clearCanvas = true,\n    effects = [],\n    pass,\n    stats\n  }) {\n    const layerPass = this.drawPickingColors ? this.pickLayersPass : this.drawLayersPass;\n    const effectProps = this.prepareEffects({\n      layers,\n      viewports,\n      onViewportActive: activateViewport,\n      views,\n      effects\n    });\n    const outputBuffer = this.lastPostProcessEffect\n      ? this.screenBuffer\n      : Framebuffer.getDefaultFramebuffer(this.gl);\n\n    const renderStats = layerPass.render({\n      layers,\n      viewports,\n      views,\n      onViewportActive: activateViewport,\n      redrawReason,\n      clearCanvas,\n      effects,\n      effectProps,\n      outputBuffer\n    });\n\n    this.postRender(effects);\n\n    this.renderCount++;\n\n    if (log.priority >= LOG_PRIORITY_DRAW) {\n      renderStats.forEach(status => {\n        this.logRenderStats({status, pass, redrawReason, stats, renderStats});\n      });\n    }\n  }\n\n  needsRedraw(opts = {clearRedrawFlags: false}) {\n    const redraw = this._needsRedraw;\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n    return redraw;\n  }\n\n  finalize() {\n    if (this.screenBuffer) {\n      this.screenBuffer.delete();\n      this.screenBuffer = null;\n    }\n    if (this.offscreenBuffer) {\n      this.offscreenBuffer.delete();\n      this.offscreenBuffer = null;\n    }\n  }\n\n  // Private\n  prepareEffects(params) {\n    const {effects} = params;\n    const effectProps = {};\n    this.lastPostProcessEffect = null;\n\n    for (const effect of effects) {\n      Object.assign(effectProps, effect.prepare(this.gl, params));\n      if (effect instanceof PostProcessEffect) {\n        this.lastPostProcessEffect = effect;\n      }\n    }\n\n    if (this.lastPostProcessEffect) {\n      this.prepareRenderBuffers();\n    }\n\n    return effectProps;\n  }\n\n  prepareRenderBuffers() {\n    if (!this.screenBuffer) {\n      this.screenBuffer = new Framebuffer(this.gl);\n    }\n    this.screenBuffer.resize();\n\n    if (!this.offscreenBuffer) {\n      this.offscreenBuffer = new Framebuffer(this.gl);\n    }\n    this.offscreenBuffer.resize();\n  }\n\n  postRender(effects) {\n    let params = {inputBuffer: this.screenBuffer, outputBuffer: this.offscreenBuffer, target: null};\n    for (const effect of effects) {\n      if (effect instanceof PostProcessEffect) {\n        if (effect === this.lastPostProcessEffect) {\n          Object.assign(params, {target: Framebuffer.getDefaultFramebuffer(this.gl)});\n          params = effect.render(params);\n          break;\n        }\n        params = effect.render(params);\n      }\n    }\n  }\n\n  logRenderStats({renderStats, pass, redrawReason, stats}) {\n    const {totalCount, visibleCount, compositeCount, pickableCount} = renderStats;\n    const primitiveCount = totalCount - compositeCount;\n    const hiddenCount = primitiveCount - visibleCount;\n\n    let message = '';\n    message += `RENDER #${this.renderCount} \\\n${visibleCount} (of ${totalCount} layers) to ${pass} because ${redrawReason} `;\n    if (log.priority > LOG_PRIORITY_DRAW) {\n      message += `\\\n(${hiddenCount} hidden, ${compositeCount} composite ${pickableCount} pickable)`;\n    }\n\n    log.log(LOG_PRIORITY_DRAW, message)();\n\n    if (stats) {\n      stats.get('Redraw Layers').add(visibleCount);\n    }\n  }\n}\n"],"file":"deck-renderer.js"}