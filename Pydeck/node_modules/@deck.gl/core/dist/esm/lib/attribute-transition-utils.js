import BaseAttribute from '../lib/base-attribute';
import { padArray } from '../utils/array-utils';
var DEFAULT_TRANSITION_SETTINGS = {
  interpolation: {
    duration: 0,
    easing: function easing(t) {
      return t;
    }
  },
  spring: {
    stiffness: 0.05,
    damping: 0.5
  }
};
export function normalizeTransitionSettings(userSettings, layerSettings) {
  if (!userSettings) {
    return null;
  }

  if (Number.isFinite(userSettings)) {
    userSettings = {
      duration: userSettings
    };
  }

  userSettings.type = userSettings.type || 'interpolation';
  return Object.assign({}, DEFAULT_TRANSITION_SETTINGS[userSettings.type], layerSettings, userSettings);
}
export function getSourceBufferAttribute(gl, attribute) {
  var size = attribute.size,
      value = attribute.value,
      normalized = attribute.normalized,
      constant = attribute.constant;

  if (constant) {
    return new BaseAttribute(gl, {
      constant: constant,
      value: value,
      size: size
    });
  }

  var buffer = attribute.getBuffer();
  return new BaseAttribute(gl, {
    divisor: 0,
    constant: constant,
    buffer: buffer,
    size: size,
    normalized: normalized
  });
}
export function getAttributeTypeFromSize(size) {
  switch (size) {
    case 1:
      return 'float';

    case 2:
      return 'vec2';

    case 3:
      return 'vec3';

    case 4:
      return 'vec4';

    default:
      throw new Error("No defined attribute type for size \"".concat(size, "\""));
  }
}
export function cycleBuffers(buffers) {
  buffers.push(buffers.shift());
}
export function getAttributeBufferLength(attribute, numInstances) {
  var doublePrecision = attribute.doublePrecision,
      userData = attribute.userData,
      value = attribute.value,
      size = attribute.size;
  var multiplier = doublePrecision ? 2 : 1;
  return (userData.noAlloc ? value.length : numInstances * size) * multiplier;
}
export function padBuffer(_ref) {
  var buffer = _ref.buffer,
      numInstances = _ref.numInstances,
      attribute = _ref.attribute,
      fromLength = _ref.fromLength,
      fromBufferLayout = _ref.fromBufferLayout,
      _ref$getData = _ref.getData,
      getData = _ref$getData === void 0 ? function (x) {
    return x;
  } : _ref$getData;
  var precisionMultiplier = attribute.doublePrecision ? 2 : 1;
  var size = attribute.size * precisionMultiplier;
  var offset = attribute.elementOffset * precisionMultiplier;
  var toBufferLayout = attribute.bufferLayout;
  var hasBufferLayout = fromBufferLayout && toBufferLayout;
  var toLength = getAttributeBufferLength(attribute, numInstances);

  if (!hasBufferLayout && fromLength >= toLength) {
    return;
  }

  var toData = attribute.constant ? attribute.getValue() : attribute.getBuffer().getData({});

  if (attribute.normalized) {
    var getter = getData;

    getData = function getData(value, chunk) {
      return attribute._normalizeConstant(getter(value, chunk));
    };
  }

  var getMissingData = attribute.constant ? function (i, chunk) {
    return getData(toData, chunk);
  } : function (i, chunk) {
    return getData(toData.subarray(i, i + size), chunk);
  };
  var source = buffer.getData({
    length: fromLength
  });
  var data = new Float32Array(toLength);
  padArray({
    source: source,
    target: data,
    sourceLayout: fromBufferLayout,
    targetLayout: toBufferLayout,
    offset: offset,
    size: size,
    getData: getMissingData
  });
  buffer.setData({
    data: data
  });
}
//# sourceMappingURL=attribute-transition-utils.js.map