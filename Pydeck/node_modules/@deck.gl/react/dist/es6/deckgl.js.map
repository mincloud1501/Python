{"version":3,"sources":["../../src/deckgl.js"],"names":["React","createElement","PropTypes","Deck","experimental","memoize","extractJSXLayers","positionChildrenUnderViews","propTypes","getPropTypes","defaultProps","DeckGL","Component","constructor","props","viewports","children","_needsRedraw","pickObject","bind","pickMultipleObjects","pickObjects","_extractJSXLayers","_positionChildrenUnderViews","componentDidMount","DeckClass","deck","Object","assign","canvas","deckCanvas","_customRender","_updateFromProps","shouldComponentUpdate","nextProps","childrenChanged","_parseJSX","viewsChanged","viewManager","needsRedraw","componentDidUpdate","_redrawDeck","componentWillUnmount","finalize","opts","_drawLayers","redrawReason","getViewports","forceUpdate","layers","views","deckProps","setProps","render","ContextProvider","style","position","left","top","ref","c","key","id"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport React, {createElement} from 'react';\nimport PropTypes from 'prop-types';\nimport {Deck, experimental} from '@deck.gl/core';\nconst {memoize} = experimental;\n\nimport extractJSXLayers from './utils/extract-jsx-layers';\nimport positionChildrenUnderViews from './utils/position-children-under-views';\n\nconst propTypes = Deck.getPropTypes(PropTypes);\n\nconst defaultProps = Deck.defaultProps;\n\nexport default class DeckGL extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.viewports = null;\n    this.children = null;\n\n    // The redraw flag of deck\n    this._needsRedraw = null;\n\n    // Bind public methods\n    this.pickObject = this.pickObject.bind(this);\n    this.pickMultipleObjects = this.pickMultipleObjects.bind(this);\n    this.pickObjects = this.pickObjects.bind(this);\n\n    // Memoized functions\n    this._extractJSXLayers = memoize(extractJSXLayers);\n    this._positionChildrenUnderViews = memoize(positionChildrenUnderViews);\n  }\n\n  componentDidMount() {\n    // Allows a subclass of Deck to be used\n    // TODO - update propTypes / defaultProps?\n    const DeckClass = this.props.Deck || Deck;\n\n    // DEVTOOLS can cause this to be called twice\n    this.deck =\n      this.deck ||\n      new DeckClass(\n        Object.assign({}, this.props, {\n          canvas: this.deckCanvas,\n          // The Deck's animation loop is independent from React's render cycle, causing potential\n          // synchronization issues. We provide this custom render function to make sure that React\n          // and Deck update on the same schedule.\n          _customRender: this._customRender.bind(this)\n        })\n      );\n    this._updateFromProps(this.props);\n  }\n\n  // This method checks if React needs to call `render`.\n  // Props changes may lead to 3 types of updates:\n  // 1. Only the WebGL context - updated in Deck's render cycle (next animation frame)\n  // 2. Only the DOM - updated in React's lifecycle (now)\n  // 3. Both the WebGL context and the DOM - defer React rerender to next animation frame just\n  //    before Deck redraw to ensure perfect synchronization & avoid excessive redraw\n  //    This is because multiple changes may happen to Deck between two frames e.g. transition\n  shouldComponentUpdate(nextProps) {\n    // Update Deck's props. If Deck needs redraw, this will trigger a call to `_customRender` in\n    // the next animation frame.\n    this._updateFromProps(nextProps);\n\n    // If the child components have changed, React needs to rerender (case 2 or 3)\n    const childrenChanged = this.children !== this._parseJSX(nextProps).children;\n    // If the views have changed, both React and WebGL context need update (case 3)\n    const viewsChanged = this.deck.viewManager && this.deck.viewManager.needsRedraw();\n\n    // Only call `render` right away in case 2\n    return childrenChanged && !viewsChanged;\n  }\n\n  componentDidUpdate() {\n    // render has just been called. The children are positioned based on the current view state.\n    // Redraw Deck canvas immediately, if necessary, using the current view state, so that it\n    // matches the child components.\n    this._redrawDeck();\n  }\n\n  componentWillUnmount() {\n    this.deck.finalize();\n  }\n\n  // Public API\n\n  pickObject(opts) {\n    return this.deck.pickObject(opts);\n  }\n\n  pickMultipleObjects(opts) {\n    return this.deck.pickMultipleObjects(opts);\n  }\n\n  pickObjects(opts) {\n    return this.deck.pickObjects(opts);\n  }\n\n  // Callbacks\n  _redrawDeck() {\n    if (this._needsRedraw) {\n      // Only redraw it we have received a dirty flag\n      this.deck._drawLayers(this._needsRedraw);\n      this._needsRedraw = null;\n    }\n  }\n\n  _customRender(redrawReason) {\n    // Save the dirty flag for later\n    this._needsRedraw = redrawReason;\n\n    // Viewport/view state is passed to child components as props.\n    // If they have changed, we need to trigger a React rerender to update children props.\n    const viewports = this.deck.viewManager.getViewports();\n    if (viewports !== this.viewports) {\n      // Viewports have changed, update children props first.\n      // This will delay the Deck canvas redraw till after React update (in componentDidUpdate)\n      // so that the canvas does not get rendered before the child components update.\n      this.forceUpdate();\n    } else {\n      this._redrawDeck();\n    }\n  }\n\n  // Private Helpers\n\n  _parseJSX(props) {\n    return this._extractJSXLayers({\n      layers: props.layers,\n      views: props.views,\n      children: props.children\n    });\n  }\n\n  // 1. Extract any JSX layers from the react children\n  // 2. Handle any backwards compatiblity props for React layer\n  // Needs to be called both from initial mount, and when new props are received\n  _updateFromProps(props) {\n    // extract any deck.gl layers masquerading as react elements from props.children\n    const {layers, views} = this._parseJSX(props);\n    const deckProps = Object.assign({}, props, {\n      layers,\n      views\n    });\n\n    this.deck.setProps(deckProps);\n  }\n\n  render() {\n    // Save the viewports and children used for this render\n    const {viewManager} = this.deck || {};\n    this.viewports = viewManager && viewManager.getViewports();\n    this.children = this._parseJSX(this.props).children;\n\n    // Render the background elements (typically react-map-gl instances)\n    // using the view descriptors\n    const children = this._positionChildrenUnderViews({\n      children: this.children,\n      viewports: this.viewports,\n      deck: this.deck,\n      ContextProvider: this.props.ContextProvider\n    });\n\n    // TODO - this styling is enforced for correct positioning with children\n    // It can override the styling set by `Deck`, this should be consolidated.\n    // Note that width and height are handled by deck.gl\n    const style = Object.assign({}, {position: 'absolute', left: 0, top: 0}, this.props.style);\n\n    const canvas = createElement('canvas', {\n      ref: c => (this.deckCanvas = c),\n      key: 'deck-canvas',\n      id: this.props.id,\n      style\n    });\n\n    // Render deck.gl as the last child\n    return createElement('div', {id: 'deckgl-wrapper'}, [children, canvas]);\n  }\n}\n\nDeckGL.propTypes = propTypes;\nDeckGL.defaultProps = defaultProps;\n"],"file":"deckgl.js"}