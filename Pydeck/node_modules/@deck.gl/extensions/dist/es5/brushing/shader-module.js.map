{"version":3,"sources":["../../../src/brushing/shader-module.js"],"names":["vs","fs","moduleName","TARGET","source","target","custom","hook","injection","name","dependencies","getUniforms","opts","viewport","brushingEnabled","brushingRadius","brushingTarget","mousePosition","brushing_enabled","Boolean","containsPixel","brushing_radius","brushing_target","brushing_mousePos","unproject","x","y"],"mappings":";;;;;;;AAmBA;;AAEA,IAAMA,EAAE,yxBAAR;AA8BA,IAAMC,EAAE,8EAAR;AAMA,IAAMC,UAAU,GAAG,UAAnB;AAEA,IAAMC,MAAM,GAAG;AACbC,EAAAA,MAAM,EAAE,CADK;AAEbC,EAAAA,MAAM,EAAE,CAFK;AAGbC,EAAAA,MAAM,EAAE;AAHK,CAAf;AAMA,iCAAsBJ,UAAtB,EAAkC;AAChCK,EAAAA,IAAI,EAAE,8BAD0B;AAEhCC,EAAAA,SAAS;AAFuB,CAAlC;AAmBA,iCAAsBN,UAAtB,EAAkC;AAChCK,EAAAA,IAAI,EAAE,wBAD0B;AAEhCC,EAAAA,SAAS;AAFuB,CAAlC;eASe;AACbC,EAAAA,IAAI,EAAEP,UADO;AAEbQ,EAAAA,YAAY,EAAE,CAAC,SAAD,CAFD;AAGbV,EAAAA,EAAE,EAAFA,EAHa;AAIbC,EAAAA,EAAE,EAAFA,EAJa;AAKbU,EAAAA,WAAW,EAAE,qBAAAC,IAAI,EAAI;AACnB,QAAI,CAACA,IAAD,IAAS,CAACA,IAAI,CAACC,QAAnB,EAA6B;AAC3B,aAAO,EAAP;AACD;;AAHkB,gCAUfD,IAVe,CAKjBE,eALiB;AAAA,QAKjBA,eALiB,sCAKC,IALD;AAAA,+BAUfF,IAVe,CAMjBG,cANiB;AAAA,QAMjBA,cANiB,qCAMA,KANA;AAAA,+BAUfH,IAVe,CAOjBI,cAPiB;AAAA,QAOjBA,cAPiB,qCAOA,QAPA;AAAA,QAQjBC,aARiB,GAUfL,IAVe,CAQjBK,aARiB;AAAA,QASjBJ,QATiB,GAUfD,IAVe,CASjBC,QATiB;AAWnB,WAAO;AACLK,MAAAA,gBAAgB,EAAEC,OAAO,CACvBL,eAAe,IAAIG,aAAnB,IAAoCJ,QAAQ,CAACO,aAAT,CAAuBH,aAAvB,CADb,CADpB;AAILI,MAAAA,eAAe,EAAEN,cAJZ;AAKLO,MAAAA,eAAe,EAAEnB,MAAM,CAACa,cAAD,CAAN,IAA0B,CALtC;AAMLO,MAAAA,iBAAiB,EAAEN,aAAa,GAC5BJ,QAAQ,CAACW,SAAT,CAAmB,CAACP,aAAa,CAACQ,CAAd,GAAkBZ,QAAQ,CAACY,CAA5B,EAA+BR,aAAa,CAACS,CAAd,GAAkBb,QAAQ,CAACa,CAA1D,CAAnB,CAD4B,GAE5B,CAAC,CAAD,EAAI,CAAJ;AARC,KAAP;AAUD;AA1BY,C","sourcesContent":["// Copyright (c) 2015-2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport {createModuleInjection} from '@luma.gl/core';\n\nconst vs = `\n  uniform bool brushing_enabled;\n  uniform int brushing_target;\n  uniform vec2 brushing_mousePos;\n  uniform float brushing_radius;\n\n  #ifdef NON_INSTANCED_MODEL\n  attribute vec2 brushingTargets;\n  #else\n  attribute vec2 instanceBrushingTargets;\n  #endif\n\n  varying float brushing_isVisible;\n\n  bool brushing_isPointInRange(vec2 position) {\n    if (!brushing_enabled) {\n      return true;\n    }\n    vec2 source_commonspace = project_position(position);\n    vec2 target_commonspace = project_position(brushing_mousePos);\n    float distance = length((target_commonspace - source_commonspace) / project_uCommonUnitsPerMeter.xy);\n\n    return distance <= brushing_radius;\n  }\n\n  void brushing_setVisible(bool visible) {\n    brushing_isVisible = float(visible);\n  }\n`;\n\nconst fs = `\n  uniform bool brushing_enabled;\n  varying float brushing_isVisible;\n`;\n\n// filter_setValue(instanceFilterValue);\nconst moduleName = 'brushing';\n\nconst TARGET = {\n  source: 0,\n  target: 1,\n  custom: 2\n};\n\ncreateModuleInjection(moduleName, {\n  hook: 'vs:DECKGL_FILTER_GL_POSITION',\n  injection: `\nvec2 brushingTarget;\nif (brushing_target == 0) {\n  brushingTarget = geometry.worldPosition.xy;\n} else if (brushing_target == 1) {\n  brushingTarget = geometry.worldPositionAlt.xy;\n} else {\n  #ifdef NON_INSTANCED_MODEL\n  brushingTarget = brushingTargets;\n  #else\n  brushingTarget = instanceBrushingTargets;\n  #endif\n}\nbrushing_setVisible(brushing_isPointInRange(brushingTarget));\n  `\n});\n\ncreateModuleInjection(moduleName, {\n  hook: 'fs:DECKGL_FILTER_COLOR',\n  injection: `\nif (brushing_enabled && brushing_isVisible < 0.5) {\n  discard;\n}\n  `\n});\n\nexport default {\n  name: moduleName,\n  dependencies: ['project'],\n  vs,\n  fs,\n  getUniforms: opts => {\n    if (!opts || !opts.viewport) {\n      return {};\n    }\n    const {\n      brushingEnabled = true,\n      brushingRadius = 10000,\n      brushingTarget = 'source',\n      mousePosition,\n      viewport\n    } = opts;\n    return {\n      brushing_enabled: Boolean(\n        brushingEnabled && mousePosition && viewport.containsPixel(mousePosition)\n      ),\n      brushing_radius: brushingRadius,\n      brushing_target: TARGET[brushingTarget] || 0,\n      brushing_mousePos: mousePosition\n        ? viewport.unproject([mousePosition.x - viewport.x, mousePosition.y - viewport.y])\n        : [0, 0]\n    };\n  }\n};\n"],"file":"shader-module.js"}