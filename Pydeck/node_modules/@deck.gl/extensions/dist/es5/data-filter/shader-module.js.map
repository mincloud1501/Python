{"version":3,"sources":["../../../src/data-filter/shader-module.js"],"names":["vs","fs","getUniforms","opts","extensions","filterRange","filterEnabled","filterTransformSize","filterTransformColor","filterSoftRange","uniforms","Number","isFinite","filter_min","filter_softMin","filter_softMax","filter_max","map","r","filter_enabled","filter_useSoftMargin","Boolean","filter_transformSize","filter_transformColor","moduleName","hook","injection","name"],"mappings":";;;;;;;AAAA;;AAKA,IAAMA,EAAE,8uCAAR;AA+CA,IAAMC,EAAE,6EAAR;;AAKA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAAC,IAAI,EAAI;AAC1B,MAAI,CAACA,IAAD,IAAS,CAACA,IAAI,CAACC,UAAnB,EAA+B;AAC7B,WAAO,EAAP;AACD;;AAHyB,0BAStBD,IATsB,CAKxBE,WALwB;AAAA,MAKxBA,WALwB,kCAKV,CAAC,CAAC,CAAF,EAAK,CAAL,CALU;AAAA,4BAStBF,IATsB,CAMxBG,aANwB;AAAA,MAMxBA,aANwB,oCAMR,IANQ;AAAA,8BAStBH,IATsB,CAOxBI,mBAPwB;AAAA,MAOxBA,mBAPwB,sCAOF,IAPE;AAAA,+BAStBJ,IATsB,CAQxBK,oBARwB;AAAA,MAQxBA,oBARwB,uCAQD,IARC;AAU1B,MAAMC,eAAe,GAAGN,IAAI,CAACM,eAAL,IAAwBJ,WAAhD;AAEA,MAAMK,QAAQ,GAAGC,MAAM,CAACC,QAAP,CAAgBP,WAAW,CAAC,CAAD,CAA3B,IACb;AACEQ,IAAAA,UAAU,EAAER,WAAW,CAAC,CAAD,CADzB;AAEES,IAAAA,cAAc,EAAEL,eAAe,CAAC,CAAD,CAFjC;AAGEM,IAAAA,cAAc,EAAEN,eAAe,CAAC,CAAD,CAHjC;AAIEO,IAAAA,UAAU,EAAEX,WAAW,CAAC,CAAD;AAJzB,GADa,GAOb;AACEQ,IAAAA,UAAU,EAAER,WAAW,CAACY,GAAZ,CAAgB,UAAAC,CAAC;AAAA,aAAIA,CAAC,CAAC,CAAD,CAAL;AAAA,KAAjB,CADd;AAEEJ,IAAAA,cAAc,EAAEL,eAAe,CAACQ,GAAhB,CAAoB,UAAAC,CAAC;AAAA,aAAIA,CAAC,CAAC,CAAD,CAAL;AAAA,KAArB,CAFlB;AAGEH,IAAAA,cAAc,EAAEN,eAAe,CAACQ,GAAhB,CAAoB,UAAAC,CAAC;AAAA,aAAIA,CAAC,CAAC,CAAD,CAAL;AAAA,KAArB,CAHlB;AAIEF,IAAAA,UAAU,EAAEX,WAAW,CAACY,GAAZ,CAAgB,UAAAC,CAAC;AAAA,aAAIA,CAAC,CAAC,CAAD,CAAL;AAAA,KAAjB;AAJd,GAPJ;AAaAR,EAAAA,QAAQ,CAACS,cAAT,GAA0Bb,aAA1B;AACAI,EAAAA,QAAQ,CAACU,oBAAT,GAAgCC,OAAO,CAAClB,IAAI,CAACM,eAAN,CAAvC;AACAC,EAAAA,QAAQ,CAACY,oBAAT,GAAgChB,aAAa,IAAIC,mBAAjD;AACAG,EAAAA,QAAQ,CAACa,qBAAT,GAAiCjB,aAAa,IAAIE,oBAAlD;AAEA,SAAOE,QAAP;AACD,CA/BD;;AAkCA,IAAMc,UAAU,GAAG,aAAnB;AAEA,iCAAsBA,UAAtB,EAAkC;AAChCC,EAAAA,IAAI,EAAE,gBAD0B;AAEhCC,EAAAA,SAAS;AAFuB,CAAlC;AAWA,iCAAsBF,UAAtB,EAAkC;AAChCC,EAAAA,IAAI,EAAE,uBAD0B;AAEhCC,EAAAA,SAAS;AAFuB,CAAlC;AASA,iCAAsBF,UAAtB,EAAkC;AAChCC,EAAAA,IAAI,EAAE,wBAD0B;AAEhCC,EAAAA,SAAS;AAFuB,CAAlC;eAUe;AACbC,EAAAA,IAAI,EAAEH,UADO;AAEbxB,EAAAA,EAAE,EAAFA,EAFa;AAGbC,EAAAA,EAAE,EAAFA,EAHa;AAIbC,EAAAA,WAAW,EAAXA;AAJa,C","sourcesContent":["import {createModuleInjection} from '@luma.gl/core';\n\n/*\n * data filter shader module\n */\nconst vs = `\nuniform DATAFILTER_TYPE filter_min;\nuniform DATAFILTER_TYPE filter_softMin;\nuniform DATAFILTER_TYPE filter_softMax;\nuniform DATAFILTER_TYPE filter_max;\nuniform bool filter_useSoftMargin;\nuniform bool filter_enabled;\nuniform bool filter_transformSize;\n\n#ifdef NON_INSTANCED_MODEL\nattribute DATAFILTER_TYPE filterValues;\n#else\nattribute DATAFILTER_TYPE instanceFilterValues;\n#endif\n\nvarying float dataFilter_value;\n\nfloat dataFilter_reduceValue(float value) {\n  return value;\n}\nfloat dataFilter_reduceValue(vec2 value) {\n  return min(value.x, value.y);\n}\nfloat dataFilter_reduceValue(vec3 value) {\n  return min(min(value.x, value.y), value.z);\n}\nfloat dataFilter_reduceValue(vec4 value) {\n  return min(min(value.x, value.y), min(value.z, value.w));\n}\nvoid dataFilter_setValue(DATAFILTER_TYPE value) {\n  if (filter_enabled) {\n    if (filter_useSoftMargin) {\n      dataFilter_value = dataFilter_reduceValue(\n        smoothstep(filter_min, filter_softMin, value) *\n        (1.0 - smoothstep(filter_softMax, filter_max, value))\n      );\n    } else {\n      dataFilter_value = dataFilter_reduceValue(\n        step(filter_min, value) * step(value, filter_max)\n      );\n    }\n  } else {\n    dataFilter_value = 1.0;\n  }\n}\n`;\n\nconst fs = `\nuniform bool filter_transformColor;\nvarying float dataFilter_value;\n`;\n\nconst getUniforms = opts => {\n  if (!opts || !opts.extensions) {\n    return {};\n  }\n  const {\n    filterRange = [-1, 1],\n    filterEnabled = true,\n    filterTransformSize = true,\n    filterTransformColor = true\n  } = opts;\n  const filterSoftRange = opts.filterSoftRange || filterRange;\n\n  const uniforms = Number.isFinite(filterRange[0])\n    ? {\n        filter_min: filterRange[0],\n        filter_softMin: filterSoftRange[0],\n        filter_softMax: filterSoftRange[1],\n        filter_max: filterRange[1]\n      }\n    : {\n        filter_min: filterRange.map(r => r[0]),\n        filter_softMin: filterSoftRange.map(r => r[0]),\n        filter_softMax: filterSoftRange.map(r => r[1]),\n        filter_max: filterRange.map(r => r[1])\n      };\n  uniforms.filter_enabled = filterEnabled;\n  uniforms.filter_useSoftMargin = Boolean(opts.filterSoftRange);\n  uniforms.filter_transformSize = filterEnabled && filterTransformSize;\n  uniforms.filter_transformColor = filterEnabled && filterTransformColor;\n\n  return uniforms;\n};\n\n// filter_setValue(instanceFilterValue);\nconst moduleName = 'data-filter';\n\ncreateModuleInjection(moduleName, {\n  hook: 'vs:#main-start',\n  injection: `\n#ifdef NON_INSTANCED_MODEL\ndataFilter_setValue(filterValues);\n#else\ndataFilter_setValue(instanceFilterValues);\n#endif\n  `\n});\n\ncreateModuleInjection(moduleName, {\n  hook: 'vs:DECKGL_FILTER_SIZE',\n  injection: `\nif (filter_transformSize) {\n  size = size * dataFilter_value;\n}\n  `\n});\n\ncreateModuleInjection(moduleName, {\n  hook: 'fs:DECKGL_FILTER_COLOR',\n  injection: `\nif (dataFilter_value == 0.0) discard;\nif (filter_transformColor) {\n  color.a *= dataFilter_value;\n}\n  `\n});\n\nexport default {\n  name: moduleName,\n  vs,\n  fs,\n  getUniforms\n};\n"],"file":"shader-module.js"}