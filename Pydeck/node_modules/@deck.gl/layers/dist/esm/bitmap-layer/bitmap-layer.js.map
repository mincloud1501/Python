{"version":3,"sources":["../../../src/bitmap-layer/bitmap-layer.js"],"names":["Layer","Model","Geometry","Texture2D","vs","fs","DEFAULT_TEXTURE_PARAMETERS","defaultProps","image","type","value","async","bounds","compare","desaturate","min","max","transparentColor","tintColor","BitmapLayer","modules","attributeManager","getAttributeManager","add","positions","size","fp64","use64bitPositions","update","calculatePositions","noAlloc","setState","numInstances","Float64Array","props","oldProps","changeFlags","extensionsChanged","gl","context","state","model","_getModel","invalidateAll","loadTexture","invalidate","bitmapTexture","attributes","Number","isFinite","i","length","Object","assign","getShaders","id","geometry","drawMode","vertexCount","texCoords","Float32Array","isInstanced","opts","uniforms","HTMLVideoElement","readyState","HAVE_METADATA","sizeChanged","width","videoWidth","height","videoHeight","resize","mipmaps","setSubImageData","data","paramters","generateMipmap","setUniforms","map","x","slice","draw","parameters","layerName"],"mappings":";;;;;;;;;;AAsBA,SAAQA,KAAR,QAAoB,eAApB;AACA,SAAQC,KAAR,EAAeC,QAAf,EAAyBC,SAAzB,QAAyC,eAAzC;AAEA,OAAOC,EAAP,MAAe,uBAAf;AACA,OAAOC,EAAP,MAAe,yBAAf;AAEA,IAAMC,0BAA0B,4QAAhC;AAOA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE;AAACC,IAAAA,IAAI,EAAE,QAAP;AAAiBC,IAAAA,KAAK,EAAE,IAAxB;AAA8BC,IAAAA,KAAK,EAAE;AAArC,GADY;AAEnBC,EAAAA,MAAM,EAAE;AAACH,IAAAA,IAAI,EAAE,OAAP;AAAgBC,IAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAvB;AAAqCG,IAAAA,OAAO,EAAE;AAA9C,GAFW;AAInBC,EAAAA,UAAU,EAAE;AAACL,IAAAA,IAAI,EAAE,QAAP;AAAiBM,IAAAA,GAAG,EAAE,CAAtB;AAAyBC,IAAAA,GAAG,EAAE,CAA9B;AAAiCN,IAAAA,KAAK,EAAE;AAAxC,GAJO;AAQnBO,EAAAA,gBAAgB,EAAE;AAACR,IAAAA,IAAI,EAAE,OAAP;AAAgBC,IAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV;AAAvB,GARC;AASnBQ,EAAAA,SAAS,EAAE;AAACT,IAAAA,IAAI,EAAE,OAAP;AAAgBC,IAAAA,KAAK,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX;AAAvB;AATQ,CAArB;;IAkBqBS,W;;;;;;;;;;;iCACN;AACX,yFAAwB;AAACf,QAAAA,EAAE,EAAFA,EAAD;AAAKC,QAAAA,EAAE,EAAFA,EAAL;AAASe,QAAAA,OAAO,EAAE,CAAC,WAAD,EAAc,SAAd;AAAlB,OAAxB;AACD;;;sCAEiB;AAChB,UAAMC,gBAAgB,GAAG,KAAKC,mBAAL,EAAzB;AAEAD,MAAAA,gBAAgB,CAACE,GAAjB,CAAqB;AACnBC,QAAAA,SAAS,EAAE;AACTC,UAAAA,IAAI,EAAE,CADG;AAEThB,UAAAA,IAAI,MAFK;AAGTiB,UAAAA,IAAI,EAAE,KAAKC,iBAAL,EAHG;AAITC,UAAAA,MAAM,EAAE,KAAKC,kBAJJ;AAKTC,UAAAA,OAAO,EAAE;AALA;AADQ,OAArB;AAUA,WAAKC,QAAL,CAAc;AACZC,QAAAA,YAAY,EAAE,CADF;AAEZR,QAAAA,SAAS,EAAE,IAAIS,YAAJ,CAAiB,EAAjB;AAFC,OAAd;AAID;;;sCAE2C;AAAA,UAA/BC,KAA+B,QAA/BA,KAA+B;AAAA,UAAxBC,QAAwB,QAAxBA,QAAwB;AAAA,UAAdC,WAAc,QAAdA,WAAc;;AAE1C,UAAIA,WAAW,CAACC,iBAAhB,EAAmC;AAAA,YAC1BC,EAD0B,GACpB,KAAKC,OADe,CAC1BD,EAD0B;;AAEjC,YAAI,KAAKE,KAAL,CAAWC,KAAf,EAAsB;AACpB,eAAKD,KAAL,CAAWC,KAAX;AACD;;AACD,aAAKV,QAAL,CAAc;AAACU,UAAAA,KAAK,EAAE,KAAKC,SAAL,CAAeJ,EAAf;AAAR,SAAd;AACA,aAAKhB,mBAAL,GAA2BqB,aAA3B;AACD;;AAED,UAAIT,KAAK,CAAC1B,KAAN,KAAgB2B,QAAQ,CAAC3B,KAA7B,EAAoC;AAClC,aAAKoC,WAAL,CAAiBV,KAAK,CAAC1B,KAAvB;AACD;;AAED,UAAMa,gBAAgB,GAAG,KAAKC,mBAAL,EAAzB;;AAEA,UAAIY,KAAK,CAACtB,MAAN,KAAiBuB,QAAQ,CAACvB,MAA9B,EAAsC;AACpCS,QAAAA,gBAAgB,CAACwB,UAAjB,CAA4B,WAA5B;AACD;AACF;;;oCAEe;AACd;;AAEA,UAAI,KAAKL,KAAL,CAAWM,aAAf,EAA8B;AAC5B,aAAKN,KAAL,CAAWM,aAAX;AACD;AACF;;;uCAEkBC,U,EAAY;AAAA,UACtBvB,SADsB,GACT,KAAKgB,KADI,CACtBhB,SADsB;AAAA,UAEtBZ,MAFsB,GAEZ,KAAKsB,KAFO,CAEtBtB,MAFsB;;AAI7B,UAAIoC,MAAM,CAACC,QAAP,CAAgBrC,MAAM,CAAC,CAAD,CAAtB,CAAJ,EAAgC;AAQ9BY,QAAAA,SAAS,CAAC,CAAD,CAAT,GAAeZ,MAAM,CAAC,CAAD,CAArB;AACAY,QAAAA,SAAS,CAAC,CAAD,CAAT,GAAeZ,MAAM,CAAC,CAAD,CAArB;AACAY,QAAAA,SAAS,CAAC,CAAD,CAAT,GAAe,CAAf;AAEAA,QAAAA,SAAS,CAAC,CAAD,CAAT,GAAeZ,MAAM,CAAC,CAAD,CAArB;AACAY,QAAAA,SAAS,CAAC,CAAD,CAAT,GAAeZ,MAAM,CAAC,CAAD,CAArB;AACAY,QAAAA,SAAS,CAAC,CAAD,CAAT,GAAe,CAAf;AAEAA,QAAAA,SAAS,CAAC,CAAD,CAAT,GAAeZ,MAAM,CAAC,CAAD,CAArB;AACAY,QAAAA,SAAS,CAAC,CAAD,CAAT,GAAeZ,MAAM,CAAC,CAAD,CAArB;AACAY,QAAAA,SAAS,CAAC,CAAD,CAAT,GAAe,CAAf;AAEAA,QAAAA,SAAS,CAAC,CAAD,CAAT,GAAeZ,MAAM,CAAC,CAAD,CAArB;AACAY,QAAAA,SAAS,CAAC,EAAD,CAAT,GAAgBZ,MAAM,CAAC,CAAD,CAAtB;AACAY,QAAAA,SAAS,CAAC,EAAD,CAAT,GAAgB,CAAhB;AACD,OAvBD,MAuBO;AAEL,aAAK,IAAI0B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGtC,MAAM,CAACuC,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC1B,UAAAA,SAAS,CAAC0B,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAT,GAAuBtC,MAAM,CAACsC,CAAD,CAAN,CAAU,CAAV,CAAvB;AACA1B,UAAAA,SAAS,CAAC0B,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAT,GAAuBtC,MAAM,CAACsC,CAAD,CAAN,CAAU,CAAV,CAAvB;AACA1B,UAAAA,SAAS,CAAC0B,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAT,GAAuBtC,MAAM,CAACsC,CAAD,CAAN,CAAU,CAAV,KAAgB,CAAvC;AACD;AACF;;AAEDH,MAAAA,UAAU,CAACrC,KAAX,GAAmBc,SAAnB;AACD;;;8BAESc,E,EAAI;AACZ,UAAI,CAACA,EAAL,EAAS;AACP,eAAO,IAAP;AACD;;AAOD,aAAO,IAAIrC,KAAJ,CACLqC,EADK,EAELc,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKC,UAAL,EAAlB,EAAqC;AACnCC,QAAAA,EAAE,EAAE,KAAKrB,KAAL,CAAWqB,EADoB;AAEnCC,QAAAA,QAAQ,EAAE,IAAItD,QAAJ,CAAa;AACrBuD,UAAAA,QAAQ,GADa;AAErBC,UAAAA,WAAW,EAAE,CAFQ;AAGrBX,UAAAA,UAAU,EAAE;AACVY,YAAAA,SAAS,EAAE,IAAIC,YAAJ,CAAiB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,CAAjB;AADD;AAHS,SAAb,CAFyB;AASnCC,QAAAA,WAAW,EAAE;AATsB,OAArC,CAFK,CAAP;AAcD;;;yBAEIC,I,EAAM;AAAA,UACFC,QADE,GACUD,IADV,CACFC,QADE;AAAA,wBAEsB,KAAKvB,KAF3B;AAAA,UAEFM,aAFE,eAEFA,aAFE;AAAA,UAEaL,KAFb,eAEaA,KAFb;AAAA,wBAGgD,KAAKP,KAHrD;AAAA,UAGF1B,KAHE,eAGFA,KAHE;AAAA,UAGKM,UAHL,eAGKA,UAHL;AAAA,UAGiBG,gBAHjB,eAGiBA,gBAHjB;AAAA,UAGmCC,SAHnC,eAGmCA,SAHnC;;AAMT,UACE4B,aAAa,IACbtC,KAAK,YAAYwD,gBADjB,IAEAxD,KAAK,CAACyD,UAAN,GAAmBD,gBAAgB,CAACE,aAHtC,EAIE;AACA,YAAMC,WAAW,GACfrB,aAAa,CAACsB,KAAd,KAAwB5D,KAAK,CAAC6D,UAA9B,IAA4CvB,aAAa,CAACwB,MAAd,KAAyB9D,KAAK,CAAC+D,WAD7E;;AAEA,YAAIJ,WAAJ,EAAiB;AAEfrB,UAAAA,aAAa,CAAC0B,MAAd,CAAqB;AAACJ,YAAAA,KAAK,EAAE5D,KAAK,CAAC6D,UAAd;AAA0BC,YAAAA,MAAM,EAAE9D,KAAK,CAAC+D,WAAxC;AAAqDE,YAAAA,OAAO,EAAE;AAA9D,WAArB;AACA3B,UAAAA,aAAa,CAAC4B,eAAd,CAA8B;AAC5BC,YAAAA,IAAI,EAAEnE,KADsB;AAE5BoE,YAAAA,SAAS,EAAEtE;AAFiB,WAA9B;AAID,SAPD,MAOO;AACLwC,UAAAA,aAAa,CAAC4B,eAAd,CAA8B;AAC5BC,YAAAA,IAAI,EAAEnE;AADsB,WAA9B;AAGD;;AAEDsC,QAAAA,aAAa,CAAC+B,cAAd;AACD;;AAID,UAAI/B,aAAa,IAAIL,KAArB,EAA4B;AAC1BA,QAAAA,KAAK,CACFqC,WADH,CAEI1B,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBU,QAAlB,EAA4B;AAC1BjB,UAAAA,aAAa,EAAbA,aAD0B;AAE1BhC,UAAAA,UAAU,EAAVA,UAF0B;AAG1BG,UAAAA,gBAAgB,EAAEA,gBAAgB,CAAC8D,GAAjB,CAAqB,UAAAC,CAAC;AAAA,mBAAIA,CAAC,GAAG,GAAR;AAAA,WAAtB,CAHQ;AAI1B9D,UAAAA,SAAS,EAAEA,SAAS,CAAC+D,KAAV,CAAgB,CAAhB,EAAmB,CAAnB,EAAsBF,GAAtB,CAA0B,UAAAC,CAAC;AAAA,mBAAIA,CAAC,GAAG,GAAR;AAAA,WAA3B;AAJe,SAA5B,CAFJ,EASGE,IATH;AAUD;AACF;;;gCAEW1E,K,EAAO;AAAA,UACV8B,EADU,GACJ,KAAKC,OADD,CACVD,EADU;;AAGjB,UAAI,KAAKE,KAAL,CAAWM,aAAf,EAA8B;AAC5B,aAAKN,KAAL,CAAWM,aAAX;AACD;;AAED,UAAItC,KAAK,YAAYL,SAArB,EAAgC;AAC9B,aAAK4B,QAAL,CAAc;AAACe,UAAAA,aAAa,EAAEtC;AAAhB,SAAd;AACD,OAFD,MAEO,IAAIA,KAAK,YAAYwD,gBAArB,EAAuC;AAE5C,aAAKjC,QAAL,CAAc;AACZe,UAAAA,aAAa,EAAE,IAAI3C,SAAJ,CAAcmC,EAAd,EAAkB;AAC/B8B,YAAAA,KAAK,EAAE,CADwB;AAE/BE,YAAAA,MAAM,EAAE,CAFuB;AAG/Ba,YAAAA,UAAU,EAAE7E,0BAHmB;AAI/BmE,YAAAA,OAAO,EAAE;AAJsB,WAAlB;AADH,SAAd;AAQD,OAVM,MAUA,IAAIjE,KAAJ,EAAW;AAEhB,aAAKuB,QAAL,CAAc;AACZe,UAAAA,aAAa,EAAE,IAAI3C,SAAJ,CAAcmC,EAAd,EAAkB;AAC/BqC,YAAAA,IAAI,EAAEnE,KADyB;AAE/B2E,YAAAA,UAAU,EAAE7E;AAFmB,WAAlB;AADH,SAAd;AAMD;AACF;;;;EAhMsCN,K;;SAApBmB,W;AAmMrBA,WAAW,CAACiE,SAAZ,GAAwB,aAAxB;AACAjE,WAAW,CAACZ,YAAZ,GAA2BA,YAA3B","sourcesContent":["// Copyright (c) 2015 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* global HTMLVideoElement */\nimport GL from '@luma.gl/constants';\nimport {Layer} from '@deck.gl/core';\nimport {Model, Geometry, Texture2D} from '@luma.gl/core';\n\nimport vs from './bitmap-layer-vertex';\nimport fs from './bitmap-layer-fragment';\n\nconst DEFAULT_TEXTURE_PARAMETERS = {\n  [GL.TEXTURE_MIN_FILTER]: GL.LINEAR_MIPMAP_LINEAR,\n  [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n  [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n  [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n};\n\nconst defaultProps = {\n  image: {type: 'object', value: null, async: true},\n  bounds: {type: 'array', value: [1, 0, 0, 1], compare: true},\n\n  desaturate: {type: 'number', min: 0, max: 1, value: 0},\n  // More context: because of the blending mode we're using for ground imagery,\n  // alpha is not effective when blending the bitmap layers with the base map.\n  // Instead we need to manually dim/blend rgb values with a background color.\n  transparentColor: {type: 'color', value: [0, 0, 0, 0]},\n  tintColor: {type: 'color', value: [255, 255, 255]}\n};\n\n/*\n * @class\n * @param {object} props\n * @param {number} props.transparentColor - color to interpret transparency to\n * @param {number} props.tintColor - color bias\n */\nexport default class BitmapLayer extends Layer {\n  getShaders() {\n    return super.getShaders({vs, fs, modules: ['project32', 'picking']});\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n\n    attributeManager.add({\n      positions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        update: this.calculatePositions,\n        noAlloc: true\n      }\n    });\n\n    this.setState({\n      numInstances: 1,\n      positions: new Float64Array(12)\n    });\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    // setup model first\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      this.setState({model: this._getModel(gl)});\n      this.getAttributeManager().invalidateAll();\n    }\n\n    if (props.image !== oldProps.image) {\n      this.loadTexture(props.image);\n    }\n\n    const attributeManager = this.getAttributeManager();\n\n    if (props.bounds !== oldProps.bounds) {\n      attributeManager.invalidate('positions');\n    }\n  }\n\n  finalizeState() {\n    super.finalizeState();\n\n    if (this.state.bitmapTexture) {\n      this.state.bitmapTexture.delete();\n    }\n  }\n\n  calculatePositions(attributes) {\n    const {positions} = this.state;\n    const {bounds} = this.props;\n    // bounds as [minX, minY, maxX, maxY]\n    if (Number.isFinite(bounds[0])) {\n      /*\n        (minX0, maxY3) ---- (maxX2, maxY3)\n               |                  |\n               |                  |\n               |                  |\n        (minX0, minY1) ---- (maxX2, minY1)\n     */\n      positions[0] = bounds[0];\n      positions[1] = bounds[1];\n      positions[2] = 0;\n\n      positions[3] = bounds[0];\n      positions[4] = bounds[3];\n      positions[5] = 0;\n\n      positions[6] = bounds[2];\n      positions[7] = bounds[3];\n      positions[8] = 0;\n\n      positions[9] = bounds[2];\n      positions[10] = bounds[1];\n      positions[11] = 0;\n    } else {\n      // [[minX, minY], [minX, maxY], [maxX, maxY], [maxX, minY]]\n      for (let i = 0; i < bounds.length; i++) {\n        positions[i * 3 + 0] = bounds[i][0];\n        positions[i * 3 + 1] = bounds[i][1];\n        positions[i * 3 + 2] = bounds[i][2] || 0;\n      }\n    }\n\n    attributes.value = positions;\n  }\n\n  _getModel(gl) {\n    if (!gl) {\n      return null;\n    }\n\n    /*\n      0,1 --- 1,1\n       |       |\n      0,0 --- 1,0\n    */\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLE_FAN,\n          vertexCount: 4,\n          attributes: {\n            texCoords: new Float32Array([0, 0, 0, 1, 1, 1, 1, 0])\n          }\n        }),\n        isInstanced: false\n      })\n    );\n  }\n\n  draw(opts) {\n    const {uniforms} = opts;\n    const {bitmapTexture, model} = this.state;\n    const {image, desaturate, transparentColor, tintColor} = this.props;\n\n    // Update video frame\n    if (\n      bitmapTexture &&\n      image instanceof HTMLVideoElement &&\n      image.readyState > HTMLVideoElement.HAVE_METADATA\n    ) {\n      const sizeChanged =\n        bitmapTexture.width !== image.videoWidth || bitmapTexture.height !== image.videoHeight;\n      if (sizeChanged) {\n        // note clears image and mipmaps when resizing\n        bitmapTexture.resize({width: image.videoWidth, height: image.videoHeight, mipmaps: true});\n        bitmapTexture.setSubImageData({\n          data: image,\n          paramters: DEFAULT_TEXTURE_PARAMETERS\n        });\n      } else {\n        bitmapTexture.setSubImageData({\n          data: image\n        });\n      }\n\n      bitmapTexture.generateMipmap();\n    }\n\n    // // TODO fix zFighting\n    // Render the image\n    if (bitmapTexture && model) {\n      model\n        .setUniforms(\n          Object.assign({}, uniforms, {\n            bitmapTexture,\n            desaturate,\n            transparentColor: transparentColor.map(x => x / 255),\n            tintColor: tintColor.slice(0, 3).map(x => x / 255)\n          })\n        )\n        .draw();\n    }\n  }\n\n  loadTexture(image) {\n    const {gl} = this.context;\n\n    if (this.state.bitmapTexture) {\n      this.state.bitmapTexture.delete();\n    }\n\n    if (image instanceof Texture2D) {\n      this.setState({bitmapTexture: image});\n    } else if (image instanceof HTMLVideoElement) {\n      // Initialize an empty texture while we wait for the video to load\n      this.setState({\n        bitmapTexture: new Texture2D(gl, {\n          width: 1,\n          height: 1,\n          parameters: DEFAULT_TEXTURE_PARAMETERS,\n          mipmaps: false\n        })\n      });\n    } else if (image) {\n      // Browser object: Image, ImageData, HTMLCanvasElement, ImageBitmap\n      this.setState({\n        bitmapTexture: new Texture2D(gl, {\n          data: image,\n          parameters: DEFAULT_TEXTURE_PARAMETERS\n        })\n      });\n    }\n  }\n}\n\nBitmapLayer.layerName = 'BitmapLayer';\nBitmapLayer.defaultProps = defaultProps;\n"],"file":"bitmap-layer.js"}