{"version":3,"sources":["../../../src/geojson-layer/geojson-layer.js"],"names":["CompositeLayer","ScatterplotLayer","PathLayer","PhongMaterial","SolidPolygonLayer","replaceInRange","getGeojsonFeatures","separateGeojsonFeatures","defaultLineColor","defaultFillColor","defaultMaterial","defaultProps","stroked","filled","extruded","wireframe","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","Number","MAX_SAFE_INTEGER","lineJointRounded","lineMiterLimit","elevationScale","pointRadiusScale","pointRadiusMinPixels","pointRadiusMaxPixels","lineDashJustified","getLineColor","type","value","getFillColor","getRadius","getLineWidth","getLineDashArray","getElevation","material","getCoordinates","f","geometry","coordinates","GeoJsonLayer","state","features","props","changeFlags","dataChanged","data","wrapFeature","getSubLayerRow","bind","Array","isArray","oldFeatures","newFeatures","featuresDiff","key","slice","dataRange","partialFeatures","push","getIndex","__source","index","replace","setState","pointFeatures","lineFeatures","polygonFeatures","polygonOutlineFeatures","transitions","updateTriggers","PolygonFillLayer","getSubLayerClass","PolygonStrokeLayer","LineStringsLayer","PointsLayer","polygonFillLayer","shouldRenderSubLayer","_dataDiff","getSubLayerAccessor","getPolygon","getSubLayerProps","id","polygonLineLayer","widthUnits","widthScale","widthMinPixels","widthMaxPixels","rounded","miterLimit","dashJustified","getColor","getWidth","getDashArray","getPath","pathLayer","pointLayer","radiusScale","radiusMinPixels","radiusMaxPixels","getPosition","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer} from '@deck.gl/core';\nimport ScatterplotLayer from '../scatterplot-layer/scatterplot-layer';\nimport PathLayer from '../path-layer/path-layer';\nimport {PhongMaterial} from '@luma.gl/core';\n// Use primitive layer to avoid \"Composite Composite\" layers for now\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\nimport {replaceInRange} from '../utils';\n\nimport {getGeojsonFeatures, separateGeojsonFeatures} from './geojson';\n\nconst defaultLineColor = [0, 0, 0, 255];\nconst defaultFillColor = [0, 0, 0, 255];\nconst defaultMaterial = new PhongMaterial();\n\nconst defaultProps = {\n  stroked: true,\n  filled: true,\n  extruded: false,\n  wireframe: false,\n\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  lineJointRounded: false,\n  lineMiterLimit: 4,\n\n  elevationScale: 1,\n\n  pointRadiusScale: 1,\n  pointRadiusMinPixels: 0, //  min point radius in pixels\n  pointRadiusMaxPixels: Number.MAX_SAFE_INTEGER, // max point radius in pixels\n\n  lineDashJustified: false,\n\n  // Line and polygon outline color\n  getLineColor: {type: 'accessor', value: defaultLineColor},\n  // Point and polygon fill color\n  getFillColor: {type: 'accessor', value: defaultFillColor},\n  // Point radius\n  getRadius: {type: 'accessor', value: 1},\n  // Line and polygon outline accessors\n  getLineWidth: {type: 'accessor', value: 1},\n  // Line dash array accessor\n  getLineDashArray: {type: 'accessor', value: [0, 0]},\n  // Polygon extrusion accessor\n  getElevation: {type: 'accessor', value: 1000},\n  // Optional material for 'lighting' shader module\n  material: defaultMaterial\n};\n\nfunction getCoordinates(f) {\n  return f.geometry.coordinates;\n}\n\nexport default class GeoJsonLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      features: {}\n    };\n  }\n\n  updateState({props, changeFlags}) {\n    if (!changeFlags.dataChanged) {\n      return;\n    }\n    const features = getGeojsonFeatures(props.data);\n    const wrapFeature = this.getSubLayerRow.bind(this);\n\n    if (Array.isArray(changeFlags.dataChanged)) {\n      const oldFeatures = this.state.features;\n      const newFeatures = {};\n      const featuresDiff = {};\n      for (const key in oldFeatures) {\n        newFeatures[key] = oldFeatures[key].slice();\n        featuresDiff[key] = [];\n      }\n\n      for (const dataRange of changeFlags.dataChanged) {\n        const partialFeatures = separateGeojsonFeatures(features, wrapFeature, dataRange);\n        for (const key in oldFeatures) {\n          featuresDiff[key].push(\n            replaceInRange({\n              data: newFeatures[key],\n              getIndex: f => f.__source.index,\n              dataRange,\n              replace: partialFeatures[key]\n            })\n          );\n        }\n      }\n      this.setState({features: newFeatures, featuresDiff});\n    } else {\n      this.setState({\n        features: separateGeojsonFeatures(features, wrapFeature),\n        featuresDiff: {}\n      });\n    }\n  }\n\n  /* eslint-disable complexity */\n  renderLayers() {\n    const {features, featuresDiff} = this.state;\n    const {pointFeatures, lineFeatures, polygonFeatures, polygonOutlineFeatures} = features;\n\n    // Layer composition props\n    const {stroked, filled, extruded, wireframe, material, transitions} = this.props;\n\n    // Rendering props underlying layer\n    const {\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      pointRadiusScale,\n      pointRadiusMinPixels,\n      pointRadiusMaxPixels,\n      elevationScale,\n      lineDashJustified\n    } = this.props;\n\n    // Accessor props for underlying layers\n    const {\n      getLineColor,\n      getFillColor,\n      getRadius,\n      getLineWidth,\n      getLineDashArray,\n      getElevation,\n      updateTriggers\n    } = this.props;\n\n    const PolygonFillLayer = this.getSubLayerClass('polygons-fill', SolidPolygonLayer);\n    const PolygonStrokeLayer = this.getSubLayerClass('polygons-stroke', PathLayer);\n    const LineStringsLayer = this.getSubLayerClass('line-strings', PathLayer);\n    const PointsLayer = this.getSubLayerClass('points', ScatterplotLayer);\n\n    // Filled Polygon Layer\n    const polygonFillLayer =\n      this.shouldRenderSubLayer('polygons-fill', polygonFeatures) &&\n      new PolygonFillLayer(\n        {\n          _dataDiff: featuresDiff.polygonFeatures && (() => featuresDiff.polygonFeatures),\n\n          extruded,\n          elevationScale,\n          filled,\n          wireframe,\n          material,\n          getElevation: this.getSubLayerAccessor(getElevation),\n          getFillColor: this.getSubLayerAccessor(getFillColor),\n          getLineColor: this.getSubLayerAccessor(getLineColor),\n\n          transitions: transitions && {\n            getPolygon: transitions.geometry,\n            getElevation: transitions.getElevation,\n            getFillColor: transitions.getFillColor,\n            getLineColor: transitions.getLineColor\n          }\n        },\n        this.getSubLayerProps({\n          id: 'polygons-fill',\n          updateTriggers: {\n            getElevation: updateTriggers.getElevation,\n            getFillColor: updateTriggers.getFillColor,\n            getLineColor: updateTriggers.getLineColor\n          }\n        }),\n        {\n          data: polygonFeatures,\n          getPolygon: getCoordinates\n        }\n      );\n\n    const polygonLineLayer =\n      !extruded &&\n      stroked &&\n      this.shouldRenderSubLayer('polygons-stroke', polygonOutlineFeatures) &&\n      new PolygonStrokeLayer(\n        {\n          _dataDiff:\n            featuresDiff.polygonOutlineFeatures && (() => featuresDiff.polygonOutlineFeatures),\n\n          widthUnits: lineWidthUnits,\n          widthScale: lineWidthScale,\n          widthMinPixels: lineWidthMinPixels,\n          widthMaxPixels: lineWidthMaxPixels,\n          rounded: lineJointRounded,\n          miterLimit: lineMiterLimit,\n          dashJustified: lineDashJustified,\n\n          getColor: this.getSubLayerAccessor(getLineColor),\n          getWidth: this.getSubLayerAccessor(getLineWidth),\n          getDashArray: this.getSubLayerAccessor(getLineDashArray),\n\n          transitions: transitions && {\n            getPath: transitions.geometry,\n            getColor: transitions.getLineColor,\n            getWidth: transitions.getLineWidth\n          }\n        },\n        this.getSubLayerProps({\n          id: 'polygons-stroke',\n          updateTriggers: {\n            getColor: updateTriggers.getLineColor,\n            getWidth: updateTriggers.getLineWidth,\n            getDashArray: updateTriggers.getLineDashArray\n          }\n        }),\n        {\n          data: polygonOutlineFeatures,\n          getPath: getCoordinates\n        }\n      );\n\n    const pathLayer =\n      this.shouldRenderSubLayer('linestrings', lineFeatures) &&\n      new LineStringsLayer(\n        {\n          _dataDiff: featuresDiff.lineFeatures && (() => featuresDiff.lineFeatures),\n\n          widthUnits: lineWidthUnits,\n          widthScale: lineWidthScale,\n          widthMinPixels: lineWidthMinPixels,\n          widthMaxPixels: lineWidthMaxPixels,\n          rounded: lineJointRounded,\n          miterLimit: lineMiterLimit,\n          dashJustified: lineDashJustified,\n\n          getColor: this.getSubLayerAccessor(getLineColor),\n          getWidth: this.getSubLayerAccessor(getLineWidth),\n          getDashArray: this.getSubLayerAccessor(getLineDashArray),\n\n          transitions: transitions && {\n            getPath: transitions.geometry,\n            getColor: transitions.getLineColor,\n            getWidth: transitions.getLineWidth\n          }\n        },\n        this.getSubLayerProps({\n          id: 'line-strings',\n          updateTriggers: {\n            getColor: updateTriggers.getLineColor,\n            getWidth: updateTriggers.getLineWidth,\n            getDashArray: updateTriggers.getLineDashArray\n          }\n        }),\n        {\n          data: lineFeatures,\n          getPath: getCoordinates\n        }\n      );\n\n    const pointLayer =\n      this.shouldRenderSubLayer('points', pointFeatures) &&\n      new PointsLayer(\n        {\n          _dataDiff: featuresDiff.pointFeatures && (() => featuresDiff.pointFeatures),\n\n          stroked,\n          filled,\n          radiusScale: pointRadiusScale,\n          radiusMinPixels: pointRadiusMinPixels,\n          radiusMaxPixels: pointRadiusMaxPixels,\n          lineWidthUnits,\n          lineWidthScale,\n          lineWidthMinPixels,\n          lineWidthMaxPixels,\n\n          getFillColor: this.getSubLayerAccessor(getFillColor),\n          getLineColor: this.getSubLayerAccessor(getLineColor),\n          getRadius: this.getSubLayerAccessor(getRadius),\n          getLineWidth: this.getSubLayerAccessor(getLineWidth),\n\n          transitions: transitions && {\n            getPosition: transitions.geometry,\n            getFillColor: transitions.getFillColor,\n            getLineColor: transitions.getLineColor,\n            getRadius: transitions.getRadius,\n            getLineWidth: transitions.getLineWidth\n          }\n        },\n        this.getSubLayerProps({\n          id: 'points',\n          updateTriggers: {\n            getFillColor: updateTriggers.getFillColor,\n            getLineColor: updateTriggers.getLineColor,\n            getRadius: updateTriggers.getRadius,\n            getLineWidth: updateTriggers.getLineWidth\n          }\n        }),\n        {\n          data: pointFeatures,\n          getPosition: getCoordinates\n        }\n      );\n\n    return [\n      // If not extruded: flat fill layer is drawn below outlines\n      !extruded && polygonFillLayer,\n      polygonLineLayer,\n      pathLayer,\n      pointLayer,\n      // If extruded: draw fill layer last for correct blending behavior\n      extruded && polygonFillLayer\n    ];\n  }\n  /* eslint-enable complexity */\n}\n\nGeoJsonLayer.layerName = 'GeoJsonLayer';\nGeoJsonLayer.defaultProps = defaultProps;\n"],"file":"geojson-layer.js"}