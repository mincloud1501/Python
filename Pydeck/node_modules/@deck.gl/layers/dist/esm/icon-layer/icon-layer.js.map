{"version":3,"sources":["../../../src/icon-layer/icon-layer.js"],"names":["Layer","Model","Geometry","vs","fs","IconManager","DEFAULT_COLOR","defaultProps","iconAtlas","type","value","async","iconMapping","sizeScale","min","billboard","sizeUnits","sizeMinPixels","sizeMaxPixels","Number","MAX_SAFE_INTEGER","alphaCutoff","max","getPosition","x","position","getIcon","icon","getColor","getSize","getAngle","IconLayer","modules","state","iconManager","context","gl","onUpdate","_onUpdate","attributeManager","getAttributeManager","addInstanced","instancePositions","size","fp64","use64bitPositions","transition","accessor","instanceSizes","defaultValue","instanceOffsets","transform","getInstanceOffset","instanceIconFrames","getInstanceIconFrame","instanceColorModes","getInstanceColorMode","instanceColors","props","colorFormat","length","normalized","instanceAngles","oldProps","changeFlags","data","iconMappingChanged","prePacked","_asyncPropOriginalValues","setProps","autoPacking","dataChanged","updateTriggersChanged","all","invalidate","extensionsChanged","model","setState","_getModel","invalidateAll","finalize","uniforms","viewport","iconsTexture","getTexture","loaded","setUniforms","Object","assign","iconsTextureDim","width","height","distanceScales","metersPerPixel","draw","positions","getShaders","id","geometry","drawMode","attributes","Float32Array","isInstanced","setNeedsRedraw","rect","getIconMapping","anchorX","anchorY","mapping","mask","y","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport {Layer} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport vs from './icon-layer-vertex.glsl';\nimport fs from './icon-layer-fragment.glsl';\nimport IconManager from './icon-manager';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n/*\n * @param {object} props\n * @param {Texture2D | string} props.iconAtlas - atlas image url or texture\n * @param {object} props.iconMapping - icon names mapped to icon definitions\n * @param {object} props.iconMapping[icon_name].x - x position of icon on the atlas image\n * @param {object} props.iconMapping[icon_name].y - y position of icon on the atlas image\n * @param {object} props.iconMapping[icon_name].width - width of icon on the atlas image\n * @param {object} props.iconMapping[icon_name].height - height of icon on the atlas image\n * @param {object} props.iconMapping[icon_name].anchorX - x anchor of icon on the atlas image,\n *   default to width / 2\n * @param {object} props.iconMapping[icon_name].anchorY - y anchor of icon on the atlas image,\n *   default to height / 2\n * @param {object} props.iconMapping[icon_name].mask - whether icon is treated as a transparency\n *   mask. If true, user defined color is applied. If false, original color from the image is\n *   applied. Default to false.\n * @param {number} props.size - icon size in pixels\n * @param {func} props.getPosition - returns anchor position of the icon, in [lng, lat, z]\n * @param {func} props.getIcon - returns icon name as a string\n * @param {func} props.getSize - returns icon size multiplier as a number\n * @param {func} props.getColor - returns color of the icon in [r, g, b, a]. Only works on icons\n *   with mask: true.\n * @param {func} props.getAngle - returns rotating angle (in degree) of the icon.\n */\nconst defaultProps = {\n  iconAtlas: {type: 'object', value: null, async: true},\n  iconMapping: {type: 'object', value: {}, async: true},\n  sizeScale: {type: 'number', value: 1, min: 0},\n  billboard: true,\n  sizeUnits: 'pixels',\n  sizeMinPixels: {type: 'number', min: 0, value: 0}, //  min point radius in pixels\n  sizeMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER}, // max point radius in pixels\n  alphaCutoff: {type: 'number', value: 0.05, min: 0, max: 1},\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getIcon: {type: 'accessor', value: x => x.icon},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getSize: {type: 'accessor', value: 1},\n  getAngle: {type: 'accessor', value: 0}\n};\n\nexport default class IconLayer extends Layer {\n  getShaders() {\n    return super.getShaders({vs, fs, modules: ['project32', 'picking']});\n  }\n\n  initializeState() {\n    this.state = {\n      iconManager: new IconManager(this.context.gl, {onUpdate: () => this._onUpdate()})\n    };\n\n    const attributeManager = this.getAttributeManager();\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceSizes: {\n        size: 1,\n        transition: true,\n        accessor: 'getSize',\n        defaultValue: 1\n      },\n      instanceOffsets: {size: 2, accessor: 'getIcon', transform: this.getInstanceOffset},\n      instanceIconFrames: {size: 4, accessor: 'getIcon', transform: this.getInstanceIconFrame},\n      instanceColorModes: {\n        size: 1,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getIcon',\n        transform: this.getInstanceColorMode\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceAngles: {\n        size: 1,\n        transition: true,\n        accessor: 'getAngle',\n        defaultValue: 0\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  /* eslint-disable max-statements, complexity */\n  updateState({oldProps, props, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n\n    const attributeManager = this.getAttributeManager();\n    const {iconManager} = this.state;\n    const {iconAtlas, iconMapping, data, getIcon} = props;\n\n    let iconMappingChanged = false;\n    const prePacked = iconAtlas || this.props._asyncPropOriginalValues.iconAtlas;\n\n    // prepacked iconAtlas from user\n    if (prePacked) {\n      if (oldProps.iconAtlas !== props.iconAtlas) {\n        iconManager.setProps({iconAtlas, autoPacking: false});\n      }\n\n      if (oldProps.iconMapping !== props.iconMapping) {\n        iconManager.setProps({iconMapping});\n        iconMappingChanged = true;\n      }\n    } else {\n      // otherwise, use autoPacking\n      iconManager.setProps({autoPacking: true});\n    }\n\n    if (\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getIcon))\n    ) {\n      iconManager.setProps({data, getIcon});\n      iconMappingChanged = true;\n    }\n\n    if (iconMappingChanged) {\n      attributeManager.invalidate('instanceOffsets');\n      attributeManager.invalidate('instanceIconFrames');\n      attributeManager.invalidate('instanceColorModes');\n    }\n\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      this.setState({model: this._getModel(gl)});\n      attributeManager.invalidateAll();\n    }\n  }\n  /* eslint-enable max-statements, complexity */\n\n  finalizeState() {\n    super.finalizeState();\n    // Release resources held by the icon manager\n    this.state.iconManager.finalize();\n  }\n\n  draw({uniforms}) {\n    const {sizeScale, sizeMinPixels, sizeMaxPixels, sizeUnits, billboard, alphaCutoff} = this.props;\n    const {iconManager} = this.state;\n    const {viewport} = this.context;\n\n    const iconsTexture = iconManager.getTexture();\n    if (iconsTexture && iconsTexture.loaded) {\n      this.state.model\n        .setUniforms(\n          Object.assign({}, uniforms, {\n            iconsTexture,\n            iconsTextureDim: [iconsTexture.width, iconsTexture.height],\n            sizeScale:\n              sizeScale * (sizeUnits === 'pixels' ? viewport.distanceScales.metersPerPixel[2] : 1),\n            sizeMinPixels,\n            sizeMaxPixels,\n            billboard,\n            alphaCutoff\n          })\n        )\n        .draw();\n    }\n  }\n\n  _getModel(gl) {\n    const positions = [-1, -1, 0, -1, 1, 0, 1, 1, 0, 1, -1, 0];\n\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLE_FAN,\n          attributes: {\n            positions: new Float32Array(positions)\n          }\n        }),\n        isInstanced: true\n      })\n    );\n  }\n\n  _onUpdate() {\n    this.setNeedsRedraw();\n  }\n\n  getInstanceOffset(icon) {\n    const rect = this.state.iconManager.getIconMapping(icon);\n    return [rect.width / 2 - rect.anchorX || 0, rect.height / 2 - rect.anchorY || 0];\n  }\n\n  getInstanceColorMode(icon) {\n    const mapping = this.state.iconManager.getIconMapping(icon);\n    return mapping.mask ? 1 : 0;\n  }\n\n  getInstanceIconFrame(icon) {\n    const rect = this.state.iconManager.getIconMapping(icon);\n    return [rect.x || 0, rect.y || 0, rect.width || 0, rect.height || 0];\n  }\n}\n\nIconLayer.layerName = 'IconLayer';\nIconLayer.defaultProps = defaultProps;\n"],"file":"icon-layer.js"}