{"version":3,"sources":["../../../src/path-layer/path-tesselator.js"],"names":["experimental","Tesselator","START_CAP","END_CAP","INVALID","PathTesselator","constructor","data","getGeometry","positionFormat","fp64","attributes","startPositions","size","padding","type","Float64Array","Float32Array","endPositions","segmentTypes","Uint8ClampedArray","startPositions64XyLow","fp64Only","endPositions64XyLow","get","attributeName","getGeometrySize","path","numPoints","getPathLength","isClosed","updateGeometryAttributes","context","geometrySize","isPathClosed","startPoint","endPoint","i","vertexStart","ptIndex","getPointOnPath","Number","isFinite","length","positionSize","index","firstPoint","lastPoint"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport {experimental} from '@deck.gl/core';\nconst {Tesselator} = experimental;\n\nconst START_CAP = 1;\nconst END_CAP = 2;\nconst INVALID = 4;\n\n// This class is set up to allow querying one attribute at a time\n// the way the AttributeManager expects it\nexport default class PathTesselator extends Tesselator {\n  constructor({data, getGeometry, positionFormat, fp64}) {\n    super({\n      data,\n      getGeometry,\n      positionFormat,\n      attributes: {\n        startPositions: {size: 3, padding: 3, type: fp64 ? Float64Array : Float32Array},\n        endPositions: {size: 3, padding: 3, type: fp64 ? Float64Array : Float32Array},\n        segmentTypes: {size: 1, type: Uint8ClampedArray},\n        startPositions64XyLow: {size: 2, padding: 2, fp64Only: true},\n        endPositions64XyLow: {size: 2, padding: 2, fp64Only: true}\n      }\n    });\n  }\n\n  /* Getters */\n  get(attributeName) {\n    return this.attributes[attributeName];\n  }\n\n  /* Implement base Tesselator interface */\n  getGeometrySize(path) {\n    const numPoints = this.getPathLength(path);\n    if (numPoints < 2) {\n      // invalid path\n      return 0;\n    }\n    if (this.isClosed(path)) {\n      // minimum 3 vertices\n      return numPoints < 3 ? 0 : numPoints + 1;\n    }\n    return numPoints - 1;\n  }\n\n  /* eslint-disable max-statements, complexity */\n  updateGeometryAttributes(path, context) {\n    const {\n      attributes: {startPositions, endPositions, segmentTypes}\n    } = this;\n\n    const {geometrySize} = context;\n    if (geometrySize === 0) {\n      return;\n    }\n    const isPathClosed = this.isClosed(path);\n\n    let startPoint;\n    let endPoint;\n\n    // startPositions   --  A0  B0 B1 B2 B3 B0 B1\n    // endPositions         A1  B1 B2 B3 B0 B1 B2  --\n    // segmentTypes         3   4  0  0  0  0  4\n    for (let i = context.vertexStart, ptIndex = 0; ptIndex < geometrySize; i++, ptIndex++) {\n      startPoint = endPoint || this.getPointOnPath(path, 0);\n      endPoint = this.getPointOnPath(path, ptIndex + 1);\n\n      segmentTypes[i] = 0;\n      if (ptIndex === 0) {\n        if (isPathClosed) {\n          segmentTypes[i] += INVALID;\n        } else {\n          segmentTypes[i] += START_CAP;\n        }\n      }\n      if (ptIndex === geometrySize - 1) {\n        if (isPathClosed) {\n          segmentTypes[i] += INVALID;\n        } else {\n          segmentTypes[i] += END_CAP;\n        }\n      }\n\n      startPositions[i * 3 + 3] = startPoint[0];\n      startPositions[i * 3 + 4] = startPoint[1];\n      startPositions[i * 3 + 5] = startPoint[2] || 0;\n\n      endPositions[i * 3] = endPoint[0];\n      endPositions[i * 3 + 1] = endPoint[1];\n      endPositions[i * 3 + 2] = endPoint[2] || 0;\n    }\n  }\n  /* eslint-enable max-statements, complexity */\n\n  /* Utilities */\n  getPathLength(path) {\n    if (Number.isFinite(path[0])) {\n      // flat format\n      return path.length / this.positionSize;\n    }\n    return path.length;\n  }\n\n  getPointOnPath(path, index) {\n    if (Number.isFinite(path[0])) {\n      // flat format\n      const {positionSize} = this;\n      if (index * positionSize >= path.length) {\n        // loop\n        index += 1 - path.length / positionSize;\n      }\n      // TODO - avoid creating new arrays when using binary\n      return [\n        path[index * positionSize],\n        path[index * positionSize + 1],\n        positionSize === 3 ? path[index * positionSize + 2] : 0\n      ];\n    }\n    if (index >= path.length) {\n      // loop\n      index += 1 - path.length;\n    }\n    return path[index];\n  }\n\n  isClosed(path) {\n    const numPoints = this.getPathLength(path);\n    const firstPoint = this.getPointOnPath(path, 0);\n    const lastPoint = this.getPointOnPath(path, numPoints - 1);\n    return (\n      firstPoint[0] === lastPoint[0] &&\n      firstPoint[1] === lastPoint[1] &&\n      firstPoint[2] === lastPoint[2]\n    );\n  }\n}\n"],"file":"path-tesselator.js"}