{"version":3,"sources":["../../../src/polygon-layer/polygon-layer.js"],"names":["PhongMaterial","CompositeLayer","createIterable","SolidPolygonLayer","PathLayer","Polygon","replaceInRange","defaultLineColor","defaultFillColor","defaultMaterial","defaultProps","stroked","filled","extruded","elevationScale","wireframe","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","Number","MAX_SAFE_INTEGER","lineJointRounded","lineMiterLimit","lineDashJustified","getPolygon","type","value","f","polygon","getFillColor","getLineColor","getLineWidth","getLineDashArray","getElevation","material","PolygonLayer","initializeState","state","paths","updateState","oldProps","props","changeFlags","geometryChanged","dataChanged","updateTriggersChanged","all","Array","isArray","slice","pathsDiff","map","dataRange","data","getIndex","p","__source","index","replace","_getPaths","setState","positionFormat","positionSize","startRow","endRow","iterable","objectInfo","object","positions","holeIndices","normalize","i","length","path","subarray","push","getSubLayerRow","renderLayers","_dataDiff","transitions","updateTriggers","FillLayer","getSubLayerClass","StrokeLayer","polygonLayer","shouldRenderSubLayer","getSubLayerProps","id","polygonLineLayer","widthUnits","widthScale","widthMinPixels","widthMaxPixels","rounded","miterLimit","dashJustified","getWidth","getColor","getPath","getSubLayerAccessor","getDashArray","x","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {PhongMaterial} from '@luma.gl/core';\nimport {CompositeLayer, createIterable} from '@deck.gl/core';\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\nimport PathLayer from '../path-layer/path-layer';\nimport * as Polygon from '../solid-polygon-layer/polygon';\nimport {replaceInRange} from '../utils';\n\nconst defaultLineColor = [0, 0, 0, 255];\nconst defaultFillColor = [0, 0, 0, 255];\nconst defaultMaterial = new PhongMaterial();\n\nconst defaultProps = {\n  stroked: true,\n  filled: true,\n  extruded: false,\n  elevationScale: 1,\n  wireframe: false,\n\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  lineJointRounded: false,\n  lineMiterLimit: 4,\n  lineDashJustified: false,\n\n  getPolygon: {type: 'accessor', value: f => f.polygon},\n  // Polygon fill color\n  getFillColor: {type: 'accessor', value: defaultFillColor},\n  // Point, line and polygon outline color\n  getLineColor: {type: 'accessor', value: defaultLineColor},\n  // Line and polygon outline accessors\n  getLineWidth: {type: 'accessor', value: 1},\n  // Line dash array accessor\n  getLineDashArray: {type: 'accessor', value: [0, 0]},\n  // Polygon extrusion accessor\n  getElevation: {type: 'accessor', value: 1000},\n\n  // Optional material for 'lighting' shader module\n  material: defaultMaterial\n};\n\nexport default class PolygonLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      paths: []\n    };\n  }\n\n  updateState({oldProps, props, changeFlags}) {\n    const geometryChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon));\n\n    if (geometryChanged && Array.isArray(changeFlags.dataChanged)) {\n      const paths = this.state.paths.slice();\n      const pathsDiff = changeFlags.dataChanged.map(dataRange =>\n        replaceInRange({\n          data: paths,\n          getIndex: p => p.__source.index,\n          dataRange,\n          replace: this._getPaths(dataRange)\n        })\n      );\n      this.setState({paths, pathsDiff});\n    } else if (geometryChanged) {\n      this.setState({\n        paths: this._getPaths(),\n        pathsDiff: null\n      });\n    }\n  }\n\n  _getPaths(dataRange = {}) {\n    const {data, getPolygon, positionFormat} = this.props;\n    const paths = [];\n    const positionSize = positionFormat === 'XY' ? 2 : 3;\n    const {startRow, endRow} = dataRange;\n\n    const {iterable, objectInfo} = createIterable(data, startRow, endRow);\n    for (const object of iterable) {\n      objectInfo.index++;\n      const {positions, holeIndices} = Polygon.normalize(\n        getPolygon(object, objectInfo),\n        positionSize\n      );\n\n      if (holeIndices) {\n        // split the positions array into `holeIndices.length + 1` rings\n        // holeIndices[-1] falls back to 0\n        // holeIndices[holeIndices.length] falls back to positions.length\n        for (let i = 0; i <= holeIndices.length; i++) {\n          const path = positions.subarray(\n            holeIndices[i - 1] || 0,\n            holeIndices[i] || positions.length\n          );\n          paths.push(this.getSubLayerRow({path}, object, objectInfo.index));\n        }\n      } else {\n        paths.push(this.getSubLayerRow({path: positions}, object, objectInfo.index));\n      }\n    }\n    return paths;\n  }\n\n  /* eslint-disable complexity */\n  renderLayers() {\n    // Layer composition props\n    const {\n      data,\n      _dataDiff,\n      stroked,\n      filled,\n      extruded,\n      wireframe,\n      elevationScale,\n      transitions,\n      positionFormat\n    } = this.props;\n\n    // Rendering props underlying layer\n    const {\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      lineDashJustified\n    } = this.props;\n\n    // Accessor props for underlying layers\n    const {\n      getFillColor,\n      getLineColor,\n      getLineWidth,\n      getLineDashArray,\n      getElevation,\n      getPolygon,\n      updateTriggers,\n      material\n    } = this.props;\n\n    const {paths, pathsDiff} = this.state;\n\n    const FillLayer = this.getSubLayerClass('fill', SolidPolygonLayer);\n    const StrokeLayer = this.getSubLayerClass('stroke', PathLayer);\n\n    // Filled Polygon Layer\n    const polygonLayer =\n      this.shouldRenderSubLayer('fill', paths) &&\n      new FillLayer(\n        {\n          _dataDiff,\n          extruded,\n          elevationScale,\n\n          filled,\n          wireframe,\n\n          getElevation,\n          getFillColor,\n          getLineColor,\n\n          material,\n          transitions\n        },\n        this.getSubLayerProps({\n          id: 'fill',\n          updateTriggers: {\n            getPolygon: updateTriggers.getPolygon,\n            getElevation: updateTriggers.getElevation,\n            getFillColor: updateTriggers.getFillColor,\n            getLineColor: updateTriggers.getLineColor\n          }\n        }),\n        {\n          data,\n          positionFormat,\n          getPolygon\n        }\n      );\n\n    // Polygon line layer\n    const polygonLineLayer =\n      !extruded &&\n      stroked &&\n      this.shouldRenderSubLayer('stroke', paths) &&\n      new StrokeLayer(\n        {\n          _dataDiff: pathsDiff && (() => pathsDiff),\n          widthUnits: lineWidthUnits,\n          widthScale: lineWidthScale,\n          widthMinPixels: lineWidthMinPixels,\n          widthMaxPixels: lineWidthMaxPixels,\n          rounded: lineJointRounded,\n          miterLimit: lineMiterLimit,\n          dashJustified: lineDashJustified,\n\n          transitions: transitions && {\n            getWidth: transitions.getLineWidth,\n            getColor: transitions.getLineColor,\n            getPath: transitions.getPolygon\n          },\n\n          getColor: this.getSubLayerAccessor(getLineColor),\n          getWidth: this.getSubLayerAccessor(getLineWidth),\n          getDashArray: this.getSubLayerAccessor(getLineDashArray)\n        },\n        this.getSubLayerProps({\n          id: 'stroke',\n          updateTriggers: {\n            getWidth: updateTriggers.getLineWidth,\n            getColor: updateTriggers.getLineColor,\n            getDashArray: updateTriggers.getLineDashArray\n          }\n        }),\n        {\n          data: paths,\n          positionFormat,\n          getPath: x => x.path\n        }\n      );\n\n    return [\n      // If not extruded: flat fill layer is drawn below outlines\n      !extruded && polygonLayer,\n      polygonLineLayer,\n      // If extruded: draw fill layer last for correct blending behavior\n      extruded && polygonLayer\n    ];\n  }\n  /* eslint-enable complexity */\n}\n\nPolygonLayer.layerName = 'PolygonLayer';\nPolygonLayer.defaultProps = defaultProps;\n"],"file":"polygon-layer.js"}