{"version":3,"sources":["../../../src/text-layer/text-layer.js"],"names":["CompositeLayer","createIterable","MultiIconLayer","FontAtlasManager","DEFAULT_CHAR_SET","DEFAULT_FONT_FAMILY","DEFAULT_FONT_WEIGHT","DEFAULT_FONT_SIZE","DEFAULT_BUFFER","DEFAULT_RADIUS","DEFAULT_CUTOFF","replaceInRange","transformParagraph","DEFAULT_FONT_SETTINGS","fontSize","buffer","sdf","radius","cutoff","TEXT_ANCHOR","start","middle","end","ALIGNMENT_BASELINE","top","center","bottom","DEFAULT_COLOR","DEFAULT_LINE_HEIGHT","FONT_SETTINGS_PROPS","defaultProps","billboard","sizeScale","sizeUnits","sizeMinPixels","sizeMaxPixels","Number","MAX_SAFE_INTEGER","characterSet","fontFamily","fontWeight","lineHeight","fontSettings","getText","type","value","x","text","getPosition","position","getColor","getSize","getAngle","getTextAnchor","getAlignmentBaseline","getPixelOffset","TextLayer","initializeState","state","fontAtlasManager","context","gl","updateState","props","oldProps","changeFlags","fontChanged","updateFontAtlas","textChanged","dataChanged","updateTriggersChanged","all","Array","isArray","data","slice","dataDiff","map","dataRange","getIndex","p","__source","index","replace","transformStringToLetters","setState","finalizeState","finalize","setProps","Object","assign","scale","texture","mapping","iconAtlas","iconMapping","setNeedsRedraw","oldFontSettings","some","prop","getPickingInfo","info","object","startRow","endRow","iterable","objectInfo","transformedData","transformCharacter","transformed","getSubLayerRow","getAnchorXFromTextAnchor","getSubLayerAccessor","getAnchorYFromAlignmentBaseline","renderLayers","transitions","updateTriggers","SubLayerClass","getSubLayerClass","_dataDiff","getAnchorX","getAnchorY","getPickingIndex","obj","getSubLayerProps","id","getIcon","d","getRowSize","rowSize","getOffsets","offsetLeft","offsetTop","getParagraphSize","size","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer, createIterable} from '@deck.gl/core';\nimport MultiIconLayer from './multi-icon-layer/multi-icon-layer';\nimport FontAtlasManager, {\n  DEFAULT_CHAR_SET,\n  DEFAULT_FONT_FAMILY,\n  DEFAULT_FONT_WEIGHT,\n  DEFAULT_FONT_SIZE,\n  DEFAULT_BUFFER,\n  DEFAULT_RADIUS,\n  DEFAULT_CUTOFF\n} from './font-atlas-manager';\nimport {replaceInRange} from '../utils';\nimport {transformParagraph} from './utils';\n\nconst DEFAULT_FONT_SETTINGS = {\n  fontSize: DEFAULT_FONT_SIZE,\n  buffer: DEFAULT_BUFFER,\n  sdf: false,\n  radius: DEFAULT_RADIUS,\n  cutoff: DEFAULT_CUTOFF\n};\n\nconst TEXT_ANCHOR = {\n  start: 1,\n  middle: 0,\n  end: -1\n};\n\nconst ALIGNMENT_BASELINE = {\n  top: 1,\n  center: 0,\n  bottom: -1\n};\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst DEFAULT_LINE_HEIGHT = 1.0;\n\nconst FONT_SETTINGS_PROPS = ['fontSize', 'buffer', 'sdf', 'radius', 'cutoff'];\n\nconst defaultProps = {\n  billboard: true,\n  sizeScale: 1,\n  sizeUnits: 'pixels',\n  sizeMinPixels: 0,\n  sizeMaxPixels: Number.MAX_SAFE_INTEGER,\n\n  characterSet: DEFAULT_CHAR_SET,\n  fontFamily: DEFAULT_FONT_FAMILY,\n  fontWeight: DEFAULT_FONT_WEIGHT,\n  lineHeight: DEFAULT_LINE_HEIGHT,\n  fontSettings: {},\n\n  getText: {type: 'accessor', value: x => x.text},\n  getPosition: {type: 'accessor', value: x => x.position},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getSize: {type: 'accessor', value: 32},\n  getAngle: {type: 'accessor', value: 0},\n  getTextAnchor: {type: 'accessor', value: 'middle'},\n  getAlignmentBaseline: {type: 'accessor', value: 'center'},\n  getPixelOffset: {type: 'accessor', value: [0, 0]}\n};\n\nexport default class TextLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      fontAtlasManager: new FontAtlasManager(this.context.gl)\n    };\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    const fontChanged = this.fontChanged(oldProps, props);\n    if (fontChanged) {\n      this.updateFontAtlas({oldProps, props});\n    }\n\n    const textChanged =\n      changeFlags.dataChanged ||\n      fontChanged ||\n      props.lineHeight !== oldProps.lineHeight ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getText));\n\n    if (textChanged && Array.isArray(changeFlags.dataChanged)) {\n      const data = this.state.data.slice();\n      const dataDiff = changeFlags.dataChanged.map(dataRange =>\n        replaceInRange({\n          data,\n          getIndex: p => p.__source.index,\n          dataRange,\n          replace: this.transformStringToLetters(dataRange)\n        })\n      );\n      this.setState({data, dataDiff});\n    } else if (textChanged) {\n      this.setState({\n        data: this.transformStringToLetters(),\n        dataDiff: null\n      });\n    }\n  }\n\n  finalizeState() {\n    super.finalizeState();\n    // Release resources held by the font atlas manager\n    this.state.fontAtlasManager.finalize();\n  }\n\n  updateFontAtlas({oldProps, props}) {\n    const {characterSet, fontSettings, fontFamily, fontWeight} = props;\n\n    // generate test characterSet\n    const fontAtlasManager = this.state.fontAtlasManager;\n    fontAtlasManager.setProps(\n      Object.assign({}, DEFAULT_FONT_SETTINGS, fontSettings, {\n        characterSet,\n        fontFamily,\n        fontWeight\n      })\n    );\n\n    const {scale, texture, mapping} = fontAtlasManager;\n\n    this.setState({\n      scale,\n      iconAtlas: texture,\n      iconMapping: mapping\n    });\n\n    this.setNeedsRedraw(true);\n  }\n\n  fontChanged(oldProps, props) {\n    if (\n      oldProps.fontFamily !== props.fontFamily ||\n      oldProps.characterSet !== props.characterSet ||\n      oldProps.fontWeight !== props.fontWeight\n    ) {\n      return true;\n    }\n\n    if (oldProps.fontSettings === props.fontSettings) {\n      return false;\n    }\n\n    const oldFontSettings = oldProps.fontSettings || {};\n    const fontSettings = props.fontSettings || {};\n\n    return FONT_SETTINGS_PROPS.some(prop => oldFontSettings[prop] !== fontSettings[prop]);\n  }\n\n  getPickingInfo({info}) {\n    // because `TextLayer` assign the same pickingInfoIndex for one text label,\n    // here info.index refers the index of text label in props.data\n    return Object.assign(info, {\n      // override object with original data\n      object: info.index >= 0 ? this.props.data[info.index] : null\n    });\n  }\n\n  /* eslint-disable no-loop-func */\n  transformStringToLetters(dataRange = {}) {\n    const {data, lineHeight, getText} = this.props;\n    const {iconMapping} = this.state;\n    const {startRow, endRow} = dataRange;\n    const {iterable, objectInfo} = createIterable(data, startRow, endRow);\n\n    const transformedData = [];\n\n    for (const object of iterable) {\n      const transformCharacter = transformed => {\n        return this.getSubLayerRow(transformed, object, objectInfo.index);\n      };\n\n      objectInfo.index++;\n      const text = getText(object, objectInfo);\n      if (text) {\n        transformParagraph(text, lineHeight, iconMapping, transformCharacter, transformedData);\n      }\n    }\n\n    return transformedData;\n  }\n\n  getAnchorXFromTextAnchor(getTextAnchor) {\n    if (typeof getTextAnchor === 'function') {\n      getTextAnchor = this.getSubLayerAccessor(getTextAnchor);\n      return x => TEXT_ANCHOR[getTextAnchor(x)] || 0;\n    }\n    return () => TEXT_ANCHOR[getTextAnchor] || 0;\n  }\n\n  getAnchorYFromAlignmentBaseline(getAlignmentBaseline) {\n    if (typeof getAlignmentBaseline === 'function') {\n      getAlignmentBaseline = this.getSubLayerAccessor(getAlignmentBaseline);\n      return x => TEXT_ANCHOR[getAlignmentBaseline(x)] || 0;\n    }\n    return () => ALIGNMENT_BASELINE[getAlignmentBaseline] || 0;\n  }\n\n  renderLayers() {\n    const {data, dataDiff, scale, iconAtlas, iconMapping} = this.state;\n\n    const {\n      getPosition,\n      getColor,\n      getSize,\n      getAngle,\n      getTextAnchor,\n      getAlignmentBaseline,\n      getPixelOffset,\n      billboard,\n      sdf,\n      sizeScale,\n      sizeUnits,\n      sizeMinPixels,\n      sizeMaxPixels,\n      transitions,\n      updateTriggers\n    } = this.props;\n\n    const SubLayerClass = this.getSubLayerClass('characters', MultiIconLayer);\n\n    return new SubLayerClass(\n      {\n        sdf,\n        iconAtlas,\n        iconMapping,\n\n        _dataDiff: dataDiff && (() => dataDiff),\n\n        getPosition: this.getSubLayerAccessor(getPosition),\n        getColor: this.getSubLayerAccessor(getColor),\n        getSize: this.getSubLayerAccessor(getSize),\n        getAngle: this.getSubLayerAccessor(getAngle),\n        getAnchorX: this.getAnchorXFromTextAnchor(getTextAnchor),\n        getAnchorY: this.getAnchorYFromAlignmentBaseline(getAlignmentBaseline),\n        getPixelOffset: this.getSubLayerAccessor(getPixelOffset),\n        getPickingIndex: obj => obj.__source.index,\n        billboard,\n        sizeScale: sizeScale * scale,\n        sizeUnits,\n        sizeMinPixels: sizeMinPixels * scale,\n        sizeMaxPixels: sizeMaxPixels * scale,\n\n        transitions: transitions && {\n          getPosition: transitions.getPosition,\n          getAngle: transitions.getAngle,\n          getColor: transitions.getColor,\n          getSize: transitions.getSize,\n          getPixelOffset: updateTriggers.getPixelOffset\n        }\n      },\n      this.getSubLayerProps({\n        id: 'characters',\n        updateTriggers: {\n          getPosition: updateTriggers.getPosition,\n          getAngle: updateTriggers.getAngle,\n          getColor: updateTriggers.getColor,\n          getSize: updateTriggers.getSize,\n          getPixelOffset: updateTriggers.getPixelOffset,\n          getAnchorX: updateTriggers.getTextAnchor,\n          getAnchorY: updateTriggers.getAlignmentBaseline\n        }\n      }),\n      {\n        data,\n        getIcon: d => d.text,\n        getRowSize: d => d.rowSize,\n        getOffsets: d => [d.offsetLeft, d.offsetTop],\n        getParagraphSize: d => d.size\n      }\n    );\n  }\n}\n\nTextLayer.layerName = 'TextLayer';\nTextLayer.defaultProps = defaultProps;\n"],"file":"text-layer.js"}