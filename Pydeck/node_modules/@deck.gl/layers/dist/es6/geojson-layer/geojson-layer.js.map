{"version":3,"sources":["../../../src/geojson-layer/geojson-layer.js"],"names":["CompositeLayer","ScatterplotLayer","PathLayer","PhongMaterial","SolidPolygonLayer","replaceInRange","getGeojsonFeatures","separateGeojsonFeatures","defaultLineColor","defaultFillColor","defaultMaterial","defaultProps","stroked","filled","extruded","wireframe","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","Number","MAX_SAFE_INTEGER","lineJointRounded","lineMiterLimit","elevationScale","pointRadiusScale","pointRadiusMinPixels","pointRadiusMaxPixels","lineDashJustified","getLineColor","type","value","getFillColor","getRadius","getLineWidth","getLineDashArray","getElevation","material","getCoordinates","f","geometry","coordinates","GeoJsonLayer","initializeState","state","features","updateState","props","changeFlags","dataChanged","data","wrapFeature","getSubLayerRow","bind","Array","isArray","oldFeatures","newFeatures","featuresDiff","key","slice","dataRange","partialFeatures","push","getIndex","__source","index","replace","setState","renderLayers","pointFeatures","lineFeatures","polygonFeatures","polygonOutlineFeatures","transitions","updateTriggers","PolygonFillLayer","getSubLayerClass","PolygonStrokeLayer","LineStringsLayer","PointsLayer","polygonFillLayer","shouldRenderSubLayer","_dataDiff","getSubLayerAccessor","getPolygon","getSubLayerProps","id","polygonLineLayer","widthUnits","widthScale","widthMinPixels","widthMaxPixels","rounded","miterLimit","dashJustified","getColor","getWidth","getDashArray","getPath","pathLayer","pointLayer","radiusScale","radiusMinPixels","radiusMaxPixels","getPosition","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer} from '@deck.gl/core';\nimport ScatterplotLayer from '../scatterplot-layer/scatterplot-layer';\nimport PathLayer from '../path-layer/path-layer';\nimport {PhongMaterial} from '@luma.gl/core';\n// Use primitive layer to avoid \"Composite Composite\" layers for now\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\nimport {replaceInRange} from '../utils';\n\nimport {getGeojsonFeatures, separateGeojsonFeatures} from './geojson';\n\nconst defaultLineColor = [0, 0, 0, 255];\nconst defaultFillColor = [0, 0, 0, 255];\nconst defaultMaterial = new PhongMaterial();\n\nconst defaultProps = {\n  stroked: true,\n  filled: true,\n  extruded: false,\n  wireframe: false,\n\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  lineJointRounded: false,\n  lineMiterLimit: 4,\n\n  elevationScale: 1,\n\n  pointRadiusScale: 1,\n  pointRadiusMinPixels: 0, //  min point radius in pixels\n  pointRadiusMaxPixels: Number.MAX_SAFE_INTEGER, // max point radius in pixels\n\n  lineDashJustified: false,\n\n  // Line and polygon outline color\n  getLineColor: {type: 'accessor', value: defaultLineColor},\n  // Point and polygon fill color\n  getFillColor: {type: 'accessor', value: defaultFillColor},\n  // Point radius\n  getRadius: {type: 'accessor', value: 1},\n  // Line and polygon outline accessors\n  getLineWidth: {type: 'accessor', value: 1},\n  // Line dash array accessor\n  getLineDashArray: {type: 'accessor', value: [0, 0]},\n  // Polygon extrusion accessor\n  getElevation: {type: 'accessor', value: 1000},\n  // Optional material for 'lighting' shader module\n  material: defaultMaterial\n};\n\nfunction getCoordinates(f) {\n  return f.geometry.coordinates;\n}\n\nexport default class GeoJsonLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      features: {}\n    };\n  }\n\n  updateState({props, changeFlags}) {\n    if (!changeFlags.dataChanged) {\n      return;\n    }\n    const features = getGeojsonFeatures(props.data);\n    const wrapFeature = this.getSubLayerRow.bind(this);\n\n    if (Array.isArray(changeFlags.dataChanged)) {\n      const oldFeatures = this.state.features;\n      const newFeatures = {};\n      const featuresDiff = {};\n      for (const key in oldFeatures) {\n        newFeatures[key] = oldFeatures[key].slice();\n        featuresDiff[key] = [];\n      }\n\n      for (const dataRange of changeFlags.dataChanged) {\n        const partialFeatures = separateGeojsonFeatures(features, wrapFeature, dataRange);\n        for (const key in oldFeatures) {\n          featuresDiff[key].push(\n            replaceInRange({\n              data: newFeatures[key],\n              getIndex: f => f.__source.index,\n              dataRange,\n              replace: partialFeatures[key]\n            })\n          );\n        }\n      }\n      this.setState({features: newFeatures, featuresDiff});\n    } else {\n      this.setState({\n        features: separateGeojsonFeatures(features, wrapFeature),\n        featuresDiff: {}\n      });\n    }\n  }\n\n  /* eslint-disable complexity */\n  renderLayers() {\n    const {features, featuresDiff} = this.state;\n    const {pointFeatures, lineFeatures, polygonFeatures, polygonOutlineFeatures} = features;\n\n    // Layer composition props\n    const {stroked, filled, extruded, wireframe, material, transitions} = this.props;\n\n    // Rendering props underlying layer\n    const {\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      pointRadiusScale,\n      pointRadiusMinPixels,\n      pointRadiusMaxPixels,\n      elevationScale,\n      lineDashJustified\n    } = this.props;\n\n    // Accessor props for underlying layers\n    const {\n      getLineColor,\n      getFillColor,\n      getRadius,\n      getLineWidth,\n      getLineDashArray,\n      getElevation,\n      updateTriggers\n    } = this.props;\n\n    const PolygonFillLayer = this.getSubLayerClass('polygons-fill', SolidPolygonLayer);\n    const PolygonStrokeLayer = this.getSubLayerClass('polygons-stroke', PathLayer);\n    const LineStringsLayer = this.getSubLayerClass('line-strings', PathLayer);\n    const PointsLayer = this.getSubLayerClass('points', ScatterplotLayer);\n\n    // Filled Polygon Layer\n    const polygonFillLayer =\n      this.shouldRenderSubLayer('polygons-fill', polygonFeatures) &&\n      new PolygonFillLayer(\n        {\n          _dataDiff: featuresDiff.polygonFeatures && (() => featuresDiff.polygonFeatures),\n\n          extruded,\n          elevationScale,\n          filled,\n          wireframe,\n          material,\n          getElevation: this.getSubLayerAccessor(getElevation),\n          getFillColor: this.getSubLayerAccessor(getFillColor),\n          getLineColor: this.getSubLayerAccessor(getLineColor),\n\n          transitions: transitions && {\n            getPolygon: transitions.geometry,\n            getElevation: transitions.getElevation,\n            getFillColor: transitions.getFillColor,\n            getLineColor: transitions.getLineColor\n          }\n        },\n        this.getSubLayerProps({\n          id: 'polygons-fill',\n          updateTriggers: {\n            getElevation: updateTriggers.getElevation,\n            getFillColor: updateTriggers.getFillColor,\n            getLineColor: updateTriggers.getLineColor\n          }\n        }),\n        {\n          data: polygonFeatures,\n          getPolygon: getCoordinates\n        }\n      );\n\n    const polygonLineLayer =\n      !extruded &&\n      stroked &&\n      this.shouldRenderSubLayer('polygons-stroke', polygonOutlineFeatures) &&\n      new PolygonStrokeLayer(\n        {\n          _dataDiff:\n            featuresDiff.polygonOutlineFeatures && (() => featuresDiff.polygonOutlineFeatures),\n\n          widthUnits: lineWidthUnits,\n          widthScale: lineWidthScale,\n          widthMinPixels: lineWidthMinPixels,\n          widthMaxPixels: lineWidthMaxPixels,\n          rounded: lineJointRounded,\n          miterLimit: lineMiterLimit,\n          dashJustified: lineDashJustified,\n\n          getColor: this.getSubLayerAccessor(getLineColor),\n          getWidth: this.getSubLayerAccessor(getLineWidth),\n          getDashArray: this.getSubLayerAccessor(getLineDashArray),\n\n          transitions: transitions && {\n            getPath: transitions.geometry,\n            getColor: transitions.getLineColor,\n            getWidth: transitions.getLineWidth\n          }\n        },\n        this.getSubLayerProps({\n          id: 'polygons-stroke',\n          updateTriggers: {\n            getColor: updateTriggers.getLineColor,\n            getWidth: updateTriggers.getLineWidth,\n            getDashArray: updateTriggers.getLineDashArray\n          }\n        }),\n        {\n          data: polygonOutlineFeatures,\n          getPath: getCoordinates\n        }\n      );\n\n    const pathLayer =\n      this.shouldRenderSubLayer('linestrings', lineFeatures) &&\n      new LineStringsLayer(\n        {\n          _dataDiff: featuresDiff.lineFeatures && (() => featuresDiff.lineFeatures),\n\n          widthUnits: lineWidthUnits,\n          widthScale: lineWidthScale,\n          widthMinPixels: lineWidthMinPixels,\n          widthMaxPixels: lineWidthMaxPixels,\n          rounded: lineJointRounded,\n          miterLimit: lineMiterLimit,\n          dashJustified: lineDashJustified,\n\n          getColor: this.getSubLayerAccessor(getLineColor),\n          getWidth: this.getSubLayerAccessor(getLineWidth),\n          getDashArray: this.getSubLayerAccessor(getLineDashArray),\n\n          transitions: transitions && {\n            getPath: transitions.geometry,\n            getColor: transitions.getLineColor,\n            getWidth: transitions.getLineWidth\n          }\n        },\n        this.getSubLayerProps({\n          id: 'line-strings',\n          updateTriggers: {\n            getColor: updateTriggers.getLineColor,\n            getWidth: updateTriggers.getLineWidth,\n            getDashArray: updateTriggers.getLineDashArray\n          }\n        }),\n        {\n          data: lineFeatures,\n          getPath: getCoordinates\n        }\n      );\n\n    const pointLayer =\n      this.shouldRenderSubLayer('points', pointFeatures) &&\n      new PointsLayer(\n        {\n          _dataDiff: featuresDiff.pointFeatures && (() => featuresDiff.pointFeatures),\n\n          stroked,\n          filled,\n          radiusScale: pointRadiusScale,\n          radiusMinPixels: pointRadiusMinPixels,\n          radiusMaxPixels: pointRadiusMaxPixels,\n          lineWidthUnits,\n          lineWidthScale,\n          lineWidthMinPixels,\n          lineWidthMaxPixels,\n\n          getFillColor: this.getSubLayerAccessor(getFillColor),\n          getLineColor: this.getSubLayerAccessor(getLineColor),\n          getRadius: this.getSubLayerAccessor(getRadius),\n          getLineWidth: this.getSubLayerAccessor(getLineWidth),\n\n          transitions: transitions && {\n            getPosition: transitions.geometry,\n            getFillColor: transitions.getFillColor,\n            getLineColor: transitions.getLineColor,\n            getRadius: transitions.getRadius,\n            getLineWidth: transitions.getLineWidth\n          }\n        },\n        this.getSubLayerProps({\n          id: 'points',\n          updateTriggers: {\n            getFillColor: updateTriggers.getFillColor,\n            getLineColor: updateTriggers.getLineColor,\n            getRadius: updateTriggers.getRadius,\n            getLineWidth: updateTriggers.getLineWidth\n          }\n        }),\n        {\n          data: pointFeatures,\n          getPosition: getCoordinates\n        }\n      );\n\n    return [\n      // If not extruded: flat fill layer is drawn below outlines\n      !extruded && polygonFillLayer,\n      polygonLineLayer,\n      pathLayer,\n      pointLayer,\n      // If extruded: draw fill layer last for correct blending behavior\n      extruded && polygonFillLayer\n    ];\n  }\n  /* eslint-enable complexity */\n}\n\nGeoJsonLayer.layerName = 'GeoJsonLayer';\nGeoJsonLayer.defaultProps = defaultProps;\n"],"file":"geojson-layer.js"}