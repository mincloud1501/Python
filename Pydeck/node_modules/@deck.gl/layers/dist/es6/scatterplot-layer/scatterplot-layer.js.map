{"version":3,"sources":["../../../src/scatterplot-layer/scatterplot-layer.js"],"names":["Layer","Model","Geometry","vs","fs","DEFAULT_COLOR","defaultProps","radiusScale","type","min","value","radiusMinPixels","radiusMaxPixels","Number","MAX_SAFE_INTEGER","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","stroked","filled","getPosition","x","position","getRadius","getFillColor","getLineColor","getLineWidth","strokeWidth","deprecatedFor","outline","getColor","ScatterplotLayer","getShaders","id","modules","initializeState","getAttributeManager","addInstanced","instancePositions","size","fp64","use64bitPositions","transition","accessor","instanceRadius","defaultValue","instanceFillColors","props","colorFormat","length","normalized","instanceLineColors","instanceLineWidths","updateState","oldProps","changeFlags","extensionsChanged","gl","context","state","model","delete","setState","_getModel","invalidateAll","draw","uniforms","viewport","widthMultiplier","distanceScales","metersPerPixel","setUniforms","Object","assign","positions","geometry","drawMode","vertexCount","attributes","Float32Array","isInstanced","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport vs from './scatterplot-layer-vertex.glsl';\nimport fs from './scatterplot-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst defaultProps = {\n  radiusScale: {type: 'number', min: 0, value: 1},\n  radiusMinPixels: {type: 'number', min: 0, value: 0}, //  min point radius in pixels\n  radiusMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER}, // max point radius in pixels\n\n  lineWidthUnits: 'meters',\n  lineWidthScale: {type: 'number', min: 0, value: 1},\n  lineWidthMinPixels: {type: 'number', min: 0, value: 0},\n  lineWidthMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER},\n\n  stroked: false,\n  filled: true,\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getRadius: {type: 'accessor', value: 1},\n  getFillColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineWidth: {type: 'accessor', value: 1},\n\n  // deprecated\n  strokeWidth: {deprecatedFor: 'getLineWidth'},\n  outline: {deprecatedFor: 'stroked'},\n  getColor: {deprecatedFor: ['getFillColor', 'getLineColor']}\n};\n\nexport default class ScatterplotLayer extends Layer {\n  getShaders(id) {\n    return super.getShaders({vs, fs, modules: ['project32', 'picking']});\n  }\n\n  initializeState() {\n    this.getAttributeManager().addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceRadius: {\n        size: 1,\n        transition: true,\n        accessor: 'getRadius',\n        defaultValue: 1\n      },\n      instanceFillColors: {\n        size: this.props.colorFormat.length,\n        transition: true,\n        normalized: true,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getFillColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineColors: {\n        size: this.props.colorFormat.length,\n        transition: true,\n        normalized: true,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getLineColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getLineWidth',\n        defaultValue: 1\n      }\n    });\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      this.setState({model: this._getModel(gl)});\n      this.getAttributeManager().invalidateAll();\n    }\n  }\n\n  draw({uniforms}) {\n    const {viewport} = this.context;\n    const {\n      radiusScale,\n      radiusMinPixels,\n      radiusMaxPixels,\n      stroked,\n      filled,\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels\n    } = this.props;\n\n    const widthMultiplier =\n      lineWidthUnits === 'pixels' ? viewport.distanceScales.metersPerPixel[2] : 1;\n\n    this.state.model\n      .setUniforms(\n        Object.assign({}, uniforms, {\n          stroked: stroked ? 1 : 0,\n          filled,\n          radiusScale,\n          radiusMinPixels,\n          radiusMaxPixels,\n          lineWidthScale: lineWidthScale * widthMultiplier,\n          lineWidthMinPixels,\n          lineWidthMaxPixels\n        })\n      )\n      .draw();\n  }\n\n  _getModel(gl) {\n    // a square that minimally cover the unit circle\n    const positions = [-1, -1, 0, -1, 1, 0, 1, 1, 0, 1, -1, 0];\n\n    return new Model(\n      gl,\n      Object.assign(this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLE_FAN,\n          vertexCount: 4,\n          attributes: {\n            positions: {size: 3, value: new Float32Array(positions)}\n          }\n        }),\n        isInstanced: true\n      })\n    );\n  }\n}\n\nScatterplotLayer.layerName = 'ScatterplotLayer';\nScatterplotLayer.defaultProps = defaultProps;\n"],"file":"scatterplot-layer.js"}