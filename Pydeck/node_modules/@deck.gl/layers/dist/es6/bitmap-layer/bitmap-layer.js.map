{"version":3,"sources":["../../../src/bitmap-layer/bitmap-layer.js"],"names":["Layer","Model","Geometry","Texture2D","vs","fs","DEFAULT_TEXTURE_PARAMETERS","defaultProps","image","type","value","async","bounds","compare","desaturate","min","max","transparentColor","tintColor","BitmapLayer","getShaders","modules","initializeState","attributeManager","getAttributeManager","add","positions","size","fp64","use64bitPositions","update","calculatePositions","noAlloc","setState","numInstances","Float64Array","updateState","props","oldProps","changeFlags","extensionsChanged","gl","context","state","model","delete","_getModel","invalidateAll","loadTexture","invalidate","finalizeState","bitmapTexture","attributes","Number","isFinite","i","length","Object","assign","id","geometry","drawMode","vertexCount","texCoords","Float32Array","isInstanced","draw","opts","uniforms","HTMLVideoElement","readyState","HAVE_METADATA","sizeChanged","width","videoWidth","height","videoHeight","resize","mipmaps","setSubImageData","data","paramters","generateMipmap","setUniforms","map","x","slice","parameters","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* global HTMLVideoElement */\nimport GL from '@luma.gl/constants';\nimport {Layer} from '@deck.gl/core';\nimport {Model, Geometry, Texture2D} from '@luma.gl/core';\n\nimport vs from './bitmap-layer-vertex';\nimport fs from './bitmap-layer-fragment';\n\nconst DEFAULT_TEXTURE_PARAMETERS = {\n  [GL.TEXTURE_MIN_FILTER]: GL.LINEAR_MIPMAP_LINEAR,\n  [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n  [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n  [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n};\n\nconst defaultProps = {\n  image: {type: 'object', value: null, async: true},\n  bounds: {type: 'array', value: [1, 0, 0, 1], compare: true},\n\n  desaturate: {type: 'number', min: 0, max: 1, value: 0},\n  // More context: because of the blending mode we're using for ground imagery,\n  // alpha is not effective when blending the bitmap layers with the base map.\n  // Instead we need to manually dim/blend rgb values with a background color.\n  transparentColor: {type: 'color', value: [0, 0, 0, 0]},\n  tintColor: {type: 'color', value: [255, 255, 255]}\n};\n\n/*\n * @class\n * @param {object} props\n * @param {number} props.transparentColor - color to interpret transparency to\n * @param {number} props.tintColor - color bias\n */\nexport default class BitmapLayer extends Layer {\n  getShaders() {\n    return super.getShaders({vs, fs, modules: ['project32', 'picking']});\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n\n    attributeManager.add({\n      positions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        update: this.calculatePositions,\n        noAlloc: true\n      }\n    });\n\n    this.setState({\n      numInstances: 1,\n      positions: new Float64Array(12)\n    });\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    // setup model first\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      this.setState({model: this._getModel(gl)});\n      this.getAttributeManager().invalidateAll();\n    }\n\n    if (props.image !== oldProps.image) {\n      this.loadTexture(props.image);\n    }\n\n    const attributeManager = this.getAttributeManager();\n\n    if (props.bounds !== oldProps.bounds) {\n      attributeManager.invalidate('positions');\n    }\n  }\n\n  finalizeState() {\n    super.finalizeState();\n\n    if (this.state.bitmapTexture) {\n      this.state.bitmapTexture.delete();\n    }\n  }\n\n  calculatePositions(attributes) {\n    const {positions} = this.state;\n    const {bounds} = this.props;\n    // bounds as [minX, minY, maxX, maxY]\n    if (Number.isFinite(bounds[0])) {\n      /*\n        (minX0, maxY3) ---- (maxX2, maxY3)\n               |                  |\n               |                  |\n               |                  |\n        (minX0, minY1) ---- (maxX2, minY1)\n     */\n      positions[0] = bounds[0];\n      positions[1] = bounds[1];\n      positions[2] = 0;\n\n      positions[3] = bounds[0];\n      positions[4] = bounds[3];\n      positions[5] = 0;\n\n      positions[6] = bounds[2];\n      positions[7] = bounds[3];\n      positions[8] = 0;\n\n      positions[9] = bounds[2];\n      positions[10] = bounds[1];\n      positions[11] = 0;\n    } else {\n      // [[minX, minY], [minX, maxY], [maxX, maxY], [maxX, minY]]\n      for (let i = 0; i < bounds.length; i++) {\n        positions[i * 3 + 0] = bounds[i][0];\n        positions[i * 3 + 1] = bounds[i][1];\n        positions[i * 3 + 2] = bounds[i][2] || 0;\n      }\n    }\n\n    attributes.value = positions;\n  }\n\n  _getModel(gl) {\n    if (!gl) {\n      return null;\n    }\n\n    /*\n      0,1 --- 1,1\n       |       |\n      0,0 --- 1,0\n    */\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLE_FAN,\n          vertexCount: 4,\n          attributes: {\n            texCoords: new Float32Array([0, 0, 0, 1, 1, 1, 1, 0])\n          }\n        }),\n        isInstanced: false\n      })\n    );\n  }\n\n  draw(opts) {\n    const {uniforms} = opts;\n    const {bitmapTexture, model} = this.state;\n    const {image, desaturate, transparentColor, tintColor} = this.props;\n\n    // Update video frame\n    if (\n      bitmapTexture &&\n      image instanceof HTMLVideoElement &&\n      image.readyState > HTMLVideoElement.HAVE_METADATA\n    ) {\n      const sizeChanged =\n        bitmapTexture.width !== image.videoWidth || bitmapTexture.height !== image.videoHeight;\n      if (sizeChanged) {\n        // note clears image and mipmaps when resizing\n        bitmapTexture.resize({width: image.videoWidth, height: image.videoHeight, mipmaps: true});\n        bitmapTexture.setSubImageData({\n          data: image,\n          paramters: DEFAULT_TEXTURE_PARAMETERS\n        });\n      } else {\n        bitmapTexture.setSubImageData({\n          data: image\n        });\n      }\n\n      bitmapTexture.generateMipmap();\n    }\n\n    // // TODO fix zFighting\n    // Render the image\n    if (bitmapTexture && model) {\n      model\n        .setUniforms(\n          Object.assign({}, uniforms, {\n            bitmapTexture,\n            desaturate,\n            transparentColor: transparentColor.map(x => x / 255),\n            tintColor: tintColor.slice(0, 3).map(x => x / 255)\n          })\n        )\n        .draw();\n    }\n  }\n\n  loadTexture(image) {\n    const {gl} = this.context;\n\n    if (this.state.bitmapTexture) {\n      this.state.bitmapTexture.delete();\n    }\n\n    if (image instanceof Texture2D) {\n      this.setState({bitmapTexture: image});\n    } else if (image instanceof HTMLVideoElement) {\n      // Initialize an empty texture while we wait for the video to load\n      this.setState({\n        bitmapTexture: new Texture2D(gl, {\n          width: 1,\n          height: 1,\n          parameters: DEFAULT_TEXTURE_PARAMETERS,\n          mipmaps: false\n        })\n      });\n    } else if (image) {\n      // Browser object: Image, ImageData, HTMLCanvasElement, ImageBitmap\n      this.setState({\n        bitmapTexture: new Texture2D(gl, {\n          data: image,\n          parameters: DEFAULT_TEXTURE_PARAMETERS\n        })\n      });\n    }\n  }\n}\n\nBitmapLayer.layerName = 'BitmapLayer';\nBitmapLayer.defaultProps = defaultProps;\n"],"file":"bitmap-layer.js"}