{"version":3,"sources":["../../../src/polygon-layer/polygon-layer.js"],"names":["defaultLineColor","defaultFillColor","defaultMaterial","PhongMaterial","defaultProps","stroked","filled","extruded","elevationScale","wireframe","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","Number","MAX_SAFE_INTEGER","lineJointRounded","lineMiterLimit","lineDashJustified","getPolygon","type","value","f","polygon","getFillColor","getLineColor","getLineWidth","getLineDashArray","getElevation","material","PolygonLayer","state","paths","oldProps","props","changeFlags","geometryChanged","dataChanged","updateTriggersChanged","all","Array","isArray","slice","pathsDiff","map","dataRange","data","getIndex","p","__source","index","replace","_getPaths","setState","positionFormat","positionSize","startRow","endRow","iterable","objectInfo","object","Polygon","normalize","positions","holeIndices","i","length","path","subarray","push","getSubLayerRow","_dataDiff","transitions","updateTriggers","FillLayer","getSubLayerClass","SolidPolygonLayer","StrokeLayer","PathLayer","polygonLayer","shouldRenderSubLayer","getSubLayerProps","id","polygonLineLayer","widthUnits","widthScale","widthMinPixels","widthMaxPixels","rounded","miterLimit","dashJustified","getWidth","getColor","getPath","getSubLayerAccessor","getDashArray","x","CompositeLayer","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {PhongMaterial} from '@luma.gl/core';\nimport {CompositeLayer, createIterable} from '@deck.gl/core';\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\nimport PathLayer from '../path-layer/path-layer';\nimport * as Polygon from '../solid-polygon-layer/polygon';\nimport {replaceInRange} from '../utils';\n\nconst defaultLineColor = [0, 0, 0, 255];\nconst defaultFillColor = [0, 0, 0, 255];\nconst defaultMaterial = new PhongMaterial();\n\nconst defaultProps = {\n  stroked: true,\n  filled: true,\n  extruded: false,\n  elevationScale: 1,\n  wireframe: false,\n\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  lineJointRounded: false,\n  lineMiterLimit: 4,\n  lineDashJustified: false,\n\n  getPolygon: {type: 'accessor', value: f => f.polygon},\n  // Polygon fill color\n  getFillColor: {type: 'accessor', value: defaultFillColor},\n  // Point, line and polygon outline color\n  getLineColor: {type: 'accessor', value: defaultLineColor},\n  // Line and polygon outline accessors\n  getLineWidth: {type: 'accessor', value: 1},\n  // Line dash array accessor\n  getLineDashArray: {type: 'accessor', value: [0, 0]},\n  // Polygon extrusion accessor\n  getElevation: {type: 'accessor', value: 1000},\n\n  // Optional material for 'lighting' shader module\n  material: defaultMaterial\n};\n\nexport default class PolygonLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      paths: []\n    };\n  }\n\n  updateState({oldProps, props, changeFlags}) {\n    const geometryChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon));\n\n    if (geometryChanged && Array.isArray(changeFlags.dataChanged)) {\n      const paths = this.state.paths.slice();\n      const pathsDiff = changeFlags.dataChanged.map(dataRange =>\n        replaceInRange({\n          data: paths,\n          getIndex: p => p.__source.index,\n          dataRange,\n          replace: this._getPaths(dataRange)\n        })\n      );\n      this.setState({paths, pathsDiff});\n    } else if (geometryChanged) {\n      this.setState({\n        paths: this._getPaths(),\n        pathsDiff: null\n      });\n    }\n  }\n\n  _getPaths(dataRange = {}) {\n    const {data, getPolygon, positionFormat} = this.props;\n    const paths = [];\n    const positionSize = positionFormat === 'XY' ? 2 : 3;\n    const {startRow, endRow} = dataRange;\n\n    const {iterable, objectInfo} = createIterable(data, startRow, endRow);\n    for (const object of iterable) {\n      objectInfo.index++;\n      const {positions, holeIndices} = Polygon.normalize(\n        getPolygon(object, objectInfo),\n        positionSize\n      );\n\n      if (holeIndices) {\n        // split the positions array into `holeIndices.length + 1` rings\n        // holeIndices[-1] falls back to 0\n        // holeIndices[holeIndices.length] falls back to positions.length\n        for (let i = 0; i <= holeIndices.length; i++) {\n          const path = positions.subarray(\n            holeIndices[i - 1] || 0,\n            holeIndices[i] || positions.length\n          );\n          paths.push(this.getSubLayerRow({path}, object, objectInfo.index));\n        }\n      } else {\n        paths.push(this.getSubLayerRow({path: positions}, object, objectInfo.index));\n      }\n    }\n    return paths;\n  }\n\n  /* eslint-disable complexity */\n  renderLayers() {\n    // Layer composition props\n    const {\n      data,\n      _dataDiff,\n      stroked,\n      filled,\n      extruded,\n      wireframe,\n      elevationScale,\n      transitions,\n      positionFormat\n    } = this.props;\n\n    // Rendering props underlying layer\n    const {\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      lineDashJustified\n    } = this.props;\n\n    // Accessor props for underlying layers\n    const {\n      getFillColor,\n      getLineColor,\n      getLineWidth,\n      getLineDashArray,\n      getElevation,\n      getPolygon,\n      updateTriggers,\n      material\n    } = this.props;\n\n    const {paths, pathsDiff} = this.state;\n\n    const FillLayer = this.getSubLayerClass('fill', SolidPolygonLayer);\n    const StrokeLayer = this.getSubLayerClass('stroke', PathLayer);\n\n    // Filled Polygon Layer\n    const polygonLayer =\n      this.shouldRenderSubLayer('fill', paths) &&\n      new FillLayer(\n        {\n          _dataDiff,\n          extruded,\n          elevationScale,\n\n          filled,\n          wireframe,\n\n          getElevation,\n          getFillColor,\n          getLineColor,\n\n          material,\n          transitions\n        },\n        this.getSubLayerProps({\n          id: 'fill',\n          updateTriggers: {\n            getPolygon: updateTriggers.getPolygon,\n            getElevation: updateTriggers.getElevation,\n            getFillColor: updateTriggers.getFillColor,\n            getLineColor: updateTriggers.getLineColor\n          }\n        }),\n        {\n          data,\n          positionFormat,\n          getPolygon\n        }\n      );\n\n    // Polygon line layer\n    const polygonLineLayer =\n      !extruded &&\n      stroked &&\n      this.shouldRenderSubLayer('stroke', paths) &&\n      new StrokeLayer(\n        {\n          _dataDiff: pathsDiff && (() => pathsDiff),\n          widthUnits: lineWidthUnits,\n          widthScale: lineWidthScale,\n          widthMinPixels: lineWidthMinPixels,\n          widthMaxPixels: lineWidthMaxPixels,\n          rounded: lineJointRounded,\n          miterLimit: lineMiterLimit,\n          dashJustified: lineDashJustified,\n\n          transitions: transitions && {\n            getWidth: transitions.getLineWidth,\n            getColor: transitions.getLineColor,\n            getPath: transitions.getPolygon\n          },\n\n          getColor: this.getSubLayerAccessor(getLineColor),\n          getWidth: this.getSubLayerAccessor(getLineWidth),\n          getDashArray: this.getSubLayerAccessor(getLineDashArray)\n        },\n        this.getSubLayerProps({\n          id: 'stroke',\n          updateTriggers: {\n            getWidth: updateTriggers.getLineWidth,\n            getColor: updateTriggers.getLineColor,\n            getDashArray: updateTriggers.getLineDashArray\n          }\n        }),\n        {\n          data: paths,\n          positionFormat,\n          getPath: x => x.path\n        }\n      );\n\n    return [\n      // If not extruded: flat fill layer is drawn below outlines\n      !extruded && polygonLayer,\n      polygonLineLayer,\n      // If extruded: draw fill layer last for correct blending behavior\n      extruded && polygonLayer\n    ];\n  }\n  /* eslint-enable complexity */\n}\n\nPolygonLayer.layerName = 'PolygonLayer';\nPolygonLayer.defaultProps = defaultProps;\n"],"file":"polygon-layer.js"}