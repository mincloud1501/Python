{"version":3,"sources":["../../../src/cpu-grid-layer/cpu-grid-layer.js"],"names":["PhongMaterial","CompositeLayer","GridCellLayer","defaultColorRange","pointToDensityGridDataCPU","CPUAggregator","nop","defaultMaterial","defaultProps","colorDomain","colorRange","getColorValue","type","value","getColorWeight","x","colorAggregation","lowerPercentile","min","max","upperPercentile","colorScaleType","onSetColorDomain","elevationDomain","elevationRange","getElevationValue","getElevationWeight","elevationAggregation","elevationLowerPercentile","elevationUpperPercentile","elevationScale","elevationScaleType","onSetElevationDomain","gridAggregator","cellSize","coverage","getPosition","position","extruded","material","CPUGridLayer","initializeState","cpuAggregator","getAggregator","props","getCellSize","state","aggregatorState","updateState","oldProps","changeFlags","setState","context","viewport","getPickingInfo","info","_onGetSublayerColor","cell","getAccessor","_onGetSublayerElevation","_getSublayerUpdateTriggers","getUpdateTriggers","renderLayers","transitions","SubLayerClass","getSubLayerClass","updateTriggers","getFillColor","bind","getElevation","getSubLayerProps","id","data","layerData","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {PhongMaterial} from '@luma.gl/core';\nimport {CompositeLayer} from '@deck.gl/core';\nimport {GridCellLayer} from '@deck.gl/layers';\n\nimport {defaultColorRange} from '../utils/color-utils';\nimport {pointToDensityGridDataCPU} from './grid-aggregator';\nimport CPUAggregator from '../utils/cpu-aggregator';\n\nfunction nop() {}\n\nconst defaultMaterial = new PhongMaterial();\n\nconst defaultProps = {\n  // color\n  colorDomain: null,\n  colorRange: defaultColorRange,\n  getColorValue: {type: 'accessor', value: null}, // default value is calculated from `getColorWeight` and `colorAggregation`\n  getColorWeight: {type: 'accessor', value: x => 1},\n  colorAggregation: 'SUM',\n  lowerPercentile: {type: 'number', min: 0, max: 100, value: 0},\n  upperPercentile: {type: 'number', min: 0, max: 100, value: 100},\n  colorScaleType: 'quantize',\n  onSetColorDomain: nop,\n\n  // elevation\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  getElevationValue: {type: 'accessor', value: null}, // default value is calculated from `getElevationWeight` and `elevationAggregation`\n  getElevationWeight: {type: 'accessor', value: x => 1},\n  elevationAggregation: 'SUM',\n  elevationLowerPercentile: {type: 'number', min: 0, max: 100, value: 0},\n  elevationUpperPercentile: {type: 'number', min: 0, max: 100, value: 100},\n  elevationScale: {type: 'number', min: 0, value: 1},\n  elevationScaleType: 'linear',\n  onSetElevationDomain: nop,\n\n  gridAggregator: pointToDensityGridDataCPU,\n\n  // grid\n  cellSize: {type: 'number', min: 0, max: 1000, value: 1000},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  getPosition: {type: 'accessor', value: x => x.position},\n  extruded: false,\n\n  // Optional material for 'lighting' shader module\n  material: defaultMaterial\n};\n\nexport default class CPUGridLayer extends CompositeLayer {\n  initializeState() {\n    const cpuAggregator = new CPUAggregator({\n      getAggregator: props => props.gridAggregator,\n      getCellSize: props => props.cellSize\n    });\n\n    this.state = {\n      cpuAggregator,\n      aggregatorState: cpuAggregator.state\n    };\n  }\n\n  updateState({oldProps, props, changeFlags}) {\n    this.setState({\n      // make a copy of the internal state of cpuAggregator for testing\n      aggregatorState: this.state.cpuAggregator.updateState(\n        {oldProps, props, changeFlags},\n        this.context.viewport\n      )\n    });\n  }\n\n  getPickingInfo({info}) {\n    return this.state.cpuAggregator.getPickingInfo({info});\n  }\n\n  // create a method for testing\n  _onGetSublayerColor(cell) {\n    return this.state.cpuAggregator.getAccessor('fillColor')(cell);\n  }\n\n  // create a method for testing\n  _onGetSublayerElevation(cell) {\n    return this.state.cpuAggregator.getAccessor('elevation')(cell);\n  }\n\n  _getSublayerUpdateTriggers() {\n    return this.state.cpuAggregator.getUpdateTriggers(this.props);\n  }\n\n  renderLayers() {\n    const {elevationScale, extruded, cellSize, coverage, material, transitions} = this.props;\n    const {cpuAggregator} = this.state;\n    const SubLayerClass = this.getSubLayerClass('grid-cell', GridCellLayer);\n    const updateTriggers = this._getSublayerUpdateTriggers();\n\n    return new SubLayerClass(\n      {\n        cellSize,\n        coverage,\n        material,\n        elevationScale,\n        extruded,\n\n        getFillColor: this._onGetSublayerColor.bind(this),\n        getElevation: this._onGetSublayerElevation.bind(this),\n        transitions: transitions && {\n          getFillColor: transitions.getColorValue || transitions.getColorWeight,\n          getElevation: transitions.getElevationValue || transitions.getElevationWeight\n        }\n      },\n      this.getSubLayerProps({\n        id: 'grid-cell',\n        updateTriggers\n      }),\n      {\n        data: cpuAggregator.state.layerData.data\n      }\n    );\n  }\n}\n\nCPUGridLayer.layerName = 'CPUGridLayer';\nCPUGridLayer.defaultProps = defaultProps;\n"],"file":"cpu-grid-layer.js"}