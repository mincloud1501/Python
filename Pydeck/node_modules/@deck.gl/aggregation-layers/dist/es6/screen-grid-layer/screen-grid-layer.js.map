{"version":3,"sources":["../../../src/screen-grid-layer/screen-grid-layer.js"],"names":["Layer","WebMercatorViewport","createIterable","log","experimental","count","defaultColorRange","colorRangeToFlatArray","GPUGridAggregator","AGGREGATION_OPERATION","Model","Geometry","Buffer","FEATURES","hasFeatures","vs","fs","DEFAULT_MINCOLOR","DEFAULT_MAXCOLOR","COLOR_PROPS","defaultProps","cellSizePixels","value","min","cellMarginPixels","max","colorDomain","colorRange","getPosition","type","d","position","getWeight","gpuAggregation","aggregation","ScreenGridLayer","getShaders","modules","initializeState","attributeManager","getAttributeManager","gl","context","TEXTURE_FLOAT","setState","supported","error","id","addInstanced","instancePositions","size","update","calculateInstancePositions","instanceCounts","transition","accessor","calculateInstanceCounts","noAlloc","options","weights","color","operation","SUM","needMax","model","_getModel","gpuGridAggregator","shouldUpdateState","changeFlags","state","somethingChanged","updateState","opts","_updateUniforms","dataChanged","_processData","_getAggregationChangeFlags","cellSizeChanged","viewportChanged","_updateGridParams","pointCount","_updateAggregation","finalizeState","aggregationBuffer","maxBuffer","maxTexture","delete","draw","uniforms","parameters","props","minColor","maxColor","cellScale","shouldUseMinMax","layerUniforms","Object","assign","depthTest","depthMask","attribute","numInstances","width","height","viewport","numCol","i","x","y","Math","floor","buffer","getPickingInfo","info","mode","index","aggregationResults","getData","object","getAggregationData","pixelIndex","oldProps","geometry","drawMode","attributes","positions","Float32Array","isInstanced","data","Float64Array","colorWeights","iterable","objectInfo","weight","Array","isArray","values","_shouldUseMinMax","deprecated","toUpperCase","projectPoints","gridTransformMatrix","pixelProjectionMatrix","results","run","cellSize","useGPU","invalidate","newState","some","key","margin","invalidateAll","ceil","numRow","dataBytes","byteLength","divisor","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, WebMercatorViewport, createIterable, log, experimental} from '@deck.gl/core';\nconst {count} = experimental;\nimport {defaultColorRange, colorRangeToFlatArray} from '../utils/color-utils';\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport {AGGREGATION_OPERATION} from '../utils/aggregation-operation-utils';\n\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry, Buffer, FEATURES, hasFeatures} from '@luma.gl/core';\n\nimport vs from './screen-grid-layer-vertex.glsl';\nimport fs from './screen-grid-layer-fragment.glsl';\n\nconst DEFAULT_MINCOLOR = [0, 0, 0, 0];\nconst DEFAULT_MAXCOLOR = [0, 255, 0, 255];\nconst COLOR_PROPS = [`minColor`, `maxColor`, `colorRange`, `colorDomain`];\n\nconst defaultProps = {\n  cellSizePixels: {value: 100, min: 1},\n  cellMarginPixels: {value: 2, min: 0, max: 5},\n\n  colorDomain: null,\n  colorRange: defaultColorRange,\n\n  getPosition: {type: 'accessor', value: d => d.position},\n  getWeight: {type: 'accessor', value: d => [1, 0, 0]},\n\n  gpuAggregation: true,\n  aggregation: 'SUM'\n};\n\nexport default class ScreenGridLayer extends Layer {\n  getShaders() {\n    return super.getShaders({vs, fs, modules: ['picking']});\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    const {gl} = this.context;\n    if (!hasFeatures(gl, [FEATURES.TEXTURE_FLOAT])) {\n      // max aggregated value is sampled from a float texture\n      this.setState({supported: false});\n      log.error(`ScreenGridLayer: ${this.id} is not supported on this browser`)();\n      return;\n    }\n\n    attributeManager.addInstanced({\n      instancePositions: {size: 3, update: this.calculateInstancePositions},\n      instanceCounts: {\n        size: 4,\n        transition: true,\n        accessor: ['getPosition', 'getWeight'],\n        update: this.calculateInstanceCounts,\n        noAlloc: true\n      }\n    });\n\n    const options = {\n      id: `${this.id}-aggregator`\n    };\n    const weights = {\n      color: {\n        size: 1,\n        operation: AGGREGATION_OPERATION.SUM,\n        needMax: true\n      }\n    };\n    this.setState({\n      supported: true,\n      model: this._getModel(gl),\n      gpuGridAggregator: new GPUGridAggregator(gl, options),\n      weights\n    });\n  }\n\n  shouldUpdateState({changeFlags}) {\n    return this.state.supported && changeFlags.somethingChanged;\n  }\n\n  updateState(opts) {\n    super.updateState(opts);\n\n    this._updateUniforms(opts);\n\n    if (opts.changeFlags.dataChanged) {\n      this._processData();\n    }\n\n    const changeFlags = this._getAggregationChangeFlags(opts);\n\n    if (changeFlags) {\n      if (changeFlags.cellSizeChanged || changeFlags.viewportChanged) {\n        this._updateGridParams();\n      }\n      const {pointCount} = this.state;\n      if (pointCount > 0) {\n        this._updateAggregation(changeFlags);\n      }\n    }\n  }\n\n  finalizeState() {\n    super.finalizeState();\n\n    const {aggregationBuffer, maxBuffer, gpuGridAggregator, maxTexture} = this.state;\n    gpuGridAggregator.delete();\n    if (aggregationBuffer) {\n      aggregationBuffer.delete();\n    }\n    if (maxBuffer) {\n      maxBuffer.delete();\n    }\n    if (maxTexture) {\n      maxTexture.delete();\n    }\n  }\n\n  draw({uniforms}) {\n    if (!this.state.supported) {\n      return;\n    }\n    const {parameters = {}} = this.props;\n    const minColor = this.props.minColor || DEFAULT_MINCOLOR;\n    const maxColor = this.props.maxColor || DEFAULT_MAXCOLOR;\n\n    // If colorDomain not specified we use default domain [1, maxCount]\n    // maxCount value will be sampled form maxTexture in vertex shader.\n    const colorDomain = this.props.colorDomain || [1, 0];\n    const {model, cellScale, shouldUseMinMax, colorRange, maxTexture} = this.state;\n    const layerUniforms = {\n      minColor,\n      maxColor,\n      maxTexture,\n      cellScale,\n      colorRange,\n      colorDomain,\n      shouldUseMinMax\n    };\n\n    uniforms = Object.assign(layerUniforms, uniforms);\n    model.draw({\n      uniforms,\n      parameters: Object.assign(\n        {\n          depthTest: false,\n          depthMask: false\n        },\n        parameters\n      )\n    });\n  }\n\n  calculateInstancePositions(attribute, {numInstances}) {\n    const {width, height} = this.context.viewport;\n    const {cellSizePixels} = this.props;\n    const {numCol} = this.state;\n    const {value, size} = attribute;\n\n    for (let i = 0; i < numInstances; i++) {\n      const x = i % numCol;\n      const y = Math.floor(i / numCol);\n      value[i * size + 0] = ((x * cellSizePixels) / width) * 2 - 1;\n      value[i * size + 1] = 1 - ((y * cellSizePixels) / height) * 2;\n      value[i * size + 2] = 0;\n    }\n  }\n\n  calculateInstanceCounts(attribute, {numInstances}) {\n    const {aggregationBuffer} = this.state;\n    attribute.update({\n      buffer: aggregationBuffer\n    });\n  }\n\n  getPickingInfo({info, mode}) {\n    const {index} = info;\n    if (index >= 0) {\n      const {gpuGridAggregator} = this.state;\n      // Get color aggregation results\n      const aggregationResults = gpuGridAggregator.getData('color');\n\n      // Each instance (one cell) is aggregated into single pixel,\n      // Get current instance's aggregation details.\n      info.object = GPUGridAggregator.getAggregationData(\n        Object.assign({pixelIndex: index}, aggregationResults)\n      );\n    }\n\n    return info;\n  }\n\n  // HELPER Methods\n\n  _getAggregationChangeFlags({oldProps, props, changeFlags}) {\n    const cellSizeChanged =\n      props.cellSizePixels !== oldProps.cellSizePixels ||\n      props.cellMarginPixels !== oldProps.cellMarginPixels;\n    const dataChanged = changeFlags.dataChanged || props.aggregation !== oldProps.aggregation;\n    const viewportChanged = changeFlags.viewportChanged;\n\n    if (cellSizeChanged || dataChanged || viewportChanged) {\n      return {cellSizeChanged, dataChanged, viewportChanged};\n    }\n\n    return null;\n  }\n\n  _getModel(gl) {\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLE_FAN,\n          attributes: {\n            positions: new Float32Array([0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0])\n          }\n        }),\n        isInstanced: true\n      })\n    );\n  }\n\n  // Process 'data' and build positions and weights Arrays.\n  _processData() {\n    const {data, getPosition, getWeight} = this.props;\n    const pointCount = count(data);\n    const positions = new Float64Array(pointCount * 2);\n    const colorWeights = new Float32Array(pointCount * 3);\n    const {weights} = this.state;\n\n    const {iterable, objectInfo} = createIterable(data);\n    for (const object of iterable) {\n      objectInfo.index++;\n      const position = getPosition(object, objectInfo);\n      const weight = getWeight(object, objectInfo);\n      const {index} = objectInfo;\n\n      positions[index * 2] = position[0];\n      positions[index * 2 + 1] = position[1];\n\n      if (Array.isArray(weight)) {\n        colorWeights[index * 3] = weight[0];\n        colorWeights[index * 3 + 1] = weight[1];\n        colorWeights[index * 3 + 2] = weight[2];\n      } else {\n        // backward compitability\n        colorWeights[index * 3] = weight;\n      }\n    }\n    weights.color.values = colorWeights;\n    this.setState({positions, pointCount});\n  }\n\n  _shouldUseMinMax() {\n    const {minColor, maxColor, colorDomain, colorRange} = this.props;\n    if (minColor || maxColor) {\n      log.deprecated('ScreenGridLayer props: minColor and maxColor', 'colorRange, colorDomain')();\n      return true;\n    }\n    // minColor and maxColor not supplied, check if colorRange or colorDomain supplied.\n    // NOTE: colorDomain and colorRange are experimental features, use them only when supplied.\n    if (colorDomain || colorRange) {\n      return false;\n    }\n    // None specified, use default minColor and maxColor\n    return true;\n  }\n\n  _updateAggregation(changeFlags) {\n    const attributeManager = this.getAttributeManager();\n    const {cellSizePixels, gpuAggregation} = this.props;\n\n    const {positions, weights} = this.state;\n    const {viewport} = this.context;\n\n    weights.color.operation =\n      AGGREGATION_OPERATION[this.props.aggregation.toUpperCase()] || AGGREGATION_OPERATION.SUM;\n\n    let projectPoints = false;\n    let gridTransformMatrix = null;\n\n    if (this.context.viewport instanceof WebMercatorViewport) {\n      // project points from world space (lng/lat) to viewport (screen) space.\n      projectPoints = true;\n    } else {\n      projectPoints = false;\n      // Use pixelProjectionMatrix to transform points to viewport (screen) space.\n      gridTransformMatrix = viewport.pixelProjectionMatrix;\n    }\n    const results = this.state.gpuGridAggregator.run({\n      positions,\n      weights,\n      cellSize: [cellSizePixels, cellSizePixels],\n      viewport,\n      changeFlags,\n      useGPU: gpuAggregation,\n      projectPoints,\n      gridTransformMatrix\n    });\n\n    attributeManager.invalidate('instanceCounts');\n    this.setState({maxTexture: results.color.maxTexture});\n  }\n\n  _updateUniforms({oldProps, props, changeFlags}) {\n    const newState = {};\n    if (COLOR_PROPS.some(key => oldProps[key] !== props[key])) {\n      newState.shouldUseMinMax = this._shouldUseMinMax();\n    }\n\n    if (oldProps.colorRange !== props.colorRange) {\n      newState.colorRange = colorRangeToFlatArray(props.colorRange);\n    }\n\n    if (\n      oldProps.cellMarginPixels !== props.cellMarginPixels ||\n      oldProps.cellSizePixels !== props.cellSizePixels ||\n      changeFlags.viewportChanged\n    ) {\n      const {width, height} = this.context.viewport;\n      const {cellSizePixels, cellMarginPixels} = this.props;\n      const margin = cellSizePixels > cellMarginPixels ? cellMarginPixels : 0;\n\n      newState.cellScale = new Float32Array([\n        ((cellSizePixels - margin) / width) * 2,\n        (-(cellSizePixels - margin) / height) * 2,\n        1\n      ]);\n    }\n    this.setState(newState);\n  }\n\n  _updateGridParams() {\n    const attributeManager = this.getAttributeManager();\n    attributeManager.invalidateAll();\n    const {width, height} = this.context.viewport;\n    const {cellSizePixels} = this.props;\n    const {gl} = this.context;\n\n    const numCol = Math.ceil(width / cellSizePixels);\n    const numRow = Math.ceil(height / cellSizePixels);\n    const numInstances = numCol * numRow;\n    const dataBytes = numInstances * 4 * 4;\n    let aggregationBuffer = this.state.aggregationBuffer;\n    if (aggregationBuffer) {\n      aggregationBuffer.delete();\n    }\n\n    aggregationBuffer = new Buffer(gl, {\n      byteLength: dataBytes,\n      accessor: {\n        size: 4,\n        type: GL.FLOAT,\n        divisor: 1\n      }\n    });\n    this.state.weights.color.aggregationBuffer = aggregationBuffer;\n    this.setState({\n      numCol,\n      numRow,\n      numInstances,\n      aggregationBuffer\n    });\n  }\n}\n\nScreenGridLayer.layerName = 'ScreenGridLayer';\nScreenGridLayer.defaultProps = defaultProps;\n"],"file":"screen-grid-layer.js"}