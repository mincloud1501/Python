import { hexbin } from 'd3-hexbin';
import { createIterable, log } from '@deck.gl/core';
export function pointToHexbin({
  data,
  radius,
  getPosition
}, viewport) {
  const radiusInPixel = getRadiusInPixel(radius, viewport);
  const screenPoints = [];
  const {
    iterable,
    objectInfo
  } = createIterable(data);

  for (const object of iterable) {
    objectInfo.index++;
    const position = getPosition(object, objectInfo);
    const arrayIsFinite = Number.isFinite(position[0]) && Number.isFinite(position[1]);

    if (arrayIsFinite) {
      screenPoints.push(Object.assign({
        screenCoord: viewport.projectFlat(position)
      }, object));
    } else {
      log.warn('HexagonLayer: invalid position')();
    }
  }

  const newHexbin = hexbin().radius(radiusInPixel).x(d => d.screenCoord[0]).y(d => d.screenCoord[1]);
  const hexagonBins = newHexbin(screenPoints);
  return {
    hexagons: hexagonBins.map((hex, index) => ({
      position: viewport.unprojectFlat([hex.x, hex.y]),
      points: hex,
      index
    }))
  };
}
export function getRadiusInPixel(radius, viewport) {
  const {
    pixelsPerMeter
  } = viewport.getDistanceScales();
  return radius * pixelsPerMeter[0];
}
//# sourceMappingURL=hexagon-aggregator.js.map