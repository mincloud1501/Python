{"version":3,"sources":["../../../../src/utils/gpu-grid-aggregation/grid-aggregation-utils.js"],"names":["Matrix4","fp64","fp64Utils","COORDINATE_SYSTEM","log","createIterable","experimental","count","fp64LowPart","R_EARTH","toFinite","n","Number","isFinite","pointToDensityGridData","data","getPosition","cellSizeMeters","gpuGridAggregator","gpuAggregation","aggregationFlags","weightParams","coordinateSystem","LNGLAT","viewport","boundingBox","gridData","dataChanged","parseGridData","assert","cellSize","worldOrigin","IDENTITY","LNGLAT_DEPRECATED","gridOffset","getGridOffset","xOffset","yOffset","width","height","opts","getGPUAggregationParams","aggregatedData","run","positions","positions64xyLow","weights","gridTransformMatrix","useGPU","changeFlags","gridSize","gridOrigin","pointCount","Float64Array","Float32Array","yMin","Infinity","yMax","xMin","xMax","y","x","name","Object","assign","values","iterable","objectInfo","object","index","position","weight","getWeight","Array","isArray","latMin","latMax","centerLat","calculateGridLatLonOffset","latitude","calculateLatOffset","calculateLonOffset","dy","Math","PI","lat","dx","cos","alignToCell","inValue","sign","value","abs","floor","originX","originY","translate","ceil"],"mappings":"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","sourcesContent":["import {Matrix4} from 'math.gl';\nimport {fp64 as fp64Utils} from '@luma.gl/core';\nimport {COORDINATE_SYSTEM, log, createIterable, experimental} from '@deck.gl/core';\nconst {count} = experimental;\nconst {fp64LowPart} = fp64Utils;\n\nconst R_EARTH = 6378000;\n\nfunction toFinite(n) {\n  return Number.isFinite(n) ? n : 0;\n}\n\n// Takes data and aggregation params and returns aggregated data.\nexport function pointToDensityGridData({\n  data,\n  getPosition,\n  cellSizeMeters,\n  gpuGridAggregator,\n  gpuAggregation,\n  aggregationFlags,\n  weightParams,\n  fp64 = false,\n  coordinateSystem = COORDINATE_SYSTEM.LNGLAT,\n  viewport = null,\n  boundingBox = null\n}) {\n  let gridData = {};\n  if (aggregationFlags.dataChanged) {\n    gridData = parseGridData(data, getPosition, weightParams);\n    boundingBox = gridData.boundingBox;\n  }\n  log.assert(cellSizeMeters > 0);\n  let cellSize = [cellSizeMeters, cellSizeMeters];\n  let worldOrigin = [0, 0];\n  log.assert(\n    coordinateSystem === COORDINATE_SYSTEM.LNGLAT || coordinateSystem === COORDINATE_SYSTEM.IDENTITY\n  );\n\n  switch (coordinateSystem) {\n    case COORDINATE_SYSTEM.LNGLAT:\n    case COORDINATE_SYSTEM.LNGLAT_DEPRECATED:\n      const gridOffset = getGridOffset(boundingBox, cellSizeMeters);\n      cellSize = [gridOffset.xOffset, gridOffset.yOffset];\n      worldOrigin = [-180, -90]; // Origin used to define grid cell boundaries\n      break;\n    case COORDINATE_SYSTEM.IDENTITY:\n      const {width, height} = viewport;\n      worldOrigin = [-width / 2, -height / 2]; // Origin used to define grid cell boundaries\n      break;\n    default:\n      // Currently other coodinate systems not supported/verified.\n      log.assert(false);\n  }\n\n  const opts = getGPUAggregationParams({boundingBox, cellSize, worldOrigin});\n\n  const aggregatedData = gpuGridAggregator.run({\n    positions: gridData.positions,\n    positions64xyLow: gridData.positions64xyLow,\n    weights: gridData.weights,\n    cellSize,\n    width: opts.width,\n    height: opts.height,\n    gridTransformMatrix: opts.gridTransformMatrix,\n    useGPU: gpuAggregation,\n    changeFlags: aggregationFlags,\n    fp64\n  });\n\n  return {\n    weights: aggregatedData,\n    gridSize: opts.gridSize,\n    gridOrigin: opts.gridOrigin,\n    cellSize,\n    boundingBox\n  };\n}\n\n// Parse input data to build positions, wights and bounding box.\n/* eslint-disable max-statements */\nfunction parseGridData(data, getPosition, weightParams) {\n  const pointCount = count(data);\n\n  // For CPU Aggregation this needs to have full 64 bit precession, hence don't use FLoat32Array\n  // For GPU Aggregation this will be converted into Float32Array\n  const positions = new Float64Array(pointCount * 2);\n  const positions64xyLow = new Float32Array(pointCount * 2);\n\n  let yMin = Infinity;\n  let yMax = -Infinity;\n  let xMin = Infinity;\n  let xMax = -Infinity;\n  let y;\n  let x;\n\n  const weights = {};\n  for (const name in weightParams) {\n    weights[name] = Object.assign({}, weightParams[name], {\n      values: new Float32Array(pointCount * 3)\n    });\n  }\n\n  const {iterable, objectInfo} = createIterable(data);\n  for (const object of iterable) {\n    objectInfo.index++;\n    const position = getPosition(object, objectInfo);\n    const {index} = objectInfo;\n    x = position[0];\n    y = position[1];\n    positions[index * 2] = x;\n    positions[index * 2 + 1] = y;\n\n    positions64xyLow[index * 2] = fp64LowPart(x);\n    positions64xyLow[index * 2 + 1] = fp64LowPart(y);\n\n    for (const name in weightParams) {\n      const weight = weightParams[name].getWeight(object);\n\n      // Aggregator expects each weight is an array of size 3\n      if (Array.isArray(weight)) {\n        weights[name].values[index * 3] = weight[0];\n        weights[name].values[index * 3 + 1] = weight[1];\n        weights[name].values[index * 3 + 2] = weight[2];\n      } else {\n        // backward compitability\n        weights[name].values[index * 3] = weight;\n      }\n    }\n\n    if (Number.isFinite(y) && Number.isFinite(x)) {\n      yMin = y < yMin ? y : yMin;\n      yMax = y > yMax ? y : yMax;\n\n      xMin = x < xMin ? x : xMin;\n      xMax = x > xMax ? x : xMax;\n    }\n  }\n\n  const boundingBox = {\n    xMin: toFinite(xMin),\n    xMax: toFinite(xMax),\n    yMin: toFinite(yMin),\n    yMax: toFinite(yMax)\n  };\n  return {\n    positions,\n    positions64xyLow,\n    weights,\n    boundingBox\n  };\n}\n/* eslint-enable max-statements */\n\n/**\n * Based on geometric center of sample points, calculate cellSize in lng/lat (degree) space\n * @param {object} gridData - contains bounding box of data\n * @param {number} cellSize - grid cell size in meters\n * @returns {yOffset, xOffset} - cellSize size lng/lat (degree) space.\n */\n\nfunction getGridOffset(boundingBox, cellSize) {\n  const {yMin, yMax} = boundingBox;\n  const latMin = yMin;\n  const latMax = yMax;\n  const centerLat = (latMin + latMax) / 2;\n\n  return calculateGridLatLonOffset(cellSize, centerLat);\n}\n\n/**\n * calculate grid layer cell size in lat lon based on world unit size\n * and current latitude\n * @param {number} cellSize\n * @param {number} latitude\n * @returns {object} - lat delta and lon delta\n */\nfunction calculateGridLatLonOffset(cellSize, latitude) {\n  const yOffset = calculateLatOffset(cellSize);\n  const xOffset = calculateLonOffset(latitude, cellSize);\n  return {yOffset, xOffset};\n}\n\n/**\n * with a given x-km change, calculate the increment of latitude\n * based on stackoverflow http://stackoverflow.com/questions/7477003\n * @param {number} dy - change in km\n * @return {number} - increment in latitude\n */\nfunction calculateLatOffset(dy) {\n  return (dy / R_EARTH) * (180 / Math.PI);\n}\n\n/**\n * with a given x-km change, and current latitude\n * calculate the increment of longitude\n * based on stackoverflow http://stackoverflow.com/questions/7477003\n * @param {number} lat - latitude of current location (based on city)\n * @param {number} dx - change in km\n * @return {number} - increment in longitude\n */\nfunction calculateLonOffset(lat, dx) {\n  return ((dx / R_EARTH) * (180 / Math.PI)) / Math.cos((lat * Math.PI) / 180);\n}\n\n// Aligns `inValue` to given `cellSize`\nexport function alignToCell(inValue, cellSize) {\n  const sign = inValue < 0 ? -1 : 1;\n\n  let value = sign < 0 ? Math.abs(inValue) + cellSize : Math.abs(inValue);\n\n  value = Math.floor(value / cellSize) * cellSize;\n\n  return value * sign;\n}\n\n// Calculate grid parameters\nfunction getGPUAggregationParams({boundingBox, cellSize, worldOrigin}) {\n  const {yMin, yMax, xMin, xMax} = boundingBox;\n\n  // NOTE: this alignment will match grid cell boundaries with existing CPU implementation\n  // this gurantees identical aggregation results when switching between CPU and GPU aggregation.\n  // Also gurantees same cell boundaries, when overlapping between two different layers (like ScreenGrid and Contour)\n  // We first move worldOrigin to [0, 0], align the lower bounding box , then move worldOrigin to its original value.\n  const originX = alignToCell(xMin - worldOrigin[0], cellSize[0]) + worldOrigin[0];\n  const originY = alignToCell(yMin - worldOrigin[1], cellSize[1]) + worldOrigin[1];\n\n  // Setup transformation matrix so that every point is in +ve range\n  const gridTransformMatrix = new Matrix4().translate([-1 * originX, -1 * originY, 0]);\n\n  const gridOrigin = [originX, originY];\n  const width = xMax - xMin + cellSize[0];\n  const height = yMax - yMin + cellSize[1];\n\n  const gridSize = [Math.ceil(width / cellSize[0]), Math.ceil(height / cellSize[1])];\n\n  return {\n    gridOrigin,\n    gridSize,\n    width,\n    height,\n    gridTransformMatrix\n  };\n}\n"],"file":"grid-aggregation-utils.js"}