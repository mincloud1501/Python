{"version":3,"sources":["../../../src/utils/cpu-aggregator.js"],"names":["BinSorter","getQuantizeScale","getLinearScale","getQuantileScale","getOrdinalScale","getValueFunc","nop","dimensionSteps","defaultDimensions","key","accessor","pickingInfo","getBins","triggers","value","prop","updateTrigger","weight","aggregation","getDomain","lowerPercentile","upperPercentile","onSet","props","getScaleFunc","domain","range","scaleType","nullValue","defaultGetCellSize","cellSize","CPUAggregator","constructor","opts","state","layerData","dimensions","changeFlags","dimensionUpdaters","_getCellSize","getCellSize","_getAggregator","getAggregator","_addDimension","updateState","oldProps","viewport","updateGetValueFuncs","reprojectNeeded","needsReProjectPoints","dataChanged","getAggregatedData","dimensionChanges","getDimensionChanges","forEach","f","setState","updateObject","Object","assign","setDimensionState","normalizeResult","result","hexagons","data","aggregator","getSortedBins","getValue","getValueChanged","needUpdateDimensionStep","updateTriggersChanged","all","getPosition","addDimension","dimension","getDimensionUpdaters","sortedBins","scaleFunc","updater","getDimensionSortedBins","getDimensionValueDomain","getDimensionScale","attributeAccessor","getSubLayerDimensionAttribute","dimensionStep","values","some","item","updaters","needUpdate","find","step","push","bind","length","getUpdateTriggers","_updateTriggers","updateTriggers","fromProp","Array","isArray","undefined","getScaleFunctionByScaleType","dimensionUpdater","valueDomain","getValueRange","dimensionRange","dimensionDomain","getScaleFunction","cell","cv","binMap","index","isValueInDomain","getSubLayerAccessors","accessors","getPickingInfo","info","isPicked","picked","object","binInfo","Boolean","getAccessor","dimensionKey","hasOwnProperty"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2018 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport BinSorter from './bin-sorter';\nimport {getQuantizeScale, getLinearScale, getQuantileScale, getOrdinalScale} from './scale-utils';\nimport {getValueFunc} from './aggregation-operation-utils';\n\nfunction nop() {}\n\nconst dimensionSteps = ['getBins', 'getDomain', 'getScaleFunc'];\nconst defaultDimensions = [\n  {\n    key: 'fillColor',\n    accessor: 'getFillColor',\n    pickingInfo: 'colorValue',\n    getBins: {\n      triggers: {\n        value: {\n          prop: 'getColorValue',\n          updateTrigger: 'getColorValue'\n        },\n        weight: {\n          prop: 'getColorWeight',\n          updateTrigger: 'getColorWeight'\n        },\n        aggregation: {\n          prop: 'colorAggregation'\n        }\n      }\n    },\n    getDomain: {\n      triggers: {\n        lowerPercentile: {\n          prop: 'lowerPercentile'\n        },\n        upperPercentile: {\n          prop: 'upperPercentile'\n        }\n      },\n      onSet: {\n        props: 'onSetColorDomain'\n      }\n    },\n    getScaleFunc: {\n      triggers: {\n        domain: {prop: 'colorDomain'},\n        range: {prop: 'colorRange'},\n        scaleType: {prop: 'colorScaleType'}\n      }\n    },\n    nullValue: [0, 0, 0, 0]\n  },\n  {\n    key: 'elevation',\n    accessor: 'getElevation',\n    pickingInfo: 'elevationValue',\n    getBins: {\n      triggers: {\n        value: {\n          prop: 'getElevationValue',\n          updateTrigger: 'getElevationValue'\n        },\n        weight: {\n          prop: 'getElevationWeight',\n          updateTrigger: 'getElevationWeight'\n        },\n        aggregation: {\n          prop: 'elevationAggregation'\n        }\n      }\n    },\n    getDomain: {\n      triggers: {\n        lowerPercentile: {\n          prop: 'elevationLowerPercentile'\n        },\n        upperPercentile: {\n          prop: 'elevationUpperPercentile'\n        }\n      },\n      onSet: {\n        props: 'onSetElevationDomain'\n      }\n    },\n    getScaleFunc: {\n      triggers: {\n        domain: {prop: 'elevationDomain'},\n        range: {prop: 'elevationRange'},\n        scaleType: {prop: 'elevationScaleType'}\n      }\n    },\n    nullValue: -1\n  }\n];\nconst defaultGetCellSize = props => props.cellSize;\nexport default class CPUAggregator {\n  constructor(opts) {\n    this.state = {\n      layerData: {},\n      dimensions: {\n        // color: {\n        //   getValue: null,\n        //   domain: null,\n        //   sortedBins: null,\n        //   scaleFunc: nop\n        // },\n        // elevation: {\n        //   getValue: null,\n        //   domain: null,\n        //   sortedBins: null,\n        //   scaleFunc: nop\n        // }\n      }\n    };\n    this.changeFlags = {};\n    this.dimensionUpdaters = {};\n\n    this._getCellSize = opts.getCellSize || defaultGetCellSize;\n    this._getAggregator = opts.getAggregator;\n    this._addDimension(opts.dimensions || defaultDimensions);\n  }\n\n  static defaultDimensions() {\n    return defaultDimensions;\n  }\n\n  updateState({oldProps, props, changeFlags}, viewport) {\n    this.updateGetValueFuncs(oldProps, props, changeFlags);\n    const reprojectNeeded = this.needsReProjectPoints(oldProps, props, changeFlags);\n\n    if (changeFlags.dataChanged || reprojectNeeded) {\n      // project data into hexagons, and get sortedColorBins\n      this.getAggregatedData(props, viewport);\n    } else {\n      const dimensionChanges = this.getDimensionChanges(oldProps, props, changeFlags) || [];\n      // this here is layer\n      dimensionChanges.forEach(f => typeof f === 'function' && f());\n    }\n\n    return this.state;\n  }\n\n  // Update private state\n  setState(updateObject) {\n    this.state = Object.assign({}, this.state, updateObject);\n  }\n\n  // Update private state.dimensions\n  setDimensionState(key, updateObject) {\n    this.setState({\n      dimensions: Object.assign({}, this.state.dimensions, {\n        [key]: Object.assign({}, this.state.dimensions[key], updateObject)\n      })\n    });\n  }\n\n  normalizeResult(result = {}) {\n    // support previous hexagonAggregator API\n    if (result.hexagons) {\n      return Object.assign({data: result.hexagons}, result);\n    } else if (result.layerData) {\n      return Object.assign({data: result.layerData}, result);\n    }\n\n    return result;\n  }\n\n  getAggregatedData(props, viewport) {\n    const aggregator = this._getAggregator(props);\n\n    // result should contain a data array and other props\n    // result = {data: [], ...other props}\n    const result = aggregator(props, viewport);\n    this.setState({\n      layerData: this.normalizeResult(result)\n    });\n    this.changeFlags = {\n      layerData: true\n    };\n    this.getSortedBins(props);\n  }\n\n  updateGetValueFuncs(oldProps, props, changeFlags) {\n    for (const key in this.dimensionUpdaters) {\n      const {value, weight, aggregation} = this.dimensionUpdaters[key].getBins.triggers;\n      let getValue = props[value.prop];\n      const getValueChanged = this.needUpdateDimensionStep(\n        this.dimensionUpdaters[key].getBins,\n        oldProps,\n        props,\n        changeFlags\n      );\n\n      if (getValueChanged && getValue === null) {\n        // If `getValue` is not provided from props, build it with aggregation and weight.\n        getValue = getValueFunc(props[aggregation.prop], props[weight.prop]);\n      }\n\n      if (getValue) {\n        this.setDimensionState(key, {getValue});\n      }\n    }\n  }\n\n  needsReProjectPoints(oldProps, props, changeFlags) {\n    return (\n      this._getCellSize(oldProps) !== this._getCellSize(props) ||\n      this._getAggregator(oldProps) !== this._getAggregator(props) ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPosition))\n    );\n  }\n\n  // Adds dimensions\n  addDimension(dimensions) {\n    this._addDimension(dimensions);\n  }\n\n  _addDimension(dimensions = []) {\n    dimensions.forEach(dimension => {\n      const {key} = dimension;\n      this.dimensionUpdaters[key] = this.getDimensionUpdaters(dimension);\n      this.state.dimensions[key] = {\n        getValue: null,\n        domain: null,\n        sortedBins: null,\n        scaleFunc: nop\n      };\n    });\n  }\n\n  getDimensionUpdaters({key, accessor, pickingInfo, getBins, getDomain, getScaleFunc, nullValue}) {\n    return {\n      key,\n      accessor,\n      pickingInfo,\n      getBins: Object.assign({updater: this.getDimensionSortedBins}, getBins),\n      getDomain: Object.assign({updater: this.getDimensionValueDomain}, getDomain),\n      getScaleFunc: Object.assign({updater: this.getDimensionScale}, getScaleFunc),\n      attributeAccessor: this.getSubLayerDimensionAttribute(key, nullValue)\n    };\n  }\n\n  needUpdateDimensionStep(dimensionStep, oldProps, props, changeFlags) {\n    // whether need to update current dimension step\n    // dimension step is the value, domain, scaleFunction of each dimension\n    // each step is an object with properties links to layer prop and whether the prop is\n    // controlled by updateTriggers\n    // getBins: {\n    //   value: {\n    //     prop: 'getElevationValue',\n    //     updateTrigger: 'getElevationValue'\n    //   },\n    //   weight: {\n    //     prop: 'getElevationWeight',\n    //     updateTrigger: 'getElevationWeight'\n    //   },\n    //   aggregation: {\n    //     prop: 'elevationAggregation'\n    //   }\n    // }\n    return Object.values(dimensionStep.triggers).some(item => {\n      if (item.updateTrigger) {\n        // check based on updateTriggers change first\n        return (\n          changeFlags.updateTriggersChanged &&\n          (changeFlags.updateTriggersChanged.all ||\n            changeFlags.updateTriggersChanged[item.updateTrigger])\n        );\n      }\n      // fallback to direct comparison\n      return oldProps[item.prop] !== props[item.prop];\n    });\n  }\n\n  getDimensionChanges(oldProps, props, changeFlags) {\n    // const {dimensionUpdaters} = this.state;\n    const updaters = [];\n\n    // get dimension to be updated\n    for (const key in this.dimensionUpdaters) {\n      // return the first triggered updater for each dimension\n      const needUpdate = dimensionSteps.find(step =>\n        this.needUpdateDimensionStep(\n          this.dimensionUpdaters[key][step],\n          oldProps,\n          props,\n          changeFlags\n        )\n      );\n\n      if (needUpdate) {\n        updaters.push(\n          this.dimensionUpdaters[key][needUpdate].updater.bind(\n            this,\n            props,\n            this.dimensionUpdaters[key]\n          )\n        );\n      }\n    }\n\n    return updaters.length ? updaters : null;\n  }\n\n  getUpdateTriggers(props) {\n    const _updateTriggers = props.updateTriggers || {};\n    const updateTriggers = {};\n\n    for (const key in this.dimensionUpdaters) {\n      const {accessor} = this.dimensionUpdaters[key];\n      // fold dimension triggers into each accessor\n      updateTriggers[accessor] = {};\n\n      dimensionSteps.forEach(step => {\n        Object.values(this.dimensionUpdaters[key][step].triggers).forEach(\n          ({prop, updateTrigger}) => {\n            if (updateTrigger) {\n              // if prop is based on updateTrigger e.g. getColorValue, getColorWeight\n              // and updateTriggers is passed in from layer prop\n              // fold the updateTriggers into accessor\n              const fromProp = _updateTriggers[updateTrigger];\n              if (typeof fromProp === 'object' && !Array.isArray(fromProp)) {\n                // if updateTrigger is an object spread it\n                Object.assign(updateTriggers[accessor], fromProp);\n              } else if (fromProp !== undefined) {\n                updateTriggers[accessor][prop] = fromProp;\n              }\n            } else {\n              // if prop is not based on updateTrigger\n              updateTriggers[accessor][prop] = props[prop];\n            }\n          }\n        );\n      });\n    }\n\n    return updateTriggers;\n  }\n\n  getScaleFunctionByScaleType(scaleType) {\n    switch (scaleType) {\n      case 'quantize':\n        return getQuantizeScale;\n      case 'linear':\n        return getLinearScale;\n      case 'quantile':\n        return getQuantileScale;\n      case 'ordinal':\n        return getOrdinalScale;\n\n      default:\n        return getQuantizeScale;\n    }\n  }\n\n  getSortedBins(props) {\n    for (const key in this.dimensionUpdaters) {\n      this.getDimensionSortedBins(props, this.dimensionUpdaters[key]);\n    }\n  }\n\n  getDimensionSortedBins(props, dimensionUpdater) {\n    // const {getColorValue} = this.state;\n    const {key} = dimensionUpdater;\n    const {getValue} = this.state.dimensions[key];\n\n    const sortedBins = new BinSorter(this.state.layerData.data || [], getValue);\n    this.setDimensionState(key, {sortedBins});\n    this.getDimensionValueDomain(props, dimensionUpdater);\n  }\n\n  getDimensionValueDomain(props, dimensionUpdater) {\n    const {getDomain, key} = dimensionUpdater;\n    const {\n      triggers: {lowerPercentile, upperPercentile},\n      onSet\n    } = getDomain;\n    const valueDomain = this.state.dimensions[key].sortedBins.getValueRange([\n      props[lowerPercentile.prop],\n      props[upperPercentile.prop]\n    ]);\n\n    if (typeof onSet === 'object' && typeof props[onSet.props] === 'function') {\n      props[onSet.props](valueDomain);\n    }\n\n    this.setDimensionState(key, {valueDomain});\n    this.getDimensionScale(props, dimensionUpdater);\n  }\n\n  getDimensionScale(props, dimensionUpdater) {\n    const {key, getScaleFunc} = dimensionUpdater;\n    const {domain, range, scaleType} = getScaleFunc.triggers;\n    // const {colorRange} = key;\n    const dimensionRange = props[range.prop];\n    const dimensionDomain = props[domain.prop] || this.state.dimensions[key].valueDomain;\n    const getScaleFunction = this.getScaleFunctionByScaleType(props[scaleType.prop]);\n    const scaleFunc = getScaleFunction(dimensionDomain, dimensionRange);\n\n    this.setDimensionState(key, {scaleFunc});\n  }\n\n  getSubLayerDimensionAttribute(key, nullValue) {\n    return cell => {\n      const {sortedBins, scaleFunc} = this.state.dimensions[key];\n\n      const cv = sortedBins.binMap[cell.index] && sortedBins.binMap[cell.index].value;\n      const domain = scaleFunc.domain();\n\n      const isValueInDomain = cv >= domain[0] && cv <= domain[domain.length - 1];\n\n      // if cell value is outside domain, set alpha to 0\n      return isValueInDomain ? scaleFunc(cv) : nullValue;\n    };\n  }\n\n  getSubLayerAccessors(props) {\n    const accessors = {};\n    for (const key in this.dimensionUpdaters) {\n      const {accessor} = this.dimensionUpdaters[key];\n      accessors[accessor] = this.getSubLayerDimensionAttribute(props, key);\n    }\n\n    return accessors;\n  }\n\n  getPickingInfo({info}) {\n    const isPicked = info.picked && info.index > -1;\n    let object = null;\n\n    if (isPicked) {\n      // const {sortedColorBins, sortedElevationBins} = this.state;\n\n      const cell = this.state.layerData.data[info.index];\n\n      const binInfo = {};\n      for (const key in this.dimensionUpdaters) {\n        const {pickingInfo} = this.dimensionUpdaters[key];\n        const {sortedBins} = this.state.dimensions[key];\n        const value = sortedBins.binMap[cell.index] && sortedBins.binMap[cell.index].value;\n        binInfo[pickingInfo] = value;\n      }\n\n      object = Object.assign(binInfo, cell);\n    }\n\n    // add bin colorValue and elevationValue to info\n    return Object.assign(info, {\n      picked: Boolean(object),\n      // override object with picked cell\n      object\n    });\n  }\n\n  getAccessor(dimensionKey) {\n    if (!this.dimensionUpdaters.hasOwnProperty(dimensionKey)) {\n      return nop;\n    }\n    return this.dimensionUpdaters[dimensionKey].attributeAccessor;\n  }\n}\n"],"file":"cpu-aggregator.js"}