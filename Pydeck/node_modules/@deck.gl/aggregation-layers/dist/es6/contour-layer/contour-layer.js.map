{"version":3,"sources":["../../../src/contour-layer/contour-layer.js"],"names":["equals","CompositeLayer","LineLayer","SolidPolygonLayer","generateContours","GPUGridAggregator","pointToDensityGridData","DEFAULT_COLOR","DEFAULT_STROKE_WIDTH","DEFAULT_THRESHOLD","defaultProps","cellSize","type","min","max","value","getPosition","x","position","getWeight","contours","threshold","fp64","zOffset","ContourLayer","initializeState","gl","context","options","id","state","contourData","gridAggregator","colorTrigger","strokeWidthTrigger","updateState","oldProps","props","changeFlags","dataChanged","contoursChanged","aggregationFlags","_getAggregationFlags","setState","countsData","_aggregateData","_shouldRebuildContours","_updateThresholdData","_generateContours","_updateSubLayerTriggers","finalizeState","delete","renderLayers","contourSegments","contourPolygons","hasIsolines","length","hasIsobands","lineLayer","_getLineLayerProps","solidPolygonLayer","_getSolidPolygonLayerProps","data","cellSizeMeters","gpuAggregation","coordinateSystem","weights","gridSize","gridOrigin","boundingBox","weightParams","count","gpuGridAggregator","viewport","aggregationData","countsBuffer","aggregationBuffer","thresholdData","getData","cellWeights","getCellData","updateTriggersChanged","all","Object","assign","cellSizeChanged","getSubLayerProps","getSourcePosition","d","start","getTargetPosition","end","getColor","_onGetSublayerColor","bind","getWidth","_onGetSublayerStrokeWidth","widthUnits","updateTriggers","getPolygon","vertices","getFillColor","element","color","forEach","segment","strokeWidth","some","contour","oldThresholds","map","thresholds","_","i","index","zIndex","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2018 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {equals} from 'math.gl';\nimport {CompositeLayer} from '@deck.gl/core';\nimport {LineLayer, SolidPolygonLayer} from '@deck.gl/layers';\nimport {generateContours} from './contour-utils';\n\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport {pointToDensityGridData} from '../utils/gpu-grid-aggregation/grid-aggregation-utils';\n\nconst DEFAULT_COLOR = [255, 255, 255, 255];\nconst DEFAULT_STROKE_WIDTH = 1;\nconst DEFAULT_THRESHOLD = 1;\n\nconst defaultProps = {\n  // grid aggregation\n  cellSize: {type: 'number', min: 1, max: 1000, value: 1000},\n  getPosition: {type: 'accessor', value: x => x.position},\n  getWeight: {type: 'accessor', value: x => 1},\n\n  // contour lines\n  contours: [{threshold: DEFAULT_THRESHOLD}],\n\n  fp64: false,\n  zOffset: 0.005\n};\n\nexport default class ContourLayer extends CompositeLayer {\n  initializeState() {\n    const {gl} = this.context;\n    const options = {\n      id: `${this.id}-gpu-aggregator`\n    };\n    this.state = {\n      contourData: {},\n      gridAggregator: new GPUGridAggregator(gl, options),\n      colorTrigger: 0,\n      strokeWidthTrigger: 0\n    };\n  }\n\n  updateState({oldProps, props, changeFlags}) {\n    let dataChanged = false;\n    let contoursChanged = false;\n    const aggregationFlags = this._getAggregationFlags({oldProps, props, changeFlags});\n    if (aggregationFlags) {\n      dataChanged = true;\n      // Clear countsData cache\n      this.setState({countsData: null});\n      this._aggregateData(aggregationFlags);\n    }\n\n    if (this._shouldRebuildContours({oldProps, props})) {\n      contoursChanged = true;\n      this._updateThresholdData(props);\n    }\n\n    if (dataChanged || contoursChanged) {\n      this._generateContours();\n    } else {\n      // data for sublayers not changed check if color or strokeWidth need to be updated\n      this._updateSubLayerTriggers(oldProps, props);\n    }\n  }\n\n  finalizeState() {\n    super.finalizeState();\n    this.state.gridAggregator.delete();\n  }\n\n  renderLayers() {\n    const {contourSegments, contourPolygons} = this.state.contourData;\n    const hasIsolines = contourSegments && contourSegments.length > 0;\n    const hasIsobands = contourPolygons && contourPolygons.length > 0;\n\n    const lineLayer = hasIsolines && new LineLayer(this._getLineLayerProps());\n    const solidPolygonLayer =\n      hasIsobands && new SolidPolygonLayer(this._getSolidPolygonLayerProps());\n    return [lineLayer, solidPolygonLayer];\n  }\n\n  // Private\n\n  _aggregateData(aggregationFlags) {\n    const {\n      data,\n      cellSize: cellSizeMeters,\n      getPosition,\n      getWeight,\n      gpuAggregation,\n      fp64,\n      coordinateSystem\n    } = this.props;\n    const {weights, gridSize, gridOrigin, cellSize, boundingBox} = pointToDensityGridData({\n      data,\n      cellSizeMeters,\n      getPosition,\n      weightParams: {count: {getWeight}},\n      gpuAggregation,\n      gpuGridAggregator: this.state.gridAggregator,\n      fp64,\n      coordinateSystem,\n      viewport: this.context.viewport,\n      boundingBox: this.state.boundingBox, // avoid parsing data when it is not changed.\n      aggregationFlags\n    });\n\n    this.setState({\n      countsData: weights.count.aggregationData,\n      countsBuffer: weights.count.aggregationBuffer,\n      gridSize,\n      gridOrigin,\n      cellSize,\n      boundingBox\n    });\n  }\n\n  _generateContours() {\n    const {gridSize, gridOrigin, cellSize, thresholdData} = this.state;\n    let {countsData} = this.state;\n    if (!countsData) {\n      const {countsBuffer} = this.state;\n      countsData = countsBuffer.getData();\n      this.setState({countsData});\n    }\n\n    const {cellWeights} = GPUGridAggregator.getCellData({countsData});\n    // const thresholds = this.props.contours.map(x => x.threshold);\n    const contourData = generateContours({\n      thresholdData,\n      cellWeights,\n      gridSize,\n      gridOrigin,\n      cellSize\n    });\n\n    // contourData contains both iso-lines and iso-bands if requested.\n    this.setState({contourData});\n  }\n\n  _getAggregationFlags({oldProps, props, changeFlags}) {\n    let aggregationFlags = null;\n    if (\n      changeFlags.dataChanged ||\n      oldProps.gpuAggregation !== props.gpuAggregation ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPosition))\n    ) {\n      aggregationFlags = Object.assign({}, aggregationFlags, {dataChanged: true});\n    }\n    if (oldProps.cellSize !== props.cellSize) {\n      aggregationFlags = Object.assign({}, aggregationFlags, {cellSizeChanged: true});\n    }\n    return aggregationFlags;\n  }\n\n  _getLineLayerProps() {\n    const {colorTrigger, strokeWidthTrigger} = this.state;\n\n    return this.getSubLayerProps({\n      id: 'contour-line-layer',\n      data: this.state.contourData.contourSegments,\n      getSourcePosition: d => d.start,\n      getTargetPosition: d => d.end,\n      getColor: this._onGetSublayerColor.bind(this),\n      getWidth: this._onGetSublayerStrokeWidth.bind(this),\n      widthUnits: 'pixels',\n      updateTriggers: {\n        getColor: colorTrigger,\n        getWidth: strokeWidthTrigger\n      }\n    });\n  }\n\n  _getSolidPolygonLayerProps() {\n    const {colorTrigger} = this.state;\n\n    return this.getSubLayerProps({\n      id: 'contour-solid-polygon-layer',\n      data: this.state.contourData.contourPolygons,\n      getPolygon: d => d.vertices,\n      getFillColor: this._onGetSublayerColor.bind(this),\n      updateTriggers: {\n        getFillColor: colorTrigger\n      }\n    });\n  }\n\n  _onGetSublayerColor(element) {\n    // element is either a line segment or polygon\n    const {contours} = this.props;\n    let color = DEFAULT_COLOR;\n    contours.forEach(data => {\n      if (equals(data.threshold, element.threshold)) {\n        color = data.color || DEFAULT_COLOR;\n      }\n    });\n    return color;\n  }\n\n  _onGetSublayerStrokeWidth(segment) {\n    const {contours} = this.props;\n    let strokeWidth = DEFAULT_STROKE_WIDTH;\n    // Linearly searches the contours, but there should only be few contours\n    contours.some(contour => {\n      if (contour.threshold === segment.threshold) {\n        strokeWidth = contour.strokeWidth || DEFAULT_STROKE_WIDTH;\n        return true;\n      }\n      return false;\n    });\n    return strokeWidth;\n  }\n\n  _shouldRebuildContours({oldProps, props}) {\n    if (\n      !oldProps.contours ||\n      !oldProps.zOffset ||\n      oldProps.contours.length !== props.contours.length ||\n      oldProps.zOffset !== props.zOffset\n    ) {\n      return true;\n    }\n    const oldThresholds = oldProps.contours.map(x => x.threshold);\n    const thresholds = props.contours.map(x => x.threshold);\n\n    return thresholds.some((_, i) => !equals(thresholds[i], oldThresholds[i]));\n  }\n\n  _updateSubLayerTriggers(oldProps, props) {\n    if (oldProps && oldProps.contours && props && props.contours) {\n      if (props.contours.some((contour, i) => contour.color !== oldProps.contours[i].color)) {\n        this.state.colorTrigger++;\n      }\n      if (\n        props.contours.some(\n          (contour, i) => contour.strokeWidth !== oldProps.contours[i].strokeWidth\n        )\n      ) {\n        this.state.strokeWidthTrigger++;\n      }\n    }\n  }\n\n  _updateThresholdData(props) {\n    const thresholdData = props.contours.map((x, index) => {\n      return {\n        threshold: x.threshold,\n        zIndex: x.zIndex || index,\n        zOffset: props.zOffset\n      };\n    });\n    this.setState({thresholdData});\n  }\n}\n\nContourLayer.layerName = 'ContourLayer';\nContourLayer.defaultProps = defaultProps;\n"],"file":"contour-layer.js"}