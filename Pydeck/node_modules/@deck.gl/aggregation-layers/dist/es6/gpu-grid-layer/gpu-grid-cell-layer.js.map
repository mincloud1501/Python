{"version":3,"sources":["../../../src/gpu-grid-layer/gpu-grid-cell-layer.js"],"names":["Layer","fp64LowPart","Model","CubeGeometry","PhongMaterial","fp64","fp64ShaderModule","defaultMaterial","defaultColorRange","colorRangeToFlatArray","vs","fs","COLOR_DATA_UBO_INDEX","ELEVATION_DATA_UBO_INDEX","defaultProps","colorDomain","colorRange","elevationDomain","elevationRange","elevationScale","type","min","value","gridSize","gridOrigin","gridOffset","cellSize","max","offset","coverage","extruded","material","GPUGridCellLayer","getShaders","modules","initializeState","gl","context","attributeManager","getAttributeManager","addInstanced","colors","size","update","calculateColors","noAlloc","elevations","calculateElevations","model","_getModel","_setupUniformBuffer","setState","Object","assign","id","props","geometry","isInstanced","draw","uniforms","data","gridOriginLow","gridOffsetLow","domainUniforms","getDomainUniforms","uniformBuffers","colorMaxMinBuffer","color","maxMinBuffer","elevationMaxMinBuffer","elevation","bindUniformBuffers","state","setUniforms","unbindUniformBuffers","bind","target","index","unbind","attribute","buffer","aggregationBuffer","colorDomainValid","elevationDomainValid","programHandle","program","handle","colorIndex","getUniformBlockIndex","elevationIndex","uniformBlockBinding","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, fp64LowPart} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, CubeGeometry, PhongMaterial, fp64 as fp64ShaderModule} from '@luma.gl/core';\nconst defaultMaterial = new PhongMaterial();\nimport {defaultColorRange, colorRangeToFlatArray} from '../utils/color-utils';\n\nimport vs from './gpu-grid-cell-layer-vertex.glsl';\nimport fs from './gpu-grid-cell-layer-fragment.glsl';\n\nconst COLOR_DATA_UBO_INDEX = 0;\nconst ELEVATION_DATA_UBO_INDEX = 1;\n\nconst defaultProps = {\n  // color\n  colorDomain: null,\n  colorRange: defaultColorRange,\n\n  // elevation\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  elevationScale: {type: 'number', min: 0, value: 1},\n\n  // grid\n  gridSize: {type: 'array', min: 0, value: [1, 1]},\n  gridOrigin: {type: 'array', min: 0, value: [0, 0]},\n  gridOffset: {type: 'array', min: 0, value: [0, 0]},\n\n  cellSize: {type: 'number', min: 0, max: 1000, value: 1000},\n  offset: {type: 'array', min: 0, value: [1, 1]},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  extruded: true,\n\n  material: defaultMaterial\n};\n\nexport default class GPUGridCellLayer extends Layer {\n  getShaders() {\n    return super.getShaders({\n      vs,\n      fs,\n      modules: ['project32', 'gouraud-lighting', 'picking', fp64ShaderModule]\n    });\n  }\n\n  initializeState() {\n    const {gl} = this.context;\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      colors: {\n        size: 4,\n        update: this.calculateColors,\n        noAlloc: true\n      },\n      elevations: {\n        size: 4,\n        update: this.calculateElevations,\n        noAlloc: true\n      }\n    });\n    const model = this._getModel(gl);\n    this._setupUniformBuffer(model);\n    this.setState({model});\n  }\n\n  _getModel(gl) {\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new CubeGeometry(),\n        isInstanced: true\n      })\n    );\n  }\n\n  draw({uniforms}) {\n    const {\n      data,\n      cellSize,\n      offset,\n      extruded,\n      elevationScale,\n      coverage,\n      gridSize,\n      gridOrigin,\n      gridOffset,\n      elevationRange\n    } = this.props;\n\n    const gridOriginLow = [fp64LowPart(gridOrigin[0]), fp64LowPart(gridOrigin[1])];\n    const gridOffsetLow = [fp64LowPart(gridOffset[0]), fp64LowPart(gridOffset[1])];\n    const domainUniforms = this.getDomainUniforms();\n    const uniformBuffers = {\n      colorMaxMinBuffer: data.color.maxMinBuffer,\n      elevationMaxMinBuffer: data.elevation.maxMinBuffer\n    };\n    const colorRange = colorRangeToFlatArray(this.props.colorRange);\n\n    this.bindUniformBuffers(uniformBuffers);\n    this.state.model\n      .setUniforms(\n        Object.assign({}, uniforms, domainUniforms, {\n          cellSize,\n          offset,\n          extruded,\n          elevationScale,\n          coverage,\n          gridSize,\n          gridOrigin,\n          gridOriginLow,\n          gridOffset,\n          gridOffsetLow,\n          colorRange,\n          elevationRange\n        })\n      )\n      .draw();\n    this.unbindUniformBuffers(uniformBuffers);\n  }\n\n  bindUniformBuffers({colorMaxMinBuffer, elevationMaxMinBuffer}) {\n    colorMaxMinBuffer.bind({target: GL.UNIFORM_BUFFER, index: COLOR_DATA_UBO_INDEX});\n    elevationMaxMinBuffer.bind({target: GL.UNIFORM_BUFFER, index: ELEVATION_DATA_UBO_INDEX});\n  }\n\n  unbindUniformBuffers({colorMaxMinBuffer, elevationMaxMinBuffer}) {\n    colorMaxMinBuffer.unbind({target: GL.UNIFORM_BUFFER, index: COLOR_DATA_UBO_INDEX});\n    elevationMaxMinBuffer.unbind({target: GL.UNIFORM_BUFFER, index: ELEVATION_DATA_UBO_INDEX});\n  }\n\n  calculateColors(attribute) {\n    const {data} = this.props;\n    attribute.update({\n      buffer: data.color.aggregationBuffer\n    });\n  }\n\n  calculateElevations(attribute) {\n    const {data} = this.props;\n    attribute.update({\n      buffer: data.elevation.aggregationBuffer\n    });\n  }\n\n  getDomainUniforms() {\n    const {colorDomain, elevationDomain} = this.props;\n    const domainUniforms = {};\n    if (colorDomain !== null) {\n      domainUniforms.colorDomainValid = true;\n      domainUniforms.colorDomain = colorDomain;\n    } else {\n      domainUniforms.colorDomainValid = false;\n    }\n    if (elevationDomain !== null) {\n      domainUniforms.elevationDomainValid = true;\n      domainUniforms.elevationDomain = elevationDomain;\n    } else {\n      domainUniforms.elevationDomainValid = false;\n    }\n    return domainUniforms;\n  }\n\n  _setupUniformBuffer(model) {\n    const gl = this.context.gl;\n    const programHandle = model.program.handle;\n\n    const colorIndex = gl.getUniformBlockIndex(programHandle, 'ColorData');\n    const elevationIndex = gl.getUniformBlockIndex(programHandle, 'ElevationData');\n    gl.uniformBlockBinding(programHandle, colorIndex, COLOR_DATA_UBO_INDEX);\n    gl.uniformBlockBinding(programHandle, elevationIndex, ELEVATION_DATA_UBO_INDEX);\n  }\n}\n\nGPUGridCellLayer.layerName = 'GPUGridCellLayer';\nGPUGridCellLayer.defaultProps = defaultProps;\n"],"file":"gpu-grid-cell-layer.js"}