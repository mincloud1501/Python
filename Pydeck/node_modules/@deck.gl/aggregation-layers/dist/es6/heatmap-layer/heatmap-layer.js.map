{"version":3,"sources":["../../../src/heatmap-layer/heatmap-layer.js"],"names":["getBounds","boundsContain","packVertices","scaleToAspectRatio","getTextureCoordinates","getTextureParams","Buffer","Texture2D","Transform","getParameter","FEATURES","hasFeatures","isWebGL2","CompositeLayer","AttributeManager","COORDINATE_SYSTEM","log","TriangleLayer","defaultColorRange","colorRangeToFlatArray","weights_vs","weights_fs","vs_max","RESOLUTION","SIZE_2K","ZOOM_DEBOUNCE","TEXTURE_OPTIONS","mipmaps","parameters","dataFormat","DEFAULT_COLOR_DOMAIN","defaultProps","getPosition","type","value","x","position","getWeight","intensity","min","radiusPixels","max","colorRange","threshold","colorDomain","optional","REQUIRED_FEATURES","BLEND_EQUATION_MINMAX","TEXTURE_FLOAT","HeatmapLayer","initializeState","gl","context","setState","supported","error","id","_setupTextureParams","_setupAttributes","_setupResources","shouldUpdateState","changeFlags","somethingChanged","updateState","opts","state","props","oldProps","_getChangeFlags","viewportChanged","boundsChanged","_updateBounds","dataChanged","uniformsChanged","_updateWeightmap","viewportZoomChanged","_debouncedUpdateWeightmap","_updateColorTexture","_updateTextureRenderingBounds","viewport","weightsScale","domainScale","scale","map","Math","zoom","renderLayers","weightsTexture","triPositionBuffer","triTexCoordBuffer","maxWeightsTexture","colorTexture","updateTriggers","getSubLayerProps","data","attributes","positions","texCoords","vertexCount","maxTexture","texture","finalizeState","weightsTransform","maxWeightTransform","delete","_getAttributeManager","stats","_isDataChanged","_getTextures","textureSize","format","width","height","updateTriggersChanged","all","attributeManager","getAttributeManager","add","size","accessor","weights","floatTargetSupport","COLOR_ATTACHMENT_RGBA32F","warn","vs","_fs","modules","elementCount","_targetTexture","_targetTextureVarying","_sourceTextures","inTexture","model","byteLength","_updateMaxWeightValue","run","blend","depthTest","blendFunc","blendEquation","forceUpdate","viewportCorners","unproject","visibleWorldBounds","visibleCommonBounds","_worldToCommonBounds","newState","worldBounds","scaledCommonBounds","_commonToWorldBounds","coordinateSystem","LNGLAT","normalizedCommonBounds","scaleToAspect","normalize","commonBounds","subData","textureBounds","p","projectPosition","colors","setImageData","length","_updateAttributes","moduleParameters","Object","assign","create","pickingActive","useLayerCoordinateSystem","uniforms","getModuleUniforms","textureWidth","update","getNumInstances","clearRenderTarget","setParameters","lastUpdate","Date","now","fromTimer","updateTimer","timeSinceLastUpdate","setTimeout","bind","minLong","minLat","maxLong","maxLat","topLeftCommon","bottomRightCommon","slice","concat","xMin","yMin","xMax","yMax","topLeftWorld","unprojectPosition","bottomRightWorld","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* global setTimeout */\nimport GL from '@luma.gl/constants';\nimport {\n  getBounds,\n  boundsContain,\n  packVertices,\n  scaleToAspectRatio,\n  getTextureCoordinates,\n  getTextureParams\n} from './heatmap-layer-utils';\nimport {\n  Buffer,\n  Texture2D,\n  Transform,\n  getParameter,\n  FEATURES,\n  hasFeatures,\n  isWebGL2\n} from '@luma.gl/core';\nimport {CompositeLayer, AttributeManager, COORDINATE_SYSTEM, log} from '@deck.gl/core';\nimport TriangleLayer from './triangle-layer';\nimport {defaultColorRange, colorRangeToFlatArray} from '../utils/color-utils';\nimport weights_vs from './weights-vs.glsl';\nimport weights_fs from './weights-fs.glsl';\nimport vs_max from './max-vs.glsl';\n\nconst RESOLUTION = 2; // (number of common space pixels) / (number texels)\nconst SIZE_2K = 2048;\nconst ZOOM_DEBOUNCE = 500; // milliseconds\nconst TEXTURE_OPTIONS = {\n  mipmaps: false,\n  parameters: {\n    [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n    [GL.TEXTURE_MIN_FILTER]: GL.LINEAR,\n    [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n    [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n  },\n  dataFormat: GL.RGBA\n};\nconst DEFAULT_COLOR_DOMAIN = [0, 0];\n\nconst defaultProps = {\n  getPosition: {type: 'accessor', value: x => x.position},\n  getWeight: {type: 'accessor', value: 1},\n  intensity: {type: 'number', min: 0, value: 1},\n  radiusPixels: {type: 'number', min: 1, max: 100, value: 30},\n  colorRange: defaultColorRange,\n  threshold: {type: 'number', min: 0, max: 1, value: 0.05},\n  colorDomain: {type: 'array', value: null, optional: true}\n};\n\nconst REQUIRED_FEATURES = [\n  FEATURES.BLEND_EQUATION_MINMAX, // max weight calculation\n  FEATURES.TEXTURE_FLOAT // weight-map as texture\n  // FEATURES.FLOAT_BLEND, // implictly supported when TEXTURE_FLOAT is supported\n];\n\nexport default class HeatmapLayer extends CompositeLayer {\n  initializeState() {\n    const {gl} = this.context;\n    if (!hasFeatures(gl, REQUIRED_FEATURES)) {\n      this.setState({supported: false});\n      log.error(`HeatmapLayer: ${this.id} is not supported on this browser`)();\n      return;\n    }\n    this.setState({supported: true});\n    this._setupTextureParams();\n    this._setupAttributes();\n    this._setupResources();\n  }\n\n  shouldUpdateState({changeFlags}) {\n    // Need to be updated when viewport changes\n    return changeFlags.somethingChanged;\n  }\n\n  /* eslint-disable complexity */\n  updateState(opts) {\n    if (!this.state.supported) {\n      return;\n    }\n    super.updateState(opts);\n    const {props, oldProps} = opts;\n    const changeFlags = this._getChangeFlags(opts);\n\n    if (changeFlags.viewportChanged) {\n      changeFlags.boundsChanged = this._updateBounds();\n    }\n\n    if (changeFlags.dataChanged || changeFlags.boundsChanged || changeFlags.uniformsChanged) {\n      this._updateWeightmap();\n    } else if (changeFlags.viewportZoomChanged) {\n      this._debouncedUpdateWeightmap();\n    }\n\n    if (props.colorRange !== oldProps.colorRange) {\n      this._updateColorTexture(opts);\n    }\n\n    if (changeFlags.viewportChanged) {\n      this._updateTextureRenderingBounds();\n    }\n\n    if (oldProps.colorDomain !== props.colorDomain || changeFlags.viewportChanged) {\n      const {viewport} = this.context;\n      const {weightsScale} = this.state;\n      const domainScale = (viewport ? 1024 / viewport.scale : 1) * weightsScale;\n      const colorDomain = props.colorDomain\n        ? props.colorDomain.map(x => x * domainScale)\n        : DEFAULT_COLOR_DOMAIN;\n      if (colorDomain[1] > 0 && weightsScale < 1) {\n        // Hack - when low precision texture is used, aggregated weights are in the [0, 1]\n        // range. Scale colorDomain to fit.\n        const max = Math.min(colorDomain[1], 1);\n        colorDomain[0] *= max / colorDomain[1];\n        colorDomain[1] = max;\n      }\n      this.setState({colorDomain});\n    }\n\n    this.setState({zoom: opts.context.viewport.zoom});\n  }\n  /* eslint-enable complexity */\n\n  renderLayers() {\n    if (!this.state.supported) {\n      return [];\n    }\n    const {\n      weightsTexture,\n      triPositionBuffer,\n      triTexCoordBuffer,\n      maxWeightsTexture,\n      colorTexture,\n      colorDomain\n    } = this.state;\n    const {updateTriggers, intensity, threshold} = this.props;\n\n    return new TriangleLayer(\n      this.getSubLayerProps({\n        id: 'triangle-layer',\n        updateTriggers\n      }),\n      {\n        data: {\n          attributes: {\n            positions: triPositionBuffer,\n            texCoords: triTexCoordBuffer\n          }\n        },\n        vertexCount: 4,\n        maxTexture: maxWeightsTexture,\n        colorTexture,\n        texture: weightsTexture,\n        intensity,\n        threshold,\n        colorDomain\n      }\n    );\n  }\n\n  finalizeState() {\n    super.finalizeState();\n    const {\n      weightsTransform,\n      weightsTexture,\n      maxWeightTransform,\n      maxWeightsTexture,\n      triPositionBuffer,\n      triTexCoordBuffer,\n      colorTexture\n    } = this.state;\n    /* eslint-disable no-unused-expressions */\n    weightsTransform && weightsTransform.delete();\n    weightsTexture && weightsTexture.delete();\n    maxWeightTransform && maxWeightTransform.delete();\n    maxWeightsTexture && maxWeightsTexture.delete();\n    triPositionBuffer && triPositionBuffer.delete();\n    triTexCoordBuffer && triTexCoordBuffer.delete();\n    colorTexture && colorTexture.delete();\n    /* eslint-enable no-unused-expressions */\n  }\n\n  // PRIVATE\n\n  // override Composite layer private method to create AttributeManager instance\n  _getAttributeManager() {\n    return new AttributeManager(this.context.gl, {\n      id: this.props.id,\n      stats: this.context.stats\n    });\n  }\n\n  _getChangeFlags(opts) {\n    const {oldProps, props} = opts;\n    const changeFlags = {};\n    if (this._isDataChanged(opts)) {\n      changeFlags.dataChanged = true;\n    }\n    if (oldProps.radiusPixels !== props.radiusPixels) {\n      changeFlags.uniformsChanged = true;\n    }\n    changeFlags.viewportChanged = opts.changeFlags.viewportChanged;\n\n    const {zoom} = this.state;\n    if (!opts.context.viewport || opts.context.viewport.zoom !== zoom) {\n      changeFlags.viewportZoomChanged = true;\n    }\n\n    return changeFlags;\n  }\n\n  _getTextures() {\n    const {gl} = this.context;\n    const {textureSize, format, type} = this.state;\n\n    return {\n      weightsTexture: new Texture2D(gl, {\n        width: textureSize,\n        height: textureSize,\n        format,\n        type,\n        ...TEXTURE_OPTIONS\n      }),\n      maxWeightsTexture: new Texture2D(gl, {format, type, ...TEXTURE_OPTIONS}) // 1 X 1 texture,\n    };\n  }\n\n  _isDataChanged({changeFlags}) {\n    if (changeFlags.dataChanged) {\n      return true;\n    }\n    if (\n      changeFlags.updateTriggersChanged &&\n      (changeFlags.updateTriggersChanged.all ||\n        changeFlags.updateTriggersChanged.getPosition ||\n        changeFlags.updateTriggersChanged.getWeight)\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  _setupAttributes() {\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      positions: {size: 3, accessor: 'getPosition'},\n      weights: {size: 1, accessor: 'getWeight'}\n    });\n  }\n\n  _setupTextureParams() {\n    const {gl} = this.context;\n    const textureSize = Math.min(SIZE_2K, getParameter(gl, gl.MAX_TEXTURE_SIZE));\n    const floatTargetSupport = hasFeatures(gl, FEATURES.COLOR_ATTACHMENT_RGBA32F);\n    const {format, type} = getTextureParams({gl, floatTargetSupport});\n    const weightsScale = floatTargetSupport ? 1 : 1 / 255;\n    this.setState({textureSize, format, type, weightsScale});\n    if (!floatTargetSupport) {\n      log.warn(\n        `HeatmapLayer: ${\n          this.id\n        } rendering to float texture not supported, fallingback to low precession format`\n      )();\n    }\n  }\n\n  _setupResources() {\n    const {gl} = this.context;\n    const {textureSize} = this.state;\n    const {weightsTexture, maxWeightsTexture} = this._getTextures();\n    const weightsTransform = new Transform(gl, {\n      id: `${this.id}-weights-transform`,\n      vs: weights_vs,\n      _fs: weights_fs,\n      modules: ['project32'],\n      elementCount: 1,\n      _targetTexture: weightsTexture,\n      _targetTextureVarying: 'weightsTexture'\n    });\n    const maxWeightTransform = new Transform(gl, {\n      id: `${this.id}-max-weights-transform`,\n      _sourceTextures: {\n        inTexture: weightsTexture\n      },\n      _targetTexture: maxWeightsTexture,\n      _targetTextureVarying: 'outTexture',\n      vs: vs_max,\n      elementCount: textureSize * textureSize\n    });\n\n    this.setState({\n      weightsTexture,\n      maxWeightsTexture,\n      weightsTransform,\n      model: weightsTransform.model,\n      maxWeightTransform,\n      zoom: null,\n      triPositionBuffer: new Buffer(gl, {\n        byteLength: 48,\n        accessor: {size: 3}\n      }),\n      triTexCoordBuffer: new Buffer(gl, {\n        byteLength: 48,\n        accessor: {size: 2}\n      })\n    });\n  }\n\n  _updateMaxWeightValue() {\n    const {maxWeightTransform} = this.state;\n    maxWeightTransform.run({\n      parameters: {\n        blend: true,\n        depthTest: false,\n        blendFunc: [GL.ONE, GL.ONE],\n        blendEquation: GL.MAX\n      }\n    });\n  }\n\n  // Computes world bounds area that needs to be processed for generate heatmap\n  _updateBounds(forceUpdate = false) {\n    const {textureSize} = this.state;\n    const {viewport} = this.context;\n\n    // Unproject all 4 corners of the current screen coordinates into world coordinates (lng/lat)\n    // Takes care of viewport has non zero bearing/pitch (i.e axis not aligned with world coordiante system)\n    const viewportCorners = [\n      viewport.unproject([0, 0]),\n      viewport.unproject([viewport.width, 0]),\n      viewport.unproject([viewport.width, viewport.height]),\n      viewport.unproject([0, viewport.height])\n    ];\n\n    // #1: get world bounds for current viewport extends\n    const visibleWorldBounds = getBounds(viewportCorners); // TODO: Change to visible bounds\n    // #2 : convert world bounds to common (Flat) bounds\n    const visibleCommonBounds = this._worldToCommonBounds(visibleWorldBounds);\n\n    const newState = {visibleWorldBounds, viewportCorners};\n    let boundsChanged = false;\n\n    if (\n      forceUpdate ||\n      !this.state.worldBounds ||\n      !boundsContain(this.state.worldBounds, visibleWorldBounds)\n    ) {\n      // #3: extend common bounds to match aspect ratio with viewport\n      const scaledCommonBounds = scaleToAspectRatio(\n        visibleCommonBounds,\n        textureSize * RESOLUTION,\n        textureSize * RESOLUTION\n      );\n\n      // #4 :convert aligned common bounds to world bounds\n      const worldBounds = this._commonToWorldBounds(scaledCommonBounds);\n\n      // Clip webmercator projection limits\n      if (this.props.coordinateSystem === COORDINATE_SYSTEM.LNGLAT) {\n        worldBounds[1] = Math.max(worldBounds[1], -85.051129);\n        worldBounds[3] = Math.min(worldBounds[3], 85.051129);\n        worldBounds[0] = Math.max(worldBounds[0], -360);\n        worldBounds[2] = Math.min(worldBounds[2], 360);\n      }\n\n      // #5: now convert world bounds to common using Layer's coordiante system and origin\n      const normalizedCommonBounds = this._worldToCommonBounds(worldBounds, {\n        scaleToAspect: true,\n        normalize: true,\n        width: textureSize * RESOLUTION,\n        height: textureSize * RESOLUTION\n      });\n\n      newState.worldBounds = worldBounds;\n      newState.normalizedCommonBounds = normalizedCommonBounds;\n\n      boundsChanged = true;\n    }\n    this.setState(newState);\n    return boundsChanged;\n  }\n\n  _updateTextureRenderingBounds() {\n    // Just render visible portion of the texture\n    const {\n      triPositionBuffer,\n      triTexCoordBuffer,\n      normalizedCommonBounds,\n      viewportCorners\n    } = this.state;\n\n    const {viewport} = this.context;\n    const commonBounds = normalizedCommonBounds.map(x => x * viewport.scale);\n\n    triPositionBuffer.subData(packVertices(viewportCorners, 3));\n\n    const textureBounds = viewportCorners.map(p =>\n      getTextureCoordinates(viewport.projectPosition(p), commonBounds)\n    );\n    triTexCoordBuffer.subData(packVertices(textureBounds, 2));\n  }\n\n  _updateColorTexture(opts) {\n    const {colorRange} = opts.props;\n    let {colorTexture} = this.state;\n    const colors = colorRangeToFlatArray(colorRange, true);\n\n    if (colorTexture) {\n      colorTexture.setImageData({\n        data: colors,\n        width: colorRange.length\n      });\n    } else {\n      colorTexture = new Texture2D(this.context.gl, {\n        data: colors,\n        width: colorRange.length,\n        height: 1,\n        format: isWebGL2(this.context.gl) ? GL.RGBA32F : GL.RGBA,\n        type: GL.FLOAT,\n        ...TEXTURE_OPTIONS\n      });\n    }\n    this.setState({colorTexture});\n  }\n\n  _updateWeightmap() {\n    const {radiusPixels} = this.props;\n    const {weightsTransform, worldBounds, textureSize, weightsTexture, weightsScale} = this.state;\n\n    // base Layer class doesn't update attributes for composite layers, hence manually trigger it.\n    this._updateAttributes(this.props);\n\n    const moduleParameters = Object.assign(Object.create(this.props), {\n      viewport: this.context.viewport,\n      pickingActive: 0\n    });\n\n    // #5: convert world bounds to common using Layer's coordiante system and origin\n    const commonBounds = this._worldToCommonBounds(worldBounds, {\n      useLayerCoordinateSystem: true,\n      scaleToAspect: true,\n      width: textureSize * RESOLUTION,\n      height: textureSize * RESOLUTION\n    });\n\n    const uniforms = Object.assign({}, weightsTransform.model.getModuleUniforms(moduleParameters), {\n      radiusPixels,\n      commonBounds,\n      textureWidth: textureSize,\n      weightsScale\n    });\n    // Attribute manager sets data array count as instaceCount on model\n    // we need to set that as elementCount on 'weightsTransform'\n    weightsTransform.update({\n      elementCount: this.getNumInstances()\n    });\n    weightsTransform.run({\n      uniforms,\n      parameters: {\n        blend: true,\n        depthTest: false,\n        blendFunc: [GL.ONE, GL.ONE],\n        blendEquation: GL.FUNC_ADD\n      },\n      clearRenderTarget: true\n    });\n    this._updateMaxWeightValue();\n\n    // reset filtering parameters (TODO: remove once luma issue#1193 is fixed)\n    weightsTexture.setParameters({\n      [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n      [GL.TEXTURE_MIN_FILTER]: GL.LINEAR\n    });\n\n    this.setState({lastUpdate: Date.now()});\n  }\n\n  _debouncedUpdateWeightmap(fromTimer = false) {\n    let {updateTimer} = this.state;\n    const timeSinceLastUpdate = Date.now() - this.state.lastUpdate;\n\n    if (fromTimer) {\n      updateTimer = null;\n    }\n\n    if (timeSinceLastUpdate >= ZOOM_DEBOUNCE) {\n      // update\n      this._updateBounds(true);\n      this._updateWeightmap();\n      this._updateTextureRenderingBounds();\n    } else if (!updateTimer) {\n      updateTimer = setTimeout(\n        this._debouncedUpdateWeightmap.bind(this, true),\n        ZOOM_DEBOUNCE - timeSinceLastUpdate\n      );\n    }\n\n    this.setState({updateTimer});\n  }\n\n  // input: worldBounds: [minLong, minLat, maxLong, maxLat]\n  // input: opts.useLayerCoordinateSystem : layers coordiante system is used\n  // optput: commonBounds: [minX, minY, maxX, maxY]\n  _worldToCommonBounds(worldBounds, opts = {}) {\n    const {useLayerCoordinateSystem = false, scaleToAspect = false, width, height} = opts;\n    const [minLong, minLat, maxLong, maxLat] = worldBounds;\n    const {viewport} = this.context;\n\n    let topLeftCommon;\n    let bottomRightCommon;\n\n    // Y-axis is flipped between World and Common bounds\n    if (useLayerCoordinateSystem) {\n      topLeftCommon = this.projectPosition([minLong, maxLat, 0]);\n      bottomRightCommon = this.projectPosition([maxLong, minLat, 0]);\n    } else {\n      topLeftCommon = viewport.projectPosition([minLong, maxLat, 0]);\n      bottomRightCommon = viewport.projectPosition([maxLong, minLat, 0]);\n    }\n    // Ignore z component\n    let commonBounds = topLeftCommon.slice(0, 2).concat(bottomRightCommon.slice(0, 2));\n    if (scaleToAspect) {\n      commonBounds = scaleToAspectRatio(commonBounds, width, height);\n    }\n    if (opts.normalize) {\n      commonBounds = commonBounds.map(x => x / viewport.scale);\n    }\n    return commonBounds;\n  }\n\n  // input commonBounds: [xMin, yMin, xMax, yMax]\n  // output worldBounds: [minLong, minLat, maxLong, maxLat]\n  _commonToWorldBounds(commonBounds) {\n    const [xMin, yMin, xMax, yMax] = commonBounds;\n    const {viewport} = this.context;\n    const topLeftWorld = viewport.unprojectPosition([xMin, yMax]);\n    const bottomRightWorld = viewport.unprojectPosition([xMax, yMin]);\n\n    return topLeftWorld.slice(0, 2).concat(bottomRightWorld.slice(0, 2));\n  }\n}\n\nHeatmapLayer.layerName = 'HeatmapLayer';\nHeatmapLayer.defaultProps = defaultProps;\n"],"file":"heatmap-layer.js"}