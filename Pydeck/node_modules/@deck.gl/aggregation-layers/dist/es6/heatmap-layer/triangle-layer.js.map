{"version":3,"sources":["../../../src/heatmap-layer/triangle-layer.js"],"names":["Model","Geometry","Layer","vs","fs","defaultProps","count","texture","TriangleLayer","getShaders","modules","initializeState","gl","context","attributeManager","getAttributeManager","add","positions","size","noAlloc","texCoords","setState","model","_getModel","vertexCount","props","Object","assign","id","geometry","drawMode","draw","uniforms","state","maxTexture","colorTexture","intensity","threshold","colorDomain","setUniforms","layerName"],"mappings":";;;;;;AAqBA,SAAQA,KAAR,EAAeC,QAAf,QAA8B,eAA9B;AACA,SAAQC,KAAR,QAAoB,eAApB;AACA,OAAOC,EAAP,MAAe,8BAAf;AACA,OAAOC,EAAP,MAAe,gCAAf;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,CADY;AAEnBC,EAAAA,OAAO,EAAE;AAFU,CAArB;AAKA,eAAe,MAAMC,aAAN,SAA4BN,KAA5B,CAAkC;AAC/CO,EAAAA,UAAU,GAAG;AACX,WAAO;AAACN,MAAAA,EAAD;AAAKC,MAAAA,EAAL;AAASM,MAAAA,OAAO,EAAE,CAAC,WAAD;AAAlB,KAAP;AACD;;AAEDC,EAAAA,eAAe,GAAG;AAChB,UAAM;AAACC,MAAAA;AAAD,QAAO,KAAKC,OAAlB;AACA,UAAMC,gBAAgB,GAAG,KAAKC,mBAAL,EAAzB;AACAD,IAAAA,gBAAgB,CAACE,GAAjB,CAAqB;AACnBC,MAAAA,SAAS,EAAE;AAACC,QAAAA,IAAI,EAAE,CAAP;AAAUC,QAAAA,OAAO,EAAE;AAAnB,OADQ;AAEnBC,MAAAA,SAAS,EAAE;AAACF,QAAAA,IAAI,EAAE,CAAP;AAAUC,QAAAA,OAAO,EAAE;AAAnB;AAFQ,KAArB;AAIA,SAAKE,QAAL,CAAc;AACZC,MAAAA,KAAK,EAAE,KAAKC,SAAL,CAAeX,EAAf;AADK,KAAd;AAGD;;AAEDW,EAAAA,SAAS,CAACX,EAAD,EAAK;AACZ,UAAM;AAACY,MAAAA;AAAD,QAAgB,KAAKC,KAA3B;AAEA,WAAO,IAAIzB,KAAJ,CACLY,EADK,EAELc,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKlB,UAAL,EAAlB,EAAqC;AACnCmB,MAAAA,EAAE,EAAE,KAAKH,KAAL,CAAWG,EADoB;AAEnCC,MAAAA,QAAQ,EAAE,IAAI5B,QAAJ,CAAa;AACrB6B,QAAAA,QAAQ,GADa;AAErBN,QAAAA;AAFqB,OAAb;AAFyB,KAArC,CAFK,CAAP;AAUD;;AAEDO,EAAAA,IAAI,CAAC;AAACC,IAAAA;AAAD,GAAD,EAAa;AACf,UAAM;AAACV,MAAAA;AAAD,QAAU,KAAKW,KAArB;AAEA,UAAM;AAAC1B,MAAAA,OAAD;AAAU2B,MAAAA,UAAV;AAAsBC,MAAAA,YAAtB;AAAoCC,MAAAA,SAApC;AAA+CC,MAAAA,SAA/C;AAA0DC,MAAAA;AAA1D,QAAyE,KAAKb,KAApF;AACAH,IAAAA,KAAK,CACFiB,WADH,mBAEOP,QAFP;AAGIzB,MAAAA,OAHJ;AAII2B,MAAAA,UAJJ;AAKIC,MAAAA,YALJ;AAMIC,MAAAA,SANJ;AAOIC,MAAAA,SAPJ;AAQIC,MAAAA;AARJ,QAUGP,IAVH;AAWD;;AA/C8C;AAkDjDvB,aAAa,CAACgC,SAAd,GAA0B,eAA1B;AACAhC,aAAa,CAACH,YAAd,GAA6BA,YAA7B","sourcesContent":["// Copyright (c) 2015 - 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\nimport {Layer} from '@deck.gl/core';\nimport vs from './triangle-layer-vertex.glsl';\nimport fs from './triangle-layer-fragment.glsl';\n\nconst defaultProps = {\n  count: 0, // number of triangles to be rendered\n  texture: null\n};\n\nexport default class TriangleLayer extends Layer {\n  getShaders() {\n    return {vs, fs, modules: ['project32']};\n  }\n\n  initializeState() {\n    const {gl} = this.context;\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      positions: {size: 3, noAlloc: true},\n      texCoords: {size: 2, noAlloc: true}\n    });\n    this.setState({\n      model: this._getModel(gl)\n    });\n  }\n\n  _getModel(gl) {\n    const {vertexCount} = this.props;\n\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLE_FAN,\n          vertexCount\n        })\n      })\n    );\n  }\n\n  draw({uniforms}) {\n    const {model} = this.state;\n\n    const {texture, maxTexture, colorTexture, intensity, threshold, colorDomain} = this.props;\n    model\n      .setUniforms({\n        ...uniforms,\n        texture,\n        maxTexture,\n        colorTexture,\n        intensity,\n        threshold,\n        colorDomain\n      })\n      .draw();\n  }\n}\n\nTriangleLayer.layerName = 'TriangleLayer';\nTriangleLayer.defaultProps = defaultProps;\n"],"file":"triangle-layer.js"}