{"version":3,"sources":["../../../src/screen-grid-layer/screen-grid-layer.js"],"names":["Layer","WebMercatorViewport","createIterable","log","experimental","count","defaultColorRange","colorRangeToFlatArray","GPUGridAggregator","AGGREGATION_OPERATION","Model","Geometry","Buffer","FEATURES","hasFeatures","vs","fs","DEFAULT_MINCOLOR","DEFAULT_MAXCOLOR","COLOR_PROPS","defaultProps","cellSizePixels","value","min","cellMarginPixels","max","colorDomain","colorRange","getPosition","type","d","position","getWeight","gpuAggregation","aggregation","ScreenGridLayer","modules","attributeManager","getAttributeManager","gl","context","TEXTURE_FLOAT","setState","supported","error","id","addInstanced","instancePositions","size","update","calculateInstancePositions","instanceCounts","transition","accessor","calculateInstanceCounts","noAlloc","options","weights","color","operation","SUM","needMax","model","_getModel","gpuGridAggregator","changeFlags","state","somethingChanged","opts","_updateUniforms","dataChanged","_processData","_getAggregationChangeFlags","cellSizeChanged","viewportChanged","_updateGridParams","pointCount","_updateAggregation","aggregationBuffer","maxBuffer","maxTexture","uniforms","props","parameters","minColor","maxColor","cellScale","shouldUseMinMax","layerUniforms","Object","assign","draw","depthTest","depthMask","attribute","numInstances","viewport","width","height","numCol","i","x","y","Math","floor","buffer","info","mode","index","aggregationResults","getData","object","getAggregationData","pixelIndex","oldProps","getShaders","geometry","drawMode","attributes","positions","Float32Array","isInstanced","data","Float64Array","colorWeights","iterable","objectInfo","weight","Array","isArray","values","deprecated","toUpperCase","projectPoints","gridTransformMatrix","pixelProjectionMatrix","results","run","cellSize","useGPU","invalidate","newState","some","key","_shouldUseMinMax","margin","invalidateAll","ceil","numRow","dataBytes","byteLength","divisor","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, WebMercatorViewport, createIterable, log, experimental} from '@deck.gl/core';\nconst {count} = experimental;\nimport {defaultColorRange, colorRangeToFlatArray} from '../utils/color-utils';\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport {AGGREGATION_OPERATION} from '../utils/aggregation-operation-utils';\n\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry, Buffer, FEATURES, hasFeatures} from '@luma.gl/core';\n\nimport vs from './screen-grid-layer-vertex.glsl';\nimport fs from './screen-grid-layer-fragment.glsl';\n\nconst DEFAULT_MINCOLOR = [0, 0, 0, 0];\nconst DEFAULT_MAXCOLOR = [0, 255, 0, 255];\nconst COLOR_PROPS = [`minColor`, `maxColor`, `colorRange`, `colorDomain`];\n\nconst defaultProps = {\n  cellSizePixels: {value: 100, min: 1},\n  cellMarginPixels: {value: 2, min: 0, max: 5},\n\n  colorDomain: null,\n  colorRange: defaultColorRange,\n\n  getPosition: {type: 'accessor', value: d => d.position},\n  getWeight: {type: 'accessor', value: d => [1, 0, 0]},\n\n  gpuAggregation: true,\n  aggregation: 'SUM'\n};\n\nexport default class ScreenGridLayer extends Layer {\n  getShaders() {\n    return super.getShaders({vs, fs, modules: ['picking']});\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    const {gl} = this.context;\n    if (!hasFeatures(gl, [FEATURES.TEXTURE_FLOAT])) {\n      // max aggregated value is sampled from a float texture\n      this.setState({supported: false});\n      log.error(`ScreenGridLayer: ${this.id} is not supported on this browser`)();\n      return;\n    }\n\n    attributeManager.addInstanced({\n      instancePositions: {size: 3, update: this.calculateInstancePositions},\n      instanceCounts: {\n        size: 4,\n        transition: true,\n        accessor: ['getPosition', 'getWeight'],\n        update: this.calculateInstanceCounts,\n        noAlloc: true\n      }\n    });\n\n    const options = {\n      id: `${this.id}-aggregator`\n    };\n    const weights = {\n      color: {\n        size: 1,\n        operation: AGGREGATION_OPERATION.SUM,\n        needMax: true\n      }\n    };\n    this.setState({\n      supported: true,\n      model: this._getModel(gl),\n      gpuGridAggregator: new GPUGridAggregator(gl, options),\n      weights\n    });\n  }\n\n  shouldUpdateState({changeFlags}) {\n    return this.state.supported && changeFlags.somethingChanged;\n  }\n\n  updateState(opts) {\n    super.updateState(opts);\n\n    this._updateUniforms(opts);\n\n    if (opts.changeFlags.dataChanged) {\n      this._processData();\n    }\n\n    const changeFlags = this._getAggregationChangeFlags(opts);\n\n    if (changeFlags) {\n      if (changeFlags.cellSizeChanged || changeFlags.viewportChanged) {\n        this._updateGridParams();\n      }\n      const {pointCount} = this.state;\n      if (pointCount > 0) {\n        this._updateAggregation(changeFlags);\n      }\n    }\n  }\n\n  finalizeState() {\n    super.finalizeState();\n\n    const {aggregationBuffer, maxBuffer, gpuGridAggregator, maxTexture} = this.state;\n    gpuGridAggregator.delete();\n    if (aggregationBuffer) {\n      aggregationBuffer.delete();\n    }\n    if (maxBuffer) {\n      maxBuffer.delete();\n    }\n    if (maxTexture) {\n      maxTexture.delete();\n    }\n  }\n\n  draw({uniforms}) {\n    if (!this.state.supported) {\n      return;\n    }\n    const {parameters = {}} = this.props;\n    const minColor = this.props.minColor || DEFAULT_MINCOLOR;\n    const maxColor = this.props.maxColor || DEFAULT_MAXCOLOR;\n\n    // If colorDomain not specified we use default domain [1, maxCount]\n    // maxCount value will be sampled form maxTexture in vertex shader.\n    const colorDomain = this.props.colorDomain || [1, 0];\n    const {model, cellScale, shouldUseMinMax, colorRange, maxTexture} = this.state;\n    const layerUniforms = {\n      minColor,\n      maxColor,\n      maxTexture,\n      cellScale,\n      colorRange,\n      colorDomain,\n      shouldUseMinMax\n    };\n\n    uniforms = Object.assign(layerUniforms, uniforms);\n    model.draw({\n      uniforms,\n      parameters: Object.assign(\n        {\n          depthTest: false,\n          depthMask: false\n        },\n        parameters\n      )\n    });\n  }\n\n  calculateInstancePositions(attribute, {numInstances}) {\n    const {width, height} = this.context.viewport;\n    const {cellSizePixels} = this.props;\n    const {numCol} = this.state;\n    const {value, size} = attribute;\n\n    for (let i = 0; i < numInstances; i++) {\n      const x = i % numCol;\n      const y = Math.floor(i / numCol);\n      value[i * size + 0] = ((x * cellSizePixels) / width) * 2 - 1;\n      value[i * size + 1] = 1 - ((y * cellSizePixels) / height) * 2;\n      value[i * size + 2] = 0;\n    }\n  }\n\n  calculateInstanceCounts(attribute, {numInstances}) {\n    const {aggregationBuffer} = this.state;\n    attribute.update({\n      buffer: aggregationBuffer\n    });\n  }\n\n  getPickingInfo({info, mode}) {\n    const {index} = info;\n    if (index >= 0) {\n      const {gpuGridAggregator} = this.state;\n      // Get color aggregation results\n      const aggregationResults = gpuGridAggregator.getData('color');\n\n      // Each instance (one cell) is aggregated into single pixel,\n      // Get current instance's aggregation details.\n      info.object = GPUGridAggregator.getAggregationData(\n        Object.assign({pixelIndex: index}, aggregationResults)\n      );\n    }\n\n    return info;\n  }\n\n  // HELPER Methods\n\n  _getAggregationChangeFlags({oldProps, props, changeFlags}) {\n    const cellSizeChanged =\n      props.cellSizePixels !== oldProps.cellSizePixels ||\n      props.cellMarginPixels !== oldProps.cellMarginPixels;\n    const dataChanged = changeFlags.dataChanged || props.aggregation !== oldProps.aggregation;\n    const viewportChanged = changeFlags.viewportChanged;\n\n    if (cellSizeChanged || dataChanged || viewportChanged) {\n      return {cellSizeChanged, dataChanged, viewportChanged};\n    }\n\n    return null;\n  }\n\n  _getModel(gl) {\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLE_FAN,\n          attributes: {\n            positions: new Float32Array([0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0])\n          }\n        }),\n        isInstanced: true\n      })\n    );\n  }\n\n  // Process 'data' and build positions and weights Arrays.\n  _processData() {\n    const {data, getPosition, getWeight} = this.props;\n    const pointCount = count(data);\n    const positions = new Float64Array(pointCount * 2);\n    const colorWeights = new Float32Array(pointCount * 3);\n    const {weights} = this.state;\n\n    const {iterable, objectInfo} = createIterable(data);\n    for (const object of iterable) {\n      objectInfo.index++;\n      const position = getPosition(object, objectInfo);\n      const weight = getWeight(object, objectInfo);\n      const {index} = objectInfo;\n\n      positions[index * 2] = position[0];\n      positions[index * 2 + 1] = position[1];\n\n      if (Array.isArray(weight)) {\n        colorWeights[index * 3] = weight[0];\n        colorWeights[index * 3 + 1] = weight[1];\n        colorWeights[index * 3 + 2] = weight[2];\n      } else {\n        // backward compitability\n        colorWeights[index * 3] = weight;\n      }\n    }\n    weights.color.values = colorWeights;\n    this.setState({positions, pointCount});\n  }\n\n  _shouldUseMinMax() {\n    const {minColor, maxColor, colorDomain, colorRange} = this.props;\n    if (minColor || maxColor) {\n      log.deprecated('ScreenGridLayer props: minColor and maxColor', 'colorRange, colorDomain')();\n      return true;\n    }\n    // minColor and maxColor not supplied, check if colorRange or colorDomain supplied.\n    // NOTE: colorDomain and colorRange are experimental features, use them only when supplied.\n    if (colorDomain || colorRange) {\n      return false;\n    }\n    // None specified, use default minColor and maxColor\n    return true;\n  }\n\n  _updateAggregation(changeFlags) {\n    const attributeManager = this.getAttributeManager();\n    const {cellSizePixels, gpuAggregation} = this.props;\n\n    const {positions, weights} = this.state;\n    const {viewport} = this.context;\n\n    weights.color.operation =\n      AGGREGATION_OPERATION[this.props.aggregation.toUpperCase()] || AGGREGATION_OPERATION.SUM;\n\n    let projectPoints = false;\n    let gridTransformMatrix = null;\n\n    if (this.context.viewport instanceof WebMercatorViewport) {\n      // project points from world space (lng/lat) to viewport (screen) space.\n      projectPoints = true;\n    } else {\n      projectPoints = false;\n      // Use pixelProjectionMatrix to transform points to viewport (screen) space.\n      gridTransformMatrix = viewport.pixelProjectionMatrix;\n    }\n    const results = this.state.gpuGridAggregator.run({\n      positions,\n      weights,\n      cellSize: [cellSizePixels, cellSizePixels],\n      viewport,\n      changeFlags,\n      useGPU: gpuAggregation,\n      projectPoints,\n      gridTransformMatrix\n    });\n\n    attributeManager.invalidate('instanceCounts');\n    this.setState({maxTexture: results.color.maxTexture});\n  }\n\n  _updateUniforms({oldProps, props, changeFlags}) {\n    const newState = {};\n    if (COLOR_PROPS.some(key => oldProps[key] !== props[key])) {\n      newState.shouldUseMinMax = this._shouldUseMinMax();\n    }\n\n    if (oldProps.colorRange !== props.colorRange) {\n      newState.colorRange = colorRangeToFlatArray(props.colorRange);\n    }\n\n    if (\n      oldProps.cellMarginPixels !== props.cellMarginPixels ||\n      oldProps.cellSizePixels !== props.cellSizePixels ||\n      changeFlags.viewportChanged\n    ) {\n      const {width, height} = this.context.viewport;\n      const {cellSizePixels, cellMarginPixels} = this.props;\n      const margin = cellSizePixels > cellMarginPixels ? cellMarginPixels : 0;\n\n      newState.cellScale = new Float32Array([\n        ((cellSizePixels - margin) / width) * 2,\n        (-(cellSizePixels - margin) / height) * 2,\n        1\n      ]);\n    }\n    this.setState(newState);\n  }\n\n  _updateGridParams() {\n    const attributeManager = this.getAttributeManager();\n    attributeManager.invalidateAll();\n    const {width, height} = this.context.viewport;\n    const {cellSizePixels} = this.props;\n    const {gl} = this.context;\n\n    const numCol = Math.ceil(width / cellSizePixels);\n    const numRow = Math.ceil(height / cellSizePixels);\n    const numInstances = numCol * numRow;\n    const dataBytes = numInstances * 4 * 4;\n    let aggregationBuffer = this.state.aggregationBuffer;\n    if (aggregationBuffer) {\n      aggregationBuffer.delete();\n    }\n\n    aggregationBuffer = new Buffer(gl, {\n      byteLength: dataBytes,\n      accessor: {\n        size: 4,\n        type: GL.FLOAT,\n        divisor: 1\n      }\n    });\n    this.state.weights.color.aggregationBuffer = aggregationBuffer;\n    this.setState({\n      numCol,\n      numRow,\n      numInstances,\n      aggregationBuffer\n    });\n  }\n}\n\nScreenGridLayer.layerName = 'ScreenGridLayer';\nScreenGridLayer.defaultProps = defaultProps;\n"],"file":"screen-grid-layer.js"}