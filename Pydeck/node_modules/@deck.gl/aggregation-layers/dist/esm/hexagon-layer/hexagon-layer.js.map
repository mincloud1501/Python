{"version":3,"sources":["../../../src/hexagon-layer/hexagon-layer.js"],"names":["PhongMaterial","CompositeLayer","log","ColumnLayer","defaultColorRange","pointToHexbin","CPUAggregator","nop","defaultMaterial","defaultProps","colorDomain","colorRange","getColorValue","type","value","getColorWeight","x","colorAggregation","lowerPercentile","min","max","upperPercentile","colorScaleType","onSetColorDomain","elevationDomain","elevationRange","getElevationValue","getElevationWeight","elevationAggregation","elevationLowerPercentile","elevationUpperPercentile","elevationScale","elevationScaleType","onSetElevationDomain","radius","coverage","extruded","hexagonAggregator","getPosition","position","material","HexagonLayer","cpuAggregator","getAggregator","props","getCellSize","state","aggregatorState","oldProps","changeFlags","oldLayerData","layerData","setState","updateState","context","viewport","hexagonVertices","updateRadiusAngle","vertices","angle","Array","isArray","length","error","vertex0","vertex3","getDistanceScales","pixelsPerMeter","spaceCoord0","projectFlat","spaceCoord3","dx","dy","dxy","Math","sqrt","acos","sign","PI","info","getPickingInfo","cell","getAccessor","getUpdateTriggers","transitions","SubLayerClass","getSubLayerClass","updateTriggers","_getSublayerUpdateTriggers","diskResolution","getFillColor","_onGetSublayerColor","bind","getElevation","_onGetSublayerElevation","getSubLayerProps","id","data","layerName"],"mappings":";;;;;AAoBA,SAAQA,aAAR,QAA4B,eAA5B;AACA,SAAQC,cAAR,EAAwBC,GAAxB,QAAkC,eAAlC;AACA,SAAQC,WAAR,QAA0B,iBAA1B;AAEA,SAAQC,iBAAR,QAAgC,sBAAhC;AAEA,SAAQC,aAAR,QAA4B,sBAA5B;AACA,OAAOC,aAAP,MAA0B,yBAA1B;;AAEA,SAASC,GAAT,GAAe,CAAE;;AAEjB,IAAMC,eAAe,GAAG,IAAIR,aAAJ,EAAxB;AAEA,IAAMS,YAAY,GAAG;AAEnBC,EAAAA,WAAW,EAAE,IAFM;AAGnBC,EAAAA,UAAU,EAAEP,iBAHO;AAInBQ,EAAAA,aAAa,EAAE;AAACC,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAE;AAA1B,GAJI;AAKnBC,EAAAA,cAAc,EAAE;AAACF,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAE,eAAAE,CAAC;AAAA,aAAI,CAAJ;AAAA;AAA3B,GALG;AAMnBC,EAAAA,gBAAgB,EAAE,KANC;AAOnBC,EAAAA,eAAe,EAAE;AAACL,IAAAA,IAAI,EAAE,QAAP;AAAiBC,IAAAA,KAAK,EAAE,CAAxB;AAA2BK,IAAAA,GAAG,EAAE,CAAhC;AAAmCC,IAAAA,GAAG,EAAE;AAAxC,GAPE;AAQnBC,EAAAA,eAAe,EAAE;AAACR,IAAAA,IAAI,EAAE,QAAP;AAAiBC,IAAAA,KAAK,EAAE,GAAxB;AAA6BK,IAAAA,GAAG,EAAE,CAAlC;AAAqCC,IAAAA,GAAG,EAAE;AAA1C,GARE;AASnBE,EAAAA,cAAc,EAAE,UATG;AAUnBC,EAAAA,gBAAgB,EAAEhB,GAVC;AAanBiB,EAAAA,eAAe,EAAE,IAbE;AAcnBC,EAAAA,cAAc,EAAE,CAAC,CAAD,EAAI,IAAJ,CAdG;AAenBC,EAAAA,iBAAiB,EAAE;AAACb,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAE;AAA1B,GAfA;AAgBnBa,EAAAA,kBAAkB,EAAE;AAACd,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAE,eAAAE,CAAC;AAAA,aAAI,CAAJ;AAAA;AAA3B,GAhBD;AAiBnBY,EAAAA,oBAAoB,EAAE,KAjBH;AAkBnBC,EAAAA,wBAAwB,EAAE;AAAChB,IAAAA,IAAI,EAAE,QAAP;AAAiBC,IAAAA,KAAK,EAAE,CAAxB;AAA2BK,IAAAA,GAAG,EAAE,CAAhC;AAAmCC,IAAAA,GAAG,EAAE;AAAxC,GAlBP;AAmBnBU,EAAAA,wBAAwB,EAAE;AAACjB,IAAAA,IAAI,EAAE,QAAP;AAAiBC,IAAAA,KAAK,EAAE,GAAxB;AAA6BK,IAAAA,GAAG,EAAE,CAAlC;AAAqCC,IAAAA,GAAG,EAAE;AAA1C,GAnBP;AAoBnBW,EAAAA,cAAc,EAAE;AAAClB,IAAAA,IAAI,EAAE,QAAP;AAAiBM,IAAAA,GAAG,EAAE,CAAtB;AAAyBL,IAAAA,KAAK,EAAE;AAAhC,GApBG;AAqBnBkB,EAAAA,kBAAkB,EAAE,QArBD;AAsBnBC,EAAAA,oBAAoB,EAAE1B,GAtBH;AAwBnB2B,EAAAA,MAAM,EAAE;AAACrB,IAAAA,IAAI,EAAE,QAAP;AAAiBC,IAAAA,KAAK,EAAE,IAAxB;AAA8BK,IAAAA,GAAG,EAAE;AAAnC,GAxBW;AAyBnBgB,EAAAA,QAAQ,EAAE;AAACtB,IAAAA,IAAI,EAAE,QAAP;AAAiBM,IAAAA,GAAG,EAAE,CAAtB;AAAyBC,IAAAA,GAAG,EAAE,CAA9B;AAAiCN,IAAAA,KAAK,EAAE;AAAxC,GAzBS;AA0BnBsB,EAAAA,QAAQ,EAAE,KA1BS;AA2BnBC,EAAAA,iBAAiB,EAAEhC,aA3BA;AA4BnBiC,EAAAA,WAAW,EAAE;AAACzB,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAE,eAAAE,CAAC;AAAA,aAAIA,CAAC,CAACuB,QAAN;AAAA;AAA3B,GA5BM;AA8BnBC,EAAAA,QAAQ,EAAEhC;AA9BS,CAArB;;IAiCqBiC,Y;;;;;;;;;;;sCACD;AAChB,UAAMC,aAAa,GAAG,IAAIpC,aAAJ,CAAkB;AACtCqC,QAAAA,aAAa,EAAE,uBAAAC,KAAK;AAAA,iBAAIA,KAAK,CAACP,iBAAV;AAAA,SADkB;AAEtCQ,QAAAA,WAAW,EAAE,qBAAAD,KAAK;AAAA,iBAAIA,KAAK,CAACV,MAAV;AAAA;AAFoB,OAAlB,CAAtB;AAKA,WAAKY,KAAL,GAAa;AACXJ,QAAAA,aAAa,EAAbA,aADW;AAEXK,QAAAA,eAAe,EAAEL,aAAa,CAACI;AAFpB,OAAb;AAID;;;sCAE2C;AAAA,UAA/BE,QAA+B,QAA/BA,QAA+B;AAAA,UAArBJ,KAAqB,QAArBA,KAAqB;AAAA,UAAdK,WAAc,QAAdA,WAAc;AAAA,UACnCP,aADmC,GAClB,KAAKI,KADa,CACnCJ,aADmC;AAE1C,UAAMQ,YAAY,GAAGR,aAAa,CAACI,KAAd,CAAoBK,SAAzC;AACA,WAAKC,QAAL,CAAc;AAEZL,QAAAA,eAAe,EAAEL,aAAa,CAACW,WAAd,CACf;AAACL,UAAAA,QAAQ,EAARA,QAAD;AAAWJ,UAAAA,KAAK,EAALA,KAAX;AAAkBK,UAAAA,WAAW,EAAXA;AAAlB,SADe,EAEf,KAAKK,OAAL,CAAaC,QAFE;AAFL,OAAd;;AAQA,UAAIL,YAAY,KAAKR,aAAa,CAACI,KAAd,CAAoBK,SAAzC,EAAoD;AAAA,YAC3CK,eAD2C,GACxBd,aAAa,CAACI,KAAd,CAAoBK,SADI,CAC3CK,eAD2C;AAElD,aAAKC,iBAAL,CAAuBD,eAAvB;AACD;AACF;;;sCAEiBE,Q,EAAU;AAAA,UACrBxB,MADqB,GACX,KAAKU,KADM,CACrBV,MADqB;AAE1B,UAAIyB,KAAK,GAAG,EAAZ;;AAEA,UAAIC,KAAK,CAACC,OAAN,CAAcH,QAAd,CAAJ,EAA6B;AAC3B,YAAIA,QAAQ,CAACI,MAAT,GAAkB,CAAtB,EAAyB;AACvB5D,UAAAA,GAAG,CAAC6D,KAAJ,CAAU,oEAAV;AACD;;AAGD,YAAMC,OAAO,GAAGN,QAAQ,CAAC,CAAD,CAAxB;AACA,YAAMO,OAAO,GAAGP,QAAQ,CAAC,CAAD,CAAxB;AAP2B,YAUpBH,QAVoB,GAUR,KAAKD,OAVG,CAUpBC,QAVoB;;AAAA,oCAWFA,QAAQ,CAACW,iBAAT,EAXE;AAAA,YAWpBC,cAXoB,yBAWpBA,cAXoB;;AAY3B,YAAMC,WAAW,GAAG,KAAKC,WAAL,CAAiBL,OAAjB,CAApB;AACA,YAAMM,WAAW,GAAG,KAAKD,WAAL,CAAiBJ,OAAjB,CAApB;AAGA,YAAMM,EAAE,GAAGH,WAAW,CAAC,CAAD,CAAX,GAAiBE,WAAW,CAAC,CAAD,CAAvC;AACA,YAAME,EAAE,GAAGJ,WAAW,CAAC,CAAD,CAAX,GAAiBE,WAAW,CAAC,CAAD,CAAvC;AACA,YAAMG,GAAG,GAAGC,IAAI,CAACC,IAAL,CAAUJ,EAAE,GAAGA,EAAL,GAAUC,EAAE,GAAGA,EAAzB,CAAZ;AAGAb,QAAAA,KAAK,GAAKe,IAAI,CAACE,IAAL,CAAUL,EAAE,GAAGE,GAAf,IAAsB,CAACC,IAAI,CAACG,IAAL,CAAUL,EAAV,CAAxB,GAAyCE,IAAI,CAACI,EAA/C,GAAqD,GAArD,GAA2D,EAAnE;AACA5C,QAAAA,MAAM,GAAGuC,GAAG,GAAG,CAAN,GAAUN,cAAc,CAAC,CAAD,CAAjC;AACD;;AAED,WAAKf,QAAL,CAAc;AAACO,QAAAA,KAAK,EAALA,KAAD;AAAQzB,QAAAA,MAAM,EAANA;AAAR,OAAd;AACD;;;0CAEsB;AAAA,UAAP6C,IAAO,SAAPA,IAAO;AACrB,aAAO,KAAKjC,KAAL,CAAWJ,aAAX,CAAyBsC,cAAzB,CAAwC;AAACD,QAAAA,IAAI,EAAJA;AAAD,OAAxC,CAAP;AACD;;;wCAGmBE,I,EAAM;AACxB,aAAO,KAAKnC,KAAL,CAAWJ,aAAX,CAAyBwC,WAAzB,CAAqC,WAArC,EAAkDD,IAAlD,CAAP;AACD;;;4CAGuBA,I,EAAM;AAC5B,aAAO,KAAKnC,KAAL,CAAWJ,aAAX,CAAyBwC,WAAzB,CAAqC,WAArC,EAAkDD,IAAlD,CAAP;AACD;;;iDAE4B;AAC3B,aAAO,KAAKnC,KAAL,CAAWJ,aAAX,CAAyByC,iBAAzB,CAA2C,KAAKvC,KAAhD,CAAP;AACD;;;mCAEc;AAAA,wBACuD,KAAKA,KAD5D;AAAA,UACNb,cADM,eACNA,cADM;AAAA,UACUK,QADV,eACUA,QADV;AAAA,UACoBD,QADpB,eACoBA,QADpB;AAAA,UAC8BK,QAD9B,eAC8BA,QAD9B;AAAA,UACwC4C,WADxC,eACwCA,WADxC;AAAA,wBAE0B,KAAKtC,KAF/B;AAAA,UAENa,KAFM,eAENA,KAFM;AAAA,UAECzB,MAFD,eAECA,MAFD;AAAA,UAESQ,aAFT,eAESA,aAFT;AAIb,UAAM2C,aAAa,GAAG,KAAKC,gBAAL,CAAsB,cAAtB,EAAsCnF,WAAtC,CAAtB;;AACA,UAAMoF,cAAc,GAAG,KAAKC,0BAAL,EAAvB;;AAEA,aAAO,IAAIH,aAAJ,CACL;AACEnD,QAAAA,MAAM,EAANA,MADF;AAEEuD,QAAAA,cAAc,EAAE,CAFlB;AAGE1D,QAAAA,cAAc,EAAdA,cAHF;AAIE4B,QAAAA,KAAK,EAALA,KAJF;AAKEvB,QAAAA,QAAQ,EAARA,QALF;AAMED,QAAAA,QAAQ,EAARA,QANF;AAOEK,QAAAA,QAAQ,EAARA,QAPF;AASEkD,QAAAA,YAAY,EAAE,KAAKC,mBAAL,CAAyBC,IAAzB,CAA8B,IAA9B,CAThB;AAUEC,QAAAA,YAAY,EAAE,KAAKC,uBAAL,CAA6BF,IAA7B,CAAkC,IAAlC,CAVhB;AAWER,QAAAA,WAAW,EAAEA,WAAW,IAAI;AAC1BM,UAAAA,YAAY,EAAEN,WAAW,CAACxE,aAAZ,IAA6BwE,WAAW,CAACrE,cAD7B;AAE1B8E,UAAAA,YAAY,EAAET,WAAW,CAAC1D,iBAAZ,IAAiC0D,WAAW,CAACzD;AAFjC;AAX9B,OADK,EAiBL,KAAKoE,gBAAL,CAAsB;AACpBC,QAAAA,EAAE,EAAE,cADgB;AAEpBT,QAAAA,cAAc,EAAdA;AAFoB,OAAtB,CAjBK,EAqBL;AACEU,QAAAA,IAAI,EAAEvD,aAAa,CAACI,KAAd,CAAoBK,SAApB,CAA8B8C;AADtC,OArBK,CAAP;AAyBD;;;;EAhHuChG,c;;SAArBwC,Y;AAmHrBA,YAAY,CAACyD,SAAb,GAAyB,cAAzB;AACAzD,YAAY,CAAChC,YAAb,GAA4BA,YAA5B","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {PhongMaterial} from '@luma.gl/core';\nimport {CompositeLayer, log} from '@deck.gl/core';\nimport {ColumnLayer} from '@deck.gl/layers';\n\nimport {defaultColorRange} from '../utils/color-utils';\n\nimport {pointToHexbin} from './hexagon-aggregator';\nimport CPUAggregator from '../utils/cpu-aggregator';\n\nfunction nop() {}\n\nconst defaultMaterial = new PhongMaterial();\n\nconst defaultProps = {\n  // color\n  colorDomain: null,\n  colorRange: defaultColorRange,\n  getColorValue: {type: 'accessor', value: null}, // default value is calcuated from `getColorWeight` and `colorAggregation`\n  getColorWeight: {type: 'accessor', value: x => 1},\n  colorAggregation: 'SUM',\n  lowerPercentile: {type: 'number', value: 0, min: 0, max: 100},\n  upperPercentile: {type: 'number', value: 100, min: 0, max: 100},\n  colorScaleType: 'quantize',\n  onSetColorDomain: nop,\n\n  // elevation\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  getElevationValue: {type: 'accessor', value: null}, // default value is calcuated from `getElevationWeight` and `elevationAggregation`\n  getElevationWeight: {type: 'accessor', value: x => 1},\n  elevationAggregation: 'SUM',\n  elevationLowerPercentile: {type: 'number', value: 0, min: 0, max: 100},\n  elevationUpperPercentile: {type: 'number', value: 100, min: 0, max: 100},\n  elevationScale: {type: 'number', min: 0, value: 1},\n  elevationScaleType: 'linear',\n  onSetElevationDomain: nop,\n\n  radius: {type: 'number', value: 1000, min: 1},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  extruded: false,\n  hexagonAggregator: pointToHexbin,\n  getPosition: {type: 'accessor', value: x => x.position},\n  // Optional material for 'lighting' shader module\n  material: defaultMaterial\n};\n\nexport default class HexagonLayer extends CompositeLayer {\n  initializeState() {\n    const cpuAggregator = new CPUAggregator({\n      getAggregator: props => props.hexagonAggregator,\n      getCellSize: props => props.radius\n    });\n\n    this.state = {\n      cpuAggregator,\n      aggregatorState: cpuAggregator.state\n    };\n  }\n\n  updateState({oldProps, props, changeFlags}) {\n    const {cpuAggregator} = this.state;\n    const oldLayerData = cpuAggregator.state.layerData;\n    this.setState({\n      // make a copy of the internal state of cpuAggregator for testing\n      aggregatorState: cpuAggregator.updateState(\n        {oldProps, props, changeFlags},\n        this.context.viewport\n      )\n    });\n\n    if (oldLayerData !== cpuAggregator.state.layerData) {\n      const {hexagonVertices} = cpuAggregator.state.layerData;\n      this.updateRadiusAngle(hexagonVertices);\n    }\n  }\n\n  updateRadiusAngle(vertices) {\n    let {radius} = this.props;\n    let angle = 90;\n\n    if (Array.isArray(vertices)) {\n      if (vertices.length < 6) {\n        log.error('HexagonCellLayer: hexagonVertices needs to be an array of 6 points')();\n      }\n\n      // calculate angle and vertices from hexagonVertices if provided\n      const vertex0 = vertices[0];\n      const vertex3 = vertices[3];\n\n      // transform to space coordinates\n      const {viewport} = this.context;\n      const {pixelsPerMeter} = viewport.getDistanceScales();\n      const spaceCoord0 = this.projectFlat(vertex0);\n      const spaceCoord3 = this.projectFlat(vertex3);\n\n      // distance between two close centroids\n      const dx = spaceCoord0[0] - spaceCoord3[0];\n      const dy = spaceCoord0[1] - spaceCoord3[1];\n      const dxy = Math.sqrt(dx * dx + dy * dy);\n\n      // Calculate angle that the perpendicular hexagon vertex axis is tilted\n      angle = ((Math.acos(dx / dxy) * -Math.sign(dy)) / Math.PI) * 180 + 90;\n      radius = dxy / 2 / pixelsPerMeter[0];\n    }\n\n    this.setState({angle, radius});\n  }\n\n  getPickingInfo({info}) {\n    return this.state.cpuAggregator.getPickingInfo({info});\n  }\n\n  // create a method for testing\n  _onGetSublayerColor(cell) {\n    return this.state.cpuAggregator.getAccessor('fillColor')(cell);\n  }\n\n  // create a method for testing\n  _onGetSublayerElevation(cell) {\n    return this.state.cpuAggregator.getAccessor('elevation')(cell);\n  }\n\n  _getSublayerUpdateTriggers() {\n    return this.state.cpuAggregator.getUpdateTriggers(this.props);\n  }\n\n  renderLayers() {\n    const {elevationScale, extruded, coverage, material, transitions} = this.props;\n    const {angle, radius, cpuAggregator} = this.state;\n\n    const SubLayerClass = this.getSubLayerClass('hexagon-cell', ColumnLayer);\n    const updateTriggers = this._getSublayerUpdateTriggers();\n\n    return new SubLayerClass(\n      {\n        radius,\n        diskResolution: 6,\n        elevationScale,\n        angle,\n        extruded,\n        coverage,\n        material,\n\n        getFillColor: this._onGetSublayerColor.bind(this),\n        getElevation: this._onGetSublayerElevation.bind(this),\n        transitions: transitions && {\n          getFillColor: transitions.getColorValue || transitions.getColorWeight,\n          getElevation: transitions.getElevationValue || transitions.getElevationWeight\n        }\n      },\n      this.getSubLayerProps({\n        id: 'hexagon-cell',\n        updateTriggers\n      }),\n      {\n        data: cpuAggregator.state.layerData.data\n      }\n    );\n  }\n}\n\nHexagonLayer.layerName = 'HexagonLayer';\nHexagonLayer.defaultProps = defaultProps;\n"],"file":"hexagon-layer.js"}