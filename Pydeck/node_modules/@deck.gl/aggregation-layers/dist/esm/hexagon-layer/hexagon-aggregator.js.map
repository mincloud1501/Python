{"version":3,"sources":["../../../src/hexagon-layer/hexagon-aggregator.js"],"names":["hexbin","createIterable","log","pointToHexbin","viewport","data","radius","getPosition","radiusInPixel","getRadiusInPixel","screenPoints","iterable","objectInfo","object","index","position","arrayIsFinite","Number","isFinite","push","Object","assign","screenCoord","projectFlat","warn","newHexbin","x","d","y","hexagonBins","hexagons","map","hex","unprojectFlat","points","getDistanceScales","pixelsPerMeter"],"mappings":"AAoBA,SAAQA,MAAR,QAAqB,WAArB;AACA,SAAQC,cAAR,EAAwBC,GAAxB,QAAkC,eAAlC;AAWA,OAAO,SAASC,aAAT,OAAoDC,QAApD,EAA8D;AAAA,MAAtCC,IAAsC,QAAtCA,IAAsC;AAAA,MAAhCC,MAAgC,QAAhCA,MAAgC;AAAA,MAAxBC,WAAwB,QAAxBA,WAAwB;AAEnE,MAAMC,aAAa,GAAGC,gBAAgB,CAACH,MAAD,EAASF,QAAT,CAAtC;AAGA,MAAMM,YAAY,GAAG,EAArB;;AALmE,wBAMpCT,cAAc,CAACI,IAAD,CANsB;AAAA,MAM5DM,QAN4D,mBAM5DA,QAN4D;AAAA,MAMlDC,UANkD,mBAMlDA,UANkD;;AAAA;AAAA;AAAA;;AAAA;AAOnE,yBAAqBD,QAArB,8HAA+B;AAAA,UAApBE,MAAoB;AAC7BD,MAAAA,UAAU,CAACE,KAAX;AACA,UAAMC,QAAQ,GAAGR,WAAW,CAACM,MAAD,EAASD,UAAT,CAA5B;AACA,UAAMI,aAAa,GAAGC,MAAM,CAACC,QAAP,CAAgBH,QAAQ,CAAC,CAAD,CAAxB,KAAgCE,MAAM,CAACC,QAAP,CAAgBH,QAAQ,CAAC,CAAD,CAAxB,CAAtD;;AACA,UAAIC,aAAJ,EAAmB;AACjBN,QAAAA,YAAY,CAACS,IAAb,CACEC,MAAM,CAACC,MAAP,CACE;AACEC,UAAAA,WAAW,EAAElB,QAAQ,CAACmB,WAAT,CAAqBR,QAArB;AADf,SADF,EAIEF,MAJF,CADF;AAQD,OATD,MASO;AACLX,QAAAA,GAAG,CAACsB,IAAJ,CAAS,gCAAT;AACD;AACF;AAvBkE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAyBnE,MAAMC,SAAS,GAAGzB,MAAM,GACrBM,MADe,CACRE,aADQ,EAEfkB,CAFe,CAEb,UAAAC,CAAC;AAAA,WAAIA,CAAC,CAACL,WAAF,CAAc,CAAd,CAAJ;AAAA,GAFY,EAGfM,CAHe,CAGb,UAAAD,CAAC;AAAA,WAAIA,CAAC,CAACL,WAAF,CAAc,CAAd,CAAJ;AAAA,GAHY,CAAlB;AAKA,MAAMO,WAAW,GAAGJ,SAAS,CAACf,YAAD,CAA7B;AAEA,SAAO;AACLoB,IAAAA,QAAQ,EAAED,WAAW,CAACE,GAAZ,CAAgB,UAACC,GAAD,EAAMlB,KAAN;AAAA,aAAiB;AACzCC,QAAAA,QAAQ,EAAEX,QAAQ,CAAC6B,aAAT,CAAuB,CAACD,GAAG,CAACN,CAAL,EAAQM,GAAG,CAACJ,CAAZ,CAAvB,CAD+B;AAEzCM,QAAAA,MAAM,EAAEF,GAFiC;AAGzClB,QAAAA,KAAK,EAALA;AAHyC,OAAjB;AAAA,KAAhB;AADL,GAAP;AAOD;AASD,OAAO,SAASL,gBAAT,CAA0BH,MAA1B,EAAkCF,QAAlC,EAA4C;AAAA,8BACxBA,QAAQ,CAAC+B,iBAAT,EADwB;AAAA,MAC1CC,cAD0C,yBAC1CA,cAD0C;;AAIjD,SAAO9B,MAAM,GAAG8B,cAAc,CAAC,CAAD,CAA9B;AACD","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {hexbin} from 'd3-hexbin';\nimport {createIterable, log} from '@deck.gl/core';\n\n/**\n * Use d3-hexbin to performs hexagonal binning from geo points to hexagons\n * @param {Iterable} data - array of points\n * @param {Number} radius - hexagon radius in meter\n * @param {function} getPosition - get points lon lat\n * @param {Object} viewport - current viewport object\n\n * @return {Object} - hexagons and countRange\n */\nexport function pointToHexbin({data, radius, getPosition}, viewport) {\n  // get hexagon radius in mercator world unit\n  const radiusInPixel = getRadiusInPixel(radius, viewport);\n\n  // add world space coordinates to points\n  const screenPoints = [];\n  const {iterable, objectInfo} = createIterable(data);\n  for (const object of iterable) {\n    objectInfo.index++;\n    const position = getPosition(object, objectInfo);\n    const arrayIsFinite = Number.isFinite(position[0]) && Number.isFinite(position[1]);\n    if (arrayIsFinite) {\n      screenPoints.push(\n        Object.assign(\n          {\n            screenCoord: viewport.projectFlat(position)\n          },\n          object\n        )\n      );\n    } else {\n      log.warn('HexagonLayer: invalid position')();\n    }\n  }\n\n  const newHexbin = hexbin()\n    .radius(radiusInPixel)\n    .x(d => d.screenCoord[0])\n    .y(d => d.screenCoord[1]);\n\n  const hexagonBins = newHexbin(screenPoints);\n\n  return {\n    hexagons: hexagonBins.map((hex, index) => ({\n      position: viewport.unprojectFlat([hex.x, hex.y]),\n      points: hex,\n      index\n    }))\n  };\n}\n\n/**\n * Get radius in mercator world space coordinates from meter\n * @param {Number} radius - in meter\n * @param {Object} viewport - current viewport object\n\n * @return {Number} radius in mercator world spcae coordinates\n */\nexport function getRadiusInPixel(radius, viewport) {\n  const {pixelsPerMeter} = viewport.getDistanceScales();\n\n  // x, y distance should be the same\n  return radius * pixelsPerMeter[0];\n}\n"],"file":"hexagon-aggregator.js"}