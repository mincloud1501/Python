{"version":3,"sources":["../../../src/utils/scale-utils.js"],"names":["log","linearScale","domain","range","value","quantizeScale","domainRange","warn","step","length","idx","Math","floor","clampIdx","max","min","getScale","scaleFunction","scale","getQuantizeScale","getLinearScale","ascending","a","b","threshold","fraction","domainLength","domainFraction","lowIndex","low","high","bisectRight","x","lo","hi","mid","quantileScale","thresholds","getQuantileScale","sortedDomain","sort","i","n","Array","ordinalScale","domainMap","key","d","get","undefined","push","set","getOrdinalScale","Map","uniqueDomain","has"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {log} from '@deck.gl/core';\n\n// Linear scale maps continuous domain to continuous range\nexport function linearScale(domain, range, value) {\n  return ((value - domain[0]) / (domain[1] - domain[0])) * (range[1] - range[0]) + range[0];\n}\n\n// Quantize scale is similar to linear scales,\n// except it uses a discrete rather than continuous range\nexport function quantizeScale(domain, range, value) {\n  const domainRange = domain[1] - domain[0];\n  if (domainRange <= 0) {\n    log.warn('quantizeScale: invalid domain, returning range[0]')();\n    return range[0];\n  }\n  const step = domainRange / range.length;\n  const idx = Math.floor((value - domain[0]) / step);\n  const clampIdx = Math.max(Math.min(idx, range.length - 1), 0);\n\n  return range[clampIdx];\n}\n\nexport function getScale(domain, range, scaleFunction) {\n  function scale(value) {\n    return scaleFunction(domain, range, value);\n  }\n\n  scale.domain = () => domain;\n  scale.range = () => range;\n\n  return scale;\n}\n\n// return a quantize scale function\nexport function getQuantizeScale(domain, range) {\n  return getScale(domain, range, quantizeScale);\n}\n\n// return a linear scale function\nexport function getLinearScale(domain, range) {\n  return getScale(domain, range, linearScale);\n}\n\n// quantile\n\nfunction ascending(a, b) {\n  return a - b;\n}\n\nfunction threshold(domain, fraction) {\n  const domainLength = domain.length;\n  if (fraction <= 0 || domainLength < 2) {\n    return domain[0];\n  }\n  if (fraction >= 1) {\n    return domain[domainLength - 1];\n  }\n\n  const domainFraction = (domainLength - 1) * fraction;\n  const lowIndex = Math.floor(domainFraction);\n  const low = domain[lowIndex];\n  const high = domain[lowIndex + 1];\n  return low + (high - low) * (domainFraction - lowIndex);\n}\n\nfunction bisectRight(a, x) {\n  let lo = 0;\n  let hi = a.length;\n  while (lo < hi) {\n    const mid = (lo + hi) >>> 1;\n    if (ascending(a[mid], x) > 0) {\n      hi = mid;\n    } else {\n      lo = mid + 1;\n    }\n  }\n  return lo;\n}\n\n// return a quantize scale function\nfunction quantileScale(thresholds, range, value) {\n  return range[bisectRight(thresholds, value)];\n}\n\nexport function getQuantileScale(domain, range) {\n  const sortedDomain = domain.sort(ascending);\n  let i = 0;\n  const n = Math.max(1, range.length);\n  const thresholds = new Array(n - 1);\n  while (++i < n) {\n    thresholds[i - 1] = threshold(sortedDomain, i / n);\n  }\n  return value => quantileScale(thresholds, range, value);\n}\n\n// ordinal\nfunction ordinalScale(domain, domainMap, range, value) {\n  const key = `${value}`;\n  let d = domainMap.get(key);\n  if (d === undefined) {\n    // update the domain\n    d = domain.push(value);\n    domainMap.set(key, d);\n  }\n  return range[(d - 1) % range.length];\n}\n\nexport function getOrdinalScale(domain, range) {\n  const domainMap = new Map();\n  const uniqueDomain = [];\n  for (const d of domain) {\n    const key = `${d}`;\n    if (!domainMap.has(key)) {\n      domainMap.set(key, uniqueDomain.push(d));\n    }\n  }\n  return value => ordinalScale(uniqueDomain, domainMap, range, value);\n}\n"],"file":"scale-utils.js"}