{"version":3,"sources":["../../../src/heatmap-layer/heatmap-layer.js"],"names":["getBounds","boundsContain","packVertices","scaleToAspectRatio","getTextureCoordinates","getTextureParams","Buffer","Texture2D","Transform","getParameter","FEATURES","hasFeatures","isWebGL2","CompositeLayer","AttributeManager","COORDINATE_SYSTEM","log","TriangleLayer","defaultColorRange","colorRangeToFlatArray","weights_vs","weights_fs","vs_max","RESOLUTION","SIZE_2K","ZOOM_DEBOUNCE","TEXTURE_OPTIONS","mipmaps","parameters","dataFormat","DEFAULT_COLOR_DOMAIN","defaultProps","getPosition","type","value","x","position","getWeight","intensity","min","radiusPixels","max","colorRange","threshold","colorDomain","optional","REQUIRED_FEATURES","BLEND_EQUATION_MINMAX","TEXTURE_FLOAT","HeatmapLayer","gl","context","setState","supported","error","id","_setupTextureParams","_setupAttributes","_setupResources","changeFlags","somethingChanged","opts","state","props","oldProps","_getChangeFlags","viewportChanged","boundsChanged","_updateBounds","dataChanged","uniformsChanged","_updateWeightmap","viewportZoomChanged","_debouncedUpdateWeightmap","_updateColorTexture","_updateTextureRenderingBounds","viewport","weightsScale","domainScale","scale","map","Math","zoom","weightsTexture","triPositionBuffer","triTexCoordBuffer","maxWeightsTexture","colorTexture","updateTriggers","getSubLayerProps","data","attributes","positions","texCoords","vertexCount","maxTexture","texture","weightsTransform","maxWeightTransform","stats","_isDataChanged","textureSize","format","width","height","updateTriggersChanged","all","attributeManager","getAttributeManager","add","size","accessor","weights","floatTargetSupport","COLOR_ATTACHMENT_RGBA32F","warn","_getTextures","vs","_fs","modules","elementCount","_targetTexture","_targetTextureVarying","_sourceTextures","inTexture","model","byteLength","run","blend","depthTest","blendFunc","blendEquation","forceUpdate","viewportCorners","unproject","visibleWorldBounds","visibleCommonBounds","_worldToCommonBounds","newState","worldBounds","scaledCommonBounds","_commonToWorldBounds","coordinateSystem","LNGLAT","normalizedCommonBounds","scaleToAspect","normalize","commonBounds","subData","textureBounds","p","projectPosition","colors","setImageData","length","_updateAttributes","moduleParameters","Object","assign","create","pickingActive","useLayerCoordinateSystem","uniforms","getModuleUniforms","textureWidth","update","getNumInstances","clearRenderTarget","_updateMaxWeightValue","setParameters","lastUpdate","Date","now","fromTimer","updateTimer","timeSinceLastUpdate","setTimeout","bind","minLong","minLat","maxLong","maxLat","topLeftCommon","bottomRightCommon","slice","concat","xMin","yMin","xMax","yMax","topLeftWorld","unprojectPosition","bottomRightWorld","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* global setTimeout */\nimport GL from '@luma.gl/constants';\nimport {\n  getBounds,\n  boundsContain,\n  packVertices,\n  scaleToAspectRatio,\n  getTextureCoordinates,\n  getTextureParams\n} from './heatmap-layer-utils';\nimport {\n  Buffer,\n  Texture2D,\n  Transform,\n  getParameter,\n  FEATURES,\n  hasFeatures,\n  isWebGL2\n} from '@luma.gl/core';\nimport {CompositeLayer, AttributeManager, COORDINATE_SYSTEM, log} from '@deck.gl/core';\nimport TriangleLayer from './triangle-layer';\nimport {defaultColorRange, colorRangeToFlatArray} from '../utils/color-utils';\nimport weights_vs from './weights-vs.glsl';\nimport weights_fs from './weights-fs.glsl';\nimport vs_max from './max-vs.glsl';\n\nconst RESOLUTION = 2; // (number of common space pixels) / (number texels)\nconst SIZE_2K = 2048;\nconst ZOOM_DEBOUNCE = 500; // milliseconds\nconst TEXTURE_OPTIONS = {\n  mipmaps: false,\n  parameters: {\n    [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n    [GL.TEXTURE_MIN_FILTER]: GL.LINEAR,\n    [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n    [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n  },\n  dataFormat: GL.RGBA\n};\nconst DEFAULT_COLOR_DOMAIN = [0, 0];\n\nconst defaultProps = {\n  getPosition: {type: 'accessor', value: x => x.position},\n  getWeight: {type: 'accessor', value: 1},\n  intensity: {type: 'number', min: 0, value: 1},\n  radiusPixels: {type: 'number', min: 1, max: 100, value: 30},\n  colorRange: defaultColorRange,\n  threshold: {type: 'number', min: 0, max: 1, value: 0.05},\n  colorDomain: {type: 'array', value: null, optional: true}\n};\n\nconst REQUIRED_FEATURES = [\n  FEATURES.BLEND_EQUATION_MINMAX, // max weight calculation\n  FEATURES.TEXTURE_FLOAT // weight-map as texture\n  // FEATURES.FLOAT_BLEND, // implictly supported when TEXTURE_FLOAT is supported\n];\n\nexport default class HeatmapLayer extends CompositeLayer {\n  initializeState() {\n    const {gl} = this.context;\n    if (!hasFeatures(gl, REQUIRED_FEATURES)) {\n      this.setState({supported: false});\n      log.error(`HeatmapLayer: ${this.id} is not supported on this browser`)();\n      return;\n    }\n    this.setState({supported: true});\n    this._setupTextureParams();\n    this._setupAttributes();\n    this._setupResources();\n  }\n\n  shouldUpdateState({changeFlags}) {\n    // Need to be updated when viewport changes\n    return changeFlags.somethingChanged;\n  }\n\n  /* eslint-disable complexity */\n  updateState(opts) {\n    if (!this.state.supported) {\n      return;\n    }\n    super.updateState(opts);\n    const {props, oldProps} = opts;\n    const changeFlags = this._getChangeFlags(opts);\n\n    if (changeFlags.viewportChanged) {\n      changeFlags.boundsChanged = this._updateBounds();\n    }\n\n    if (changeFlags.dataChanged || changeFlags.boundsChanged || changeFlags.uniformsChanged) {\n      this._updateWeightmap();\n    } else if (changeFlags.viewportZoomChanged) {\n      this._debouncedUpdateWeightmap();\n    }\n\n    if (props.colorRange !== oldProps.colorRange) {\n      this._updateColorTexture(opts);\n    }\n\n    if (changeFlags.viewportChanged) {\n      this._updateTextureRenderingBounds();\n    }\n\n    if (oldProps.colorDomain !== props.colorDomain || changeFlags.viewportChanged) {\n      const {viewport} = this.context;\n      const {weightsScale} = this.state;\n      const domainScale = (viewport ? 1024 / viewport.scale : 1) * weightsScale;\n      const colorDomain = props.colorDomain\n        ? props.colorDomain.map(x => x * domainScale)\n        : DEFAULT_COLOR_DOMAIN;\n      if (colorDomain[1] > 0 && weightsScale < 1) {\n        // Hack - when low precision texture is used, aggregated weights are in the [0, 1]\n        // range. Scale colorDomain to fit.\n        const max = Math.min(colorDomain[1], 1);\n        colorDomain[0] *= max / colorDomain[1];\n        colorDomain[1] = max;\n      }\n      this.setState({colorDomain});\n    }\n\n    this.setState({zoom: opts.context.viewport.zoom});\n  }\n  /* eslint-enable complexity */\n\n  renderLayers() {\n    if (!this.state.supported) {\n      return [];\n    }\n    const {\n      weightsTexture,\n      triPositionBuffer,\n      triTexCoordBuffer,\n      maxWeightsTexture,\n      colorTexture,\n      colorDomain\n    } = this.state;\n    const {updateTriggers, intensity, threshold} = this.props;\n\n    return new TriangleLayer(\n      this.getSubLayerProps({\n        id: 'triangle-layer',\n        updateTriggers\n      }),\n      {\n        data: {\n          attributes: {\n            positions: triPositionBuffer,\n            texCoords: triTexCoordBuffer\n          }\n        },\n        vertexCount: 4,\n        maxTexture: maxWeightsTexture,\n        colorTexture,\n        texture: weightsTexture,\n        intensity,\n        threshold,\n        colorDomain\n      }\n    );\n  }\n\n  finalizeState() {\n    super.finalizeState();\n    const {\n      weightsTransform,\n      weightsTexture,\n      maxWeightTransform,\n      maxWeightsTexture,\n      triPositionBuffer,\n      triTexCoordBuffer,\n      colorTexture\n    } = this.state;\n    /* eslint-disable no-unused-expressions */\n    weightsTransform && weightsTransform.delete();\n    weightsTexture && weightsTexture.delete();\n    maxWeightTransform && maxWeightTransform.delete();\n    maxWeightsTexture && maxWeightsTexture.delete();\n    triPositionBuffer && triPositionBuffer.delete();\n    triTexCoordBuffer && triTexCoordBuffer.delete();\n    colorTexture && colorTexture.delete();\n    /* eslint-enable no-unused-expressions */\n  }\n\n  // PRIVATE\n\n  // override Composite layer private method to create AttributeManager instance\n  _getAttributeManager() {\n    return new AttributeManager(this.context.gl, {\n      id: this.props.id,\n      stats: this.context.stats\n    });\n  }\n\n  _getChangeFlags(opts) {\n    const {oldProps, props} = opts;\n    const changeFlags = {};\n    if (this._isDataChanged(opts)) {\n      changeFlags.dataChanged = true;\n    }\n    if (oldProps.radiusPixels !== props.radiusPixels) {\n      changeFlags.uniformsChanged = true;\n    }\n    changeFlags.viewportChanged = opts.changeFlags.viewportChanged;\n\n    const {zoom} = this.state;\n    if (!opts.context.viewport || opts.context.viewport.zoom !== zoom) {\n      changeFlags.viewportZoomChanged = true;\n    }\n\n    return changeFlags;\n  }\n\n  _getTextures() {\n    const {gl} = this.context;\n    const {textureSize, format, type} = this.state;\n\n    return {\n      weightsTexture: new Texture2D(gl, {\n        width: textureSize,\n        height: textureSize,\n        format,\n        type,\n        ...TEXTURE_OPTIONS\n      }),\n      maxWeightsTexture: new Texture2D(gl, {format, type, ...TEXTURE_OPTIONS}) // 1 X 1 texture,\n    };\n  }\n\n  _isDataChanged({changeFlags}) {\n    if (changeFlags.dataChanged) {\n      return true;\n    }\n    if (\n      changeFlags.updateTriggersChanged &&\n      (changeFlags.updateTriggersChanged.all ||\n        changeFlags.updateTriggersChanged.getPosition ||\n        changeFlags.updateTriggersChanged.getWeight)\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  _setupAttributes() {\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      positions: {size: 3, accessor: 'getPosition'},\n      weights: {size: 1, accessor: 'getWeight'}\n    });\n  }\n\n  _setupTextureParams() {\n    const {gl} = this.context;\n    const textureSize = Math.min(SIZE_2K, getParameter(gl, gl.MAX_TEXTURE_SIZE));\n    const floatTargetSupport = hasFeatures(gl, FEATURES.COLOR_ATTACHMENT_RGBA32F);\n    const {format, type} = getTextureParams({gl, floatTargetSupport});\n    const weightsScale = floatTargetSupport ? 1 : 1 / 255;\n    this.setState({textureSize, format, type, weightsScale});\n    if (!floatTargetSupport) {\n      log.warn(\n        `HeatmapLayer: ${\n          this.id\n        } rendering to float texture not supported, fallingback to low precession format`\n      )();\n    }\n  }\n\n  _setupResources() {\n    const {gl} = this.context;\n    const {textureSize} = this.state;\n    const {weightsTexture, maxWeightsTexture} = this._getTextures();\n    const weightsTransform = new Transform(gl, {\n      id: `${this.id}-weights-transform`,\n      vs: weights_vs,\n      _fs: weights_fs,\n      modules: ['project32'],\n      elementCount: 1,\n      _targetTexture: weightsTexture,\n      _targetTextureVarying: 'weightsTexture'\n    });\n    const maxWeightTransform = new Transform(gl, {\n      id: `${this.id}-max-weights-transform`,\n      _sourceTextures: {\n        inTexture: weightsTexture\n      },\n      _targetTexture: maxWeightsTexture,\n      _targetTextureVarying: 'outTexture',\n      vs: vs_max,\n      elementCount: textureSize * textureSize\n    });\n\n    this.setState({\n      weightsTexture,\n      maxWeightsTexture,\n      weightsTransform,\n      model: weightsTransform.model,\n      maxWeightTransform,\n      zoom: null,\n      triPositionBuffer: new Buffer(gl, {\n        byteLength: 48,\n        accessor: {size: 3}\n      }),\n      triTexCoordBuffer: new Buffer(gl, {\n        byteLength: 48,\n        accessor: {size: 2}\n      })\n    });\n  }\n\n  _updateMaxWeightValue() {\n    const {maxWeightTransform} = this.state;\n    maxWeightTransform.run({\n      parameters: {\n        blend: true,\n        depthTest: false,\n        blendFunc: [GL.ONE, GL.ONE],\n        blendEquation: GL.MAX\n      }\n    });\n  }\n\n  // Computes world bounds area that needs to be processed for generate heatmap\n  _updateBounds(forceUpdate = false) {\n    const {textureSize} = this.state;\n    const {viewport} = this.context;\n\n    // Unproject all 4 corners of the current screen coordinates into world coordinates (lng/lat)\n    // Takes care of viewport has non zero bearing/pitch (i.e axis not aligned with world coordiante system)\n    const viewportCorners = [\n      viewport.unproject([0, 0]),\n      viewport.unproject([viewport.width, 0]),\n      viewport.unproject([viewport.width, viewport.height]),\n      viewport.unproject([0, viewport.height])\n    ];\n\n    // #1: get world bounds for current viewport extends\n    const visibleWorldBounds = getBounds(viewportCorners); // TODO: Change to visible bounds\n    // #2 : convert world bounds to common (Flat) bounds\n    const visibleCommonBounds = this._worldToCommonBounds(visibleWorldBounds);\n\n    const newState = {visibleWorldBounds, viewportCorners};\n    let boundsChanged = false;\n\n    if (\n      forceUpdate ||\n      !this.state.worldBounds ||\n      !boundsContain(this.state.worldBounds, visibleWorldBounds)\n    ) {\n      // #3: extend common bounds to match aspect ratio with viewport\n      const scaledCommonBounds = scaleToAspectRatio(\n        visibleCommonBounds,\n        textureSize * RESOLUTION,\n        textureSize * RESOLUTION\n      );\n\n      // #4 :convert aligned common bounds to world bounds\n      const worldBounds = this._commonToWorldBounds(scaledCommonBounds);\n\n      // Clip webmercator projection limits\n      if (this.props.coordinateSystem === COORDINATE_SYSTEM.LNGLAT) {\n        worldBounds[1] = Math.max(worldBounds[1], -85.051129);\n        worldBounds[3] = Math.min(worldBounds[3], 85.051129);\n        worldBounds[0] = Math.max(worldBounds[0], -360);\n        worldBounds[2] = Math.min(worldBounds[2], 360);\n      }\n\n      // #5: now convert world bounds to common using Layer's coordiante system and origin\n      const normalizedCommonBounds = this._worldToCommonBounds(worldBounds, {\n        scaleToAspect: true,\n        normalize: true,\n        width: textureSize * RESOLUTION,\n        height: textureSize * RESOLUTION\n      });\n\n      newState.worldBounds = worldBounds;\n      newState.normalizedCommonBounds = normalizedCommonBounds;\n\n      boundsChanged = true;\n    }\n    this.setState(newState);\n    return boundsChanged;\n  }\n\n  _updateTextureRenderingBounds() {\n    // Just render visible portion of the texture\n    const {\n      triPositionBuffer,\n      triTexCoordBuffer,\n      normalizedCommonBounds,\n      viewportCorners\n    } = this.state;\n\n    const {viewport} = this.context;\n    const commonBounds = normalizedCommonBounds.map(x => x * viewport.scale);\n\n    triPositionBuffer.subData(packVertices(viewportCorners, 3));\n\n    const textureBounds = viewportCorners.map(p =>\n      getTextureCoordinates(viewport.projectPosition(p), commonBounds)\n    );\n    triTexCoordBuffer.subData(packVertices(textureBounds, 2));\n  }\n\n  _updateColorTexture(opts) {\n    const {colorRange} = opts.props;\n    let {colorTexture} = this.state;\n    const colors = colorRangeToFlatArray(colorRange, true);\n\n    if (colorTexture) {\n      colorTexture.setImageData({\n        data: colors,\n        width: colorRange.length\n      });\n    } else {\n      colorTexture = new Texture2D(this.context.gl, {\n        data: colors,\n        width: colorRange.length,\n        height: 1,\n        format: isWebGL2(this.context.gl) ? GL.RGBA32F : GL.RGBA,\n        type: GL.FLOAT,\n        ...TEXTURE_OPTIONS\n      });\n    }\n    this.setState({colorTexture});\n  }\n\n  _updateWeightmap() {\n    const {radiusPixels} = this.props;\n    const {weightsTransform, worldBounds, textureSize, weightsTexture, weightsScale} = this.state;\n\n    // base Layer class doesn't update attributes for composite layers, hence manually trigger it.\n    this._updateAttributes(this.props);\n\n    const moduleParameters = Object.assign(Object.create(this.props), {\n      viewport: this.context.viewport,\n      pickingActive: 0\n    });\n\n    // #5: convert world bounds to common using Layer's coordiante system and origin\n    const commonBounds = this._worldToCommonBounds(worldBounds, {\n      useLayerCoordinateSystem: true,\n      scaleToAspect: true,\n      width: textureSize * RESOLUTION,\n      height: textureSize * RESOLUTION\n    });\n\n    const uniforms = Object.assign({}, weightsTransform.model.getModuleUniforms(moduleParameters), {\n      radiusPixels,\n      commonBounds,\n      textureWidth: textureSize,\n      weightsScale\n    });\n    // Attribute manager sets data array count as instaceCount on model\n    // we need to set that as elementCount on 'weightsTransform'\n    weightsTransform.update({\n      elementCount: this.getNumInstances()\n    });\n    weightsTransform.run({\n      uniforms,\n      parameters: {\n        blend: true,\n        depthTest: false,\n        blendFunc: [GL.ONE, GL.ONE],\n        blendEquation: GL.FUNC_ADD\n      },\n      clearRenderTarget: true\n    });\n    this._updateMaxWeightValue();\n\n    // reset filtering parameters (TODO: remove once luma issue#1193 is fixed)\n    weightsTexture.setParameters({\n      [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n      [GL.TEXTURE_MIN_FILTER]: GL.LINEAR\n    });\n\n    this.setState({lastUpdate: Date.now()});\n  }\n\n  _debouncedUpdateWeightmap(fromTimer = false) {\n    let {updateTimer} = this.state;\n    const timeSinceLastUpdate = Date.now() - this.state.lastUpdate;\n\n    if (fromTimer) {\n      updateTimer = null;\n    }\n\n    if (timeSinceLastUpdate >= ZOOM_DEBOUNCE) {\n      // update\n      this._updateBounds(true);\n      this._updateWeightmap();\n      this._updateTextureRenderingBounds();\n    } else if (!updateTimer) {\n      updateTimer = setTimeout(\n        this._debouncedUpdateWeightmap.bind(this, true),\n        ZOOM_DEBOUNCE - timeSinceLastUpdate\n      );\n    }\n\n    this.setState({updateTimer});\n  }\n\n  // input: worldBounds: [minLong, minLat, maxLong, maxLat]\n  // input: opts.useLayerCoordinateSystem : layers coordiante system is used\n  // optput: commonBounds: [minX, minY, maxX, maxY]\n  _worldToCommonBounds(worldBounds, opts = {}) {\n    const {useLayerCoordinateSystem = false, scaleToAspect = false, width, height} = opts;\n    const [minLong, minLat, maxLong, maxLat] = worldBounds;\n    const {viewport} = this.context;\n\n    let topLeftCommon;\n    let bottomRightCommon;\n\n    // Y-axis is flipped between World and Common bounds\n    if (useLayerCoordinateSystem) {\n      topLeftCommon = this.projectPosition([minLong, maxLat, 0]);\n      bottomRightCommon = this.projectPosition([maxLong, minLat, 0]);\n    } else {\n      topLeftCommon = viewport.projectPosition([minLong, maxLat, 0]);\n      bottomRightCommon = viewport.projectPosition([maxLong, minLat, 0]);\n    }\n    // Ignore z component\n    let commonBounds = topLeftCommon.slice(0, 2).concat(bottomRightCommon.slice(0, 2));\n    if (scaleToAspect) {\n      commonBounds = scaleToAspectRatio(commonBounds, width, height);\n    }\n    if (opts.normalize) {\n      commonBounds = commonBounds.map(x => x / viewport.scale);\n    }\n    return commonBounds;\n  }\n\n  // input commonBounds: [xMin, yMin, xMax, yMax]\n  // output worldBounds: [minLong, minLat, maxLong, maxLat]\n  _commonToWorldBounds(commonBounds) {\n    const [xMin, yMin, xMax, yMax] = commonBounds;\n    const {viewport} = this.context;\n    const topLeftWorld = viewport.unprojectPosition([xMin, yMax]);\n    const bottomRightWorld = viewport.unprojectPosition([xMax, yMin]);\n\n    return topLeftWorld.slice(0, 2).concat(bottomRightWorld.slice(0, 2));\n  }\n}\n\nHeatmapLayer.layerName = 'HeatmapLayer';\nHeatmapLayer.defaultProps = defaultProps;\n"],"file":"heatmap-layer.js"}