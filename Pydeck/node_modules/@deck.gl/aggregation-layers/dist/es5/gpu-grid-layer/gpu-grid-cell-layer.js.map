{"version":3,"sources":["../../../src/gpu-grid-layer/gpu-grid-cell-layer.js"],"names":["defaultMaterial","PhongMaterial","COLOR_DATA_UBO_INDEX","ELEVATION_DATA_UBO_INDEX","defaultProps","colorDomain","colorRange","defaultColorRange","elevationDomain","elevationRange","elevationScale","type","min","value","gridSize","gridOrigin","gridOffset","cellSize","max","offset","coverage","extruded","material","GPUGridCellLayer","vs","fs","modules","fp64ShaderModule","gl","context","attributeManager","getAttributeManager","addInstanced","colors","size","update","calculateColors","noAlloc","elevations","calculateElevations","model","_getModel","_setupUniformBuffer","setState","Model","Object","assign","getShaders","id","props","geometry","CubeGeometry","isInstanced","uniforms","data","gridOriginLow","gridOffsetLow","domainUniforms","getDomainUniforms","uniformBuffers","colorMaxMinBuffer","color","maxMinBuffer","elevationMaxMinBuffer","elevation","bindUniformBuffers","state","setUniforms","draw","unbindUniformBuffers","bind","target","index","unbind","attribute","buffer","aggregationBuffer","colorDomainValid","elevationDomainValid","programHandle","program","handle","colorIndex","getUniformBlockIndex","elevationIndex","uniformBlockBinding","Layer","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, fp64LowPart} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, CubeGeometry, PhongMaterial, fp64 as fp64ShaderModule} from '@luma.gl/core';\nconst defaultMaterial = new PhongMaterial();\nimport {defaultColorRange, colorRangeToFlatArray} from '../utils/color-utils';\n\nimport vs from './gpu-grid-cell-layer-vertex.glsl';\nimport fs from './gpu-grid-cell-layer-fragment.glsl';\n\nconst COLOR_DATA_UBO_INDEX = 0;\nconst ELEVATION_DATA_UBO_INDEX = 1;\n\nconst defaultProps = {\n  // color\n  colorDomain: null,\n  colorRange: defaultColorRange,\n\n  // elevation\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  elevationScale: {type: 'number', min: 0, value: 1},\n\n  // grid\n  gridSize: {type: 'array', min: 0, value: [1, 1]},\n  gridOrigin: {type: 'array', min: 0, value: [0, 0]},\n  gridOffset: {type: 'array', min: 0, value: [0, 0]},\n\n  cellSize: {type: 'number', min: 0, max: 1000, value: 1000},\n  offset: {type: 'array', min: 0, value: [1, 1]},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  extruded: true,\n\n  material: defaultMaterial\n};\n\nexport default class GPUGridCellLayer extends Layer {\n  getShaders() {\n    return super.getShaders({\n      vs,\n      fs,\n      modules: ['project32', 'gouraud-lighting', 'picking', fp64ShaderModule]\n    });\n  }\n\n  initializeState() {\n    const {gl} = this.context;\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      colors: {\n        size: 4,\n        update: this.calculateColors,\n        noAlloc: true\n      },\n      elevations: {\n        size: 4,\n        update: this.calculateElevations,\n        noAlloc: true\n      }\n    });\n    const model = this._getModel(gl);\n    this._setupUniformBuffer(model);\n    this.setState({model});\n  }\n\n  _getModel(gl) {\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new CubeGeometry(),\n        isInstanced: true\n      })\n    );\n  }\n\n  draw({uniforms}) {\n    const {\n      data,\n      cellSize,\n      offset,\n      extruded,\n      elevationScale,\n      coverage,\n      gridSize,\n      gridOrigin,\n      gridOffset,\n      elevationRange\n    } = this.props;\n\n    const gridOriginLow = [fp64LowPart(gridOrigin[0]), fp64LowPart(gridOrigin[1])];\n    const gridOffsetLow = [fp64LowPart(gridOffset[0]), fp64LowPart(gridOffset[1])];\n    const domainUniforms = this.getDomainUniforms();\n    const uniformBuffers = {\n      colorMaxMinBuffer: data.color.maxMinBuffer,\n      elevationMaxMinBuffer: data.elevation.maxMinBuffer\n    };\n    const colorRange = colorRangeToFlatArray(this.props.colorRange);\n\n    this.bindUniformBuffers(uniformBuffers);\n    this.state.model\n      .setUniforms(\n        Object.assign({}, uniforms, domainUniforms, {\n          cellSize,\n          offset,\n          extruded,\n          elevationScale,\n          coverage,\n          gridSize,\n          gridOrigin,\n          gridOriginLow,\n          gridOffset,\n          gridOffsetLow,\n          colorRange,\n          elevationRange\n        })\n      )\n      .draw();\n    this.unbindUniformBuffers(uniformBuffers);\n  }\n\n  bindUniformBuffers({colorMaxMinBuffer, elevationMaxMinBuffer}) {\n    colorMaxMinBuffer.bind({target: GL.UNIFORM_BUFFER, index: COLOR_DATA_UBO_INDEX});\n    elevationMaxMinBuffer.bind({target: GL.UNIFORM_BUFFER, index: ELEVATION_DATA_UBO_INDEX});\n  }\n\n  unbindUniformBuffers({colorMaxMinBuffer, elevationMaxMinBuffer}) {\n    colorMaxMinBuffer.unbind({target: GL.UNIFORM_BUFFER, index: COLOR_DATA_UBO_INDEX});\n    elevationMaxMinBuffer.unbind({target: GL.UNIFORM_BUFFER, index: ELEVATION_DATA_UBO_INDEX});\n  }\n\n  calculateColors(attribute) {\n    const {data} = this.props;\n    attribute.update({\n      buffer: data.color.aggregationBuffer\n    });\n  }\n\n  calculateElevations(attribute) {\n    const {data} = this.props;\n    attribute.update({\n      buffer: data.elevation.aggregationBuffer\n    });\n  }\n\n  getDomainUniforms() {\n    const {colorDomain, elevationDomain} = this.props;\n    const domainUniforms = {};\n    if (colorDomain !== null) {\n      domainUniforms.colorDomainValid = true;\n      domainUniforms.colorDomain = colorDomain;\n    } else {\n      domainUniforms.colorDomainValid = false;\n    }\n    if (elevationDomain !== null) {\n      domainUniforms.elevationDomainValid = true;\n      domainUniforms.elevationDomain = elevationDomain;\n    } else {\n      domainUniforms.elevationDomainValid = false;\n    }\n    return domainUniforms;\n  }\n\n  _setupUniformBuffer(model) {\n    const gl = this.context.gl;\n    const programHandle = model.program.handle;\n\n    const colorIndex = gl.getUniformBlockIndex(programHandle, 'ColorData');\n    const elevationIndex = gl.getUniformBlockIndex(programHandle, 'ElevationData');\n    gl.uniformBlockBinding(programHandle, colorIndex, COLOR_DATA_UBO_INDEX);\n    gl.uniformBlockBinding(programHandle, elevationIndex, ELEVATION_DATA_UBO_INDEX);\n  }\n}\n\nGPUGridCellLayer.layerName = 'GPUGridCellLayer';\nGPUGridCellLayer.defaultProps = defaultProps;\n"],"file":"gpu-grid-cell-layer.js"}