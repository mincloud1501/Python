{"version":3,"sources":["../../../../src/utils/gpu-grid-aggregation/gpu-grid-aggregator.js"],"names":["fp64ifyMatrix4","fp64ShaderModule","BUFFER_NAMES","ARRAY_BUFFER_MAP","maxData","minData","maxMinData","REQUIRED_FEATURES","FEATURES","WEBGL2","COLOR_ATTACHMENT_RGBA32F","BLEND_EQUATION_MINMAX","FLOAT_BLEND","TEXTURE_FLOAT","GPUGridAggregator","aggregationData","pixelIndex","index","PIXEL_SIZE","results","cellCount","cellWeight","maxCellWieght","minCellWeight","totalCount","countsData","size","numCells","length","cellWeights","Float32Array","cellCounts","Uint32Array","i","sizeIndex","gl","opts","id","state","weights","gridPositions","positionsBuffer","positions64xyLowBuffer","vertexCount","fp64","useGPU","numCol","numRow","windowSize","cellSize","weightAttributes","textures","meanTextures","buffers","framebuffers","maxMinFramebuffers","minFramebuffers","maxFramebuffers","equations","resources","_hasGPUSupport","gridAggregationModel","allAggregationModel","meanTransform","deleteResources","setState","aggregationParams","getAggregationParams","updateGridSize","runAggregationOnGPU","log","warn","runAggregationOnCPU","weightId","data","aggregationBuffer","getData","arrayName","bufferName","Array","isArray","forEach","obj","name","Object","assign","DEFAULT_RUN_PARAMS","gridTransformMatrix","viewport","projectPoints","changeFlags","DEFAULT_CHANGE_FLAGS","cellSizeChanged","validateProps","viewportMatrix","IDENTITY_MATRIX","normalizeWeightParams","result","DEFAULT_WEIGHT_PARAMS","updateObject","dataChanged","viewportChanged","width","height","Math","ceil","assert","positions","projectPositions","cellIndex","posIndex","values","operation","cellElementIndex","weightComponent","WEIGHT_SIZE","AGGREGATION_OPERATION","SUM","MEAN","MIN","min","MAX","max","validCellIndices","needMin","needMax","calculateMinMax","calculateMean","combineMaxMin","count","ELEMENTCOUNT","weight","aggregationSize","fill","Infinity","initCPUResults","gridTransformRequired","shouldTransformToGrid","pos","posCount","Float64Array","Set","x","y","project","colId","floor","rowId","add","calculateAggregationData","calculateMeanMaxMinData","updateAggregationBuffers","textureName","resourceName","setData","Buffer","texture","_getMinMaxTexture","setImageData","createBufferObjects","_uploadResultsToGPU","aggregationTexture","target","sourceType","maxMinBuffer","maxMinTexture","minBuffer","minTexture","maxBuffer","maxTexture","trackGPUResultBuffers","Model","vs","AGGREGATE_TO_GRID_VS_FP64","AGGREGATE_TO_GRID_VS","fs","AGGREGATE_TO_GRID_FS","modules","project64","drawMode","AGGREGATE_ALL_VS_FP64","AGGREGATE_ALL_FS","isInstanced","instanceCount","attributes","position","update","Transform","TRANSFORM_MEAN_VS","_targetTextureVarying","uProjectionMatrixFP64","gridSize","parameters","blend","depthTest","blendFunc","moduleSettings","uniforms","uProjectionMatrix","renderToWeightsTexture","renderToMaxMinTexture","blendEquation","MAX_MIN_BLEND_EQUATION","minOrMaxFb","clearParams","clearColor","MAX_32_BIT_FLOAT","MIN_BLEND_EQUATION","MAX_BLEND_EQUATION","bind","clear","draw","uSampler","unbind","transformOptions","_sourceTextures","aggregationValues","_targetTexture","elementCount","getMeanTransform","run","attach","updateModels","setupFramebuffers","renderAggregateData","getAggregateData","framebufferSize","resize","EQUATION_MAP","getAggregationModel","getAllAggregationModel","constructor","typedArray","positions64xyLow","aggregationModelAttributes","modelDirty","setupModels","accessor","setupWeightAttributes","setVertexCount","setAttributes","setInstanceCount"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2018 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport GL from '@luma.gl/constants';\nimport {\n  Buffer,\n  Model,\n  Transform,\n  FEATURES,\n  hasFeatures,\n  isWebGL2,\n  readPixelsToBuffer,\n  fp64 as fp64ShaderModule,\n  withParameters\n} from '@luma.gl/core';\nimport {log, project64} from '@deck.gl/core';\nimport {worldToPixels} from 'viewport-mercator-project';\nconst {fp64ifyMatrix4} = fp64ShaderModule;\n\nimport {\n  DEFAULT_CHANGE_FLAGS,\n  DEFAULT_RUN_PARAMS,\n  MAX_32_BIT_FLOAT,\n  MIN_BLEND_EQUATION,\n  MAX_BLEND_EQUATION,\n  MAX_MIN_BLEND_EQUATION,\n  EQUATION_MAP,\n  ELEMENTCOUNT,\n  DEFAULT_WEIGHT_PARAMS,\n  IDENTITY_MATRIX,\n  PIXEL_SIZE,\n  WEIGHT_SIZE\n} from './gpu-grid-aggregator-constants';\nimport {AGGREGATION_OPERATION} from '../aggregation-operation-utils';\n\nimport AGGREGATE_TO_GRID_VS from './aggregate-to-grid-vs.glsl';\nimport AGGREGATE_TO_GRID_VS_FP64 from './aggregate-to-grid-vs-64.glsl';\nimport AGGREGATE_TO_GRID_FS from './aggregate-to-grid-fs.glsl';\nimport AGGREGATE_ALL_VS_FP64 from './aggregate-all-vs-64.glsl';\nimport AGGREGATE_ALL_FS from './aggregate-all-fs.glsl';\nimport TRANSFORM_MEAN_VS from './transform-mean-vs.glsl';\nimport {getFloatTexture, getFramebuffer, getFloatArray} from './../resource-utils.js';\n\nconst BUFFER_NAMES = ['aggregationBuffer', 'maxMinBuffer', 'minBuffer', 'maxBuffer'];\nconst ARRAY_BUFFER_MAP = {\n  maxData: 'maxBuffer',\n  minData: 'minBuffer',\n  maxMinData: 'maxMinBuffer'\n};\n\nconst REQUIRED_FEATURES = [\n  FEATURES.WEBGL2, // TODO: Remove after trannsform refactor\n  FEATURES.COLOR_ATTACHMENT_RGBA32F,\n  FEATURES.BLEND_EQUATION_MINMAX,\n  FEATURES.FLOAT_BLEND,\n  FEATURES.TEXTURE_FLOAT\n];\n\nexport default class GPUGridAggregator {\n  // Decode and return aggregation data of given pixel.\n  static getAggregationData({aggregationData, maxData, minData, maxMinData, pixelIndex}) {\n    const index = pixelIndex * PIXEL_SIZE;\n    const results = {};\n    if (aggregationData) {\n      results.cellCount = aggregationData[index + 3];\n      results.cellWeight = aggregationData[index];\n    }\n    if (maxMinData) {\n      results.maxCellWieght = maxMinData[0];\n      results.minCellWeight = maxMinData[3];\n    } else {\n      if (maxData) {\n        results.maxCellWieght = maxData[0];\n        results.totalCount = maxData[3];\n      }\n      if (minData) {\n        results.minCellWeight = minData[0];\n        results.totalCount = maxData[3];\n      }\n    }\n    return results;\n  }\n\n  // Decodes and retuns counts and weights of all cells\n  static getCellData({countsData, size = 1}) {\n    const numCells = countsData.length / 4;\n    const cellWeights = new Float32Array(numCells * size);\n    const cellCounts = new Uint32Array(numCells);\n    for (let i = 0; i < numCells; i++) {\n      // weights in RGB channels\n      for (let sizeIndex = 0; sizeIndex < size; sizeIndex++) {\n        cellWeights[i * size + sizeIndex] = countsData[i * 4 + sizeIndex];\n      }\n      // count in Alpha channel\n      cellCounts[i] = countsData[i * 4 + 3];\n    }\n    return {cellCounts, cellWeights};\n  }\n\n  static isSupported(gl) {\n    return hasFeatures(gl, REQUIRED_FEATURES);\n  }\n\n  // DEBUG ONLY\n  // static logData({aggregationBuffer, minBuffer, maxBuffer, maxMinBuffer, limit = 10}) {\n  //   if (aggregationBuffer) {\n  //     console.log('Aggregation Data:');\n  //     const agrData = aggregationBuffer.getData();\n  //     for (let index = 0; index < agrData.length && limit > 0; index += 4) {\n  //       if (agrData[index + 3] > 0) {\n  //         console.log(\n  //           `index: ${index} weights: ${agrData[index]} ${agrData[index + 1]} ${\n  //             agrData[index + 2]\n  //           } count: ${agrData[index + 3]}`\n  //         );\n  //         limit--;\n  //       }\n  //     }\n  //   }\n  //   const obj = {minBuffer, maxBuffer, maxMinBuffer};\n  //   for (const key in obj) {\n  //     if (obj[key]) {\n  //       const data = obj[key].getData();\n  //       console.log(`${key} data : R: ${data[0]} G: ${data[1]} B: ${data[2]} A: ${data[3]}`);\n  //     }\n  //   }\n  // }\n\n  constructor(gl, opts = {}) {\n    this.id = opts.id || 'gpu-grid-aggregator';\n    this.gl = gl;\n    this.state = {\n      // cache weights and position data to process when data is not changed\n      weights: null,\n      gridPositions: null,\n      positionsBuffer: null,\n      positions64xyLowBuffer: null,\n      vertexCount: 0,\n\n      // flags/variables that affect the aggregation\n      fp64: null,\n      useGPU: null,\n      numCol: 0,\n      numRow: 0,\n      windowSize: null,\n      cellSize: null,\n\n      // per weight GPU resources\n      weightAttributes: {},\n      textures: {},\n      meanTextures: {},\n      buffers: {},\n      framebuffers: {},\n      maxMinFramebuffers: {},\n      minFramebuffers: {},\n      maxFramebuffers: {},\n      equations: {},\n\n      // common resources to be deleted\n      resources: {},\n\n      // results\n      results: {}\n    };\n    this._hasGPUSupport =\n      isWebGL2(gl) && // gl_InstanceID usage in min/max calculation shaders\n      hasFeatures(\n        this.gl,\n        FEATURES.BLEND_EQUATION_MINMAX, // set min/max blend modes\n        FEATURES.COLOR_ATTACHMENT_RGBA32F, // render to float texture\n        FEATURES.TEXTURE_FLOAT // sample from a float texture\n      );\n  }\n\n  // Delete owned resources.\n  /* eslint no-unused-expressions: [\"error\", { \"allowShortCircuit\": true }] */\n  delete() {\n    const {gridAggregationModel, allAggregationModel, meanTransform} = this;\n    const {\n      positionsBuffer,\n      positions64xyLowBuffer,\n      textures,\n      framebuffers,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      meanTextures,\n      resources\n    } = this.state;\n\n    gridAggregationModel && gridAggregationModel.delete();\n    allAggregationModel && allAggregationModel.delete();\n    meanTransform && meanTransform.delete();\n\n    positionsBuffer && positionsBuffer.delete();\n    positions64xyLowBuffer && positions64xyLowBuffer.delete();\n    this.deleteResources([\n      framebuffers,\n      textures,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      meanTextures,\n      resources\n    ]);\n  }\n\n  // Perform aggregation and retun the results\n  run(opts = {}) {\n    // reset results\n    this.setState({results: {}});\n    const aggregationParams = this.getAggregationParams(opts);\n    this.updateGridSize(aggregationParams);\n    const {useGPU} = aggregationParams;\n    if (this._hasGPUSupport && useGPU) {\n      return this.runAggregationOnGPU(aggregationParams);\n    }\n    if (useGPU) {\n      log.warn('GPUGridAggregator: GPU Aggregation not supported, falling back to CPU')();\n    }\n    return this.runAggregationOnCPU(aggregationParams);\n  }\n\n  // Reads aggregation data into JS Array object\n  // For WebGL1, data is available in JS Array objects already.\n  // For WebGL2, data is read from Buffer objects and cached for subsequent queries.\n  getData(weightId) {\n    const data = {};\n    const results = this.state.results;\n    if (!results[weightId].aggregationData) {\n      // cache the results if reading from the buffer (WebGL2 path)\n      results[weightId].aggregationData = results[weightId].aggregationBuffer.getData();\n    }\n    data.aggregationData = results[weightId].aggregationData;\n\n    // Check for optional results\n    for (const arrayName in ARRAY_BUFFER_MAP) {\n      const bufferName = ARRAY_BUFFER_MAP[arrayName];\n\n      if (results[weightId][arrayName] || results[weightId][bufferName]) {\n        // cache the result\n        results[weightId][arrayName] =\n          results[weightId][arrayName] || results[weightId][bufferName].getData();\n        data[arrayName] = results[weightId][arrayName];\n      }\n    }\n    return data;\n  }\n\n  // PRIVATE\n\n  deleteResources(resources) {\n    resources = Array.isArray(resources) ? resources : [resources];\n    resources.forEach(obj => {\n      for (const name in obj) {\n        obj[name].delete();\n      }\n    });\n  }\n\n  getAggregationParams(opts) {\n    const aggregationParams = Object.assign({}, DEFAULT_RUN_PARAMS, opts);\n    const {\n      useGPU,\n      gridTransformMatrix,\n      viewport,\n      weights,\n      projectPoints,\n      cellSize\n    } = aggregationParams;\n    if (this.state.useGPU !== useGPU) {\n      // CPU/GPU resources need to reinitialized, force set the change flags.\n      aggregationParams.changeFlags = Object.assign(\n        {},\n        aggregationParams.changeFlags,\n        DEFAULT_CHANGE_FLAGS\n      );\n    }\n    if (\n      cellSize &&\n      (!this.state.cellSize ||\n        this.state.cellSize[0] !== cellSize[0] ||\n        this.state.cellSize[1] !== cellSize[1])\n    ) {\n      aggregationParams.changeFlags.cellSizeChanged = true;\n      // For GridLayer aggregation, cellSize is calculated by parsing all input data as it depends\n      // on bounding box, cache cellSize\n      this.setState({cellSize});\n    }\n\n    this.validateProps(aggregationParams, opts);\n\n    this.setState({useGPU});\n    aggregationParams.gridTransformMatrix =\n      (projectPoints ? viewport.viewportMatrix : gridTransformMatrix) || IDENTITY_MATRIX;\n\n    if (weights) {\n      aggregationParams.weights = this.normalizeWeightParams(weights);\n\n      // cache weights to process when only cellSize or viewport is changed.\n      // position data is cached in Buffers for GPU case and in 'gridPositions' for CPU case.\n      this.setState({weights: aggregationParams.weights});\n    }\n    return aggregationParams;\n  }\n\n  normalizeWeightParams(weights) {\n    const result = {};\n    for (const id in weights) {\n      result[id] = Object.assign({}, DEFAULT_WEIGHT_PARAMS, weights[id]);\n    }\n    return result;\n  }\n\n  // Update priveate state\n  setState(updateObject) {\n    Object.assign(this.state, updateObject);\n  }\n\n  shouldTransformToGrid(opts) {\n    const {projectPoints, changeFlags} = opts;\n    if (\n      !this.state.gridPositions ||\n      changeFlags.dataChanged ||\n      (projectPoints && changeFlags.viewportChanged) // world space aggregation (GridLayer) doesn't change when viewport is changed.\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  updateGridSize(opts) {\n    const {viewport, cellSize} = opts;\n    const width = opts.width || viewport.width;\n    const height = opts.height || viewport.height;\n    const numCol = Math.ceil(width / cellSize[0]);\n    const numRow = Math.ceil(height / cellSize[1]);\n    this.setState({numCol, numRow, windowSize: [width, height]});\n  }\n\n  /* eslint-disable complexity */\n  // validate and log.assert\n  validateProps(aggregationParams, opts) {\n    const {changeFlags, projectPoints, gridTransformMatrix} = aggregationParams;\n    log.assert(\n      changeFlags.dataChanged || changeFlags.viewportChanged || changeFlags.cellSizeChanged\n    );\n\n    // log.assert for required options\n    log.assert(\n      !changeFlags.dataChanged ||\n        (opts.positions &&\n          opts.weights &&\n          (!opts.projectPositions || opts.viewport) &&\n          opts.cellSize)\n    );\n    log.assert(!changeFlags.cellSizeChanged || opts.cellSize);\n\n    // viewport is needed only when performing screen space aggregation (projectPoints is true)\n    log.assert(!(changeFlags.viewportChanged && projectPoints) || opts.viewport);\n\n    if (projectPoints && gridTransformMatrix) {\n      log.warn('projectPoints is true, gridTransformMatrix is ignored')();\n    }\n  }\n  /* eslint-enable complexity */\n\n  // CPU Aggregation methods\n\n  // aggregated weight value to a cell\n  /* eslint-disable max-depth */\n  calculateAggregationData(opts) {\n    const {weights, results, cellIndex, posIndex} = opts;\n    for (const id in weights) {\n      const {values, size, operation} = weights[id];\n      const {aggregationData} = results[id];\n\n      // Fill RGB with weights\n      for (let sizeIndex = 0; sizeIndex < size; sizeIndex++) {\n        const cellElementIndex = cellIndex + sizeIndex;\n        const weightComponent = values[posIndex * WEIGHT_SIZE + sizeIndex];\n\n        if (aggregationData[cellIndex + 3] === 0) {\n          // if the cell is getting update the first time, set the value directly.\n          aggregationData[cellElementIndex] = weightComponent;\n        } else {\n          switch (operation) {\n            case AGGREGATION_OPERATION.SUM:\n            case AGGREGATION_OPERATION.MEAN:\n              aggregationData[cellElementIndex] += weightComponent;\n              // MEAN value is calculated during 'calculateMeanMaxMinData'\n              break;\n            case AGGREGATION_OPERATION.MIN:\n              aggregationData[cellElementIndex] = Math.min(\n                aggregationData[cellElementIndex],\n                weightComponent\n              );\n              break;\n            case AGGREGATION_OPERATION.MAX:\n              aggregationData[cellElementIndex] = Math.max(\n                aggregationData[cellElementIndex],\n                weightComponent\n              );\n              break;\n            default:\n              // Not a valid operation enum.\n              log.assert(false);\n              break;\n          }\n        }\n      }\n\n      // Track the count per grid-cell\n      aggregationData[cellIndex + 3]++;\n    }\n  }\n\n  /* eslint-disable max-depth, complexity */\n  calculateMeanMaxMinData(opts) {\n    const {validCellIndices, results, weights} = opts;\n\n    // collect max/min values\n    validCellIndices.forEach(cellIndex => {\n      for (const id in results) {\n        const {size, needMin, needMax, operation} = weights[id];\n        const {aggregationData, minData, maxData, maxMinData} = results[id];\n        const calculateMinMax = needMin || needMax;\n        const calculateMean = operation === AGGREGATION_OPERATION.MEAN;\n        const combineMaxMin = needMin && needMax && weights[id].combineMaxMin;\n        const count = aggregationData[cellIndex + ELEMENTCOUNT - 1];\n        for (\n          let sizeIndex = 0;\n          sizeIndex < size && (calculateMinMax || calculateMean);\n          sizeIndex++\n        ) {\n          const cellElementIndex = cellIndex + sizeIndex;\n          let weight = aggregationData[cellElementIndex];\n          if (calculateMean) {\n            aggregationData[cellElementIndex] /= count;\n            weight = aggregationData[cellElementIndex];\n          }\n          if (combineMaxMin) {\n            // use RGB for max values for 3 weights.\n            maxMinData[sizeIndex] = Math.max(maxMinData[sizeIndex], weight);\n          } else {\n            if (needMin) {\n              minData[sizeIndex] = Math.min(minData[sizeIndex], weight);\n            }\n            if (needMax) {\n              maxData[sizeIndex] = Math.max(maxData[sizeIndex], weight);\n            }\n          }\n        }\n        // update total aggregation values.\n        if (combineMaxMin) {\n          // Use Alpha channel to store total min value for weight#0\n          maxMinData[ELEMENTCOUNT - 1] = Math.min(\n            maxMinData[ELEMENTCOUNT - 1],\n            aggregationData[cellIndex + 0]\n          );\n        } else {\n          // Use Alpha channel to store total counts.\n          if (needMin) {\n            minData[ELEMENTCOUNT - 1] += count;\n          }\n          if (needMax) {\n            maxData[ELEMENTCOUNT - 1] += count;\n          }\n        }\n      }\n    });\n  }\n  /* eslint-enable max-depth */\n\n  initCPUResults(opts) {\n    const weights = opts.weights || this.state.weights;\n    const {numCol, numRow} = this.state;\n    const results = {};\n    // setup results object\n    for (const id in weights) {\n      let {aggregationData, minData, maxData, maxMinData} = weights[id];\n      const {needMin, needMax} = weights[id];\n      const combineMaxMin = needMin && needMax && weights[id].combineMaxMin;\n\n      const aggregationSize = numCol * numRow * ELEMENTCOUNT;\n      aggregationData = getFloatArray(aggregationData, aggregationSize);\n      if (combineMaxMin) {\n        maxMinData = getFloatArray(maxMinData, ELEMENTCOUNT);\n        // RGB for max value\n        maxMinData.fill(-Infinity, 0, ELEMENTCOUNT - 1);\n        // Alpha for min value\n        maxMinData[ELEMENTCOUNT - 1] = Infinity;\n      } else {\n        // RGB for min/max values\n        // Alpha for total count\n        if (needMin) {\n          minData = getFloatArray(minData, ELEMENTCOUNT, Infinity);\n          minData[ELEMENTCOUNT - 1] = 0;\n        }\n        if (needMax) {\n          maxData = getFloatArray(maxData, ELEMENTCOUNT, -Infinity);\n          maxData[ELEMENTCOUNT - 1] = 0;\n        }\n      }\n      results[id] = Object.assign({}, weights[id], {\n        aggregationData,\n        minData,\n        maxData,\n        maxMinData\n      });\n    }\n    return results;\n  }\n\n  /* eslint-disable max-statements */\n  runAggregationOnCPU(opts) {\n    const {positions, cellSize, gridTransformMatrix, viewport, projectPoints} = opts;\n    let {weights} = opts;\n    const {numCol, numRow} = this.state;\n    const results = this.initCPUResults(opts);\n    // screen space or world space projection required\n    const gridTransformRequired = this.shouldTransformToGrid(opts);\n    let gridPositions;\n    const pos = [0, 0, 0];\n\n    log.assert(gridTransformRequired || opts.changeFlags.cellSizeChanged);\n\n    let posCount;\n    if (gridTransformRequired) {\n      posCount = positions.length / 2;\n      gridPositions = new Float64Array(positions.length);\n      this.setState({gridPositions});\n    } else {\n      gridPositions = this.state.gridPositions;\n      weights = this.state.weights;\n      posCount = gridPositions.length / 2;\n    }\n\n    const validCellIndices = new Set();\n    for (let posIndex = 0; posIndex < posCount; posIndex++) {\n      let x;\n      let y;\n      if (gridTransformRequired) {\n        pos[0] = positions[posIndex * 2];\n        pos[1] = positions[posIndex * 2 + 1];\n        if (projectPoints) {\n          [x, y] = viewport.project(pos);\n        } else {\n          [x, y] = worldToPixels(pos, gridTransformMatrix);\n        }\n        gridPositions[posIndex * 2] = x;\n        gridPositions[posIndex * 2 + 1] = y;\n      } else {\n        x = gridPositions[posIndex * 2];\n        y = gridPositions[posIndex * 2 + 1];\n      }\n\n      const colId = Math.floor(x / cellSize[0]);\n      const rowId = Math.floor(y / cellSize[1]);\n      if (colId >= 0 && colId < numCol && rowId >= 0 && rowId < numRow) {\n        const cellIndex = (colId + rowId * numCol) * ELEMENTCOUNT;\n        validCellIndices.add(cellIndex);\n        this.calculateAggregationData({weights, results, cellIndex, posIndex});\n      }\n    }\n\n    this.calculateMeanMaxMinData({validCellIndices, results, weights});\n\n    // Update buffer objects.\n    this.updateAggregationBuffers(opts, results);\n\n    this.setState({results});\n    return results;\n  }\n  /* eslint-disable max-statements */\n\n  _uploadResultsToGPU({gl, bufferName, textureName, id, data, result}) {\n    const {resources} = this.state;\n    const resourceName = `cpu-result-${id}-${bufferName}`;\n    result[bufferName] = result[bufferName] || resources[resourceName];\n    if (result[bufferName]) {\n      result[bufferName].setData({data});\n    } else {\n      // save resource for garbage collection\n      resources[resourceName] = new Buffer(gl, data);\n      result[bufferName] = resources[resourceName];\n    }\n\n    // Upload result to a texture\n    if (textureName) {\n      const texture = this._getMinMaxTexture(`${id}-textureName`);\n      texture.setImageData({data});\n      result[textureName] = texture;\n    }\n  }\n\n  updateAggregationBuffers(opts, results) {\n    if (!opts.createBufferObjects) {\n      return;\n    }\n    const weights = opts.weights || this.state.weights;\n    for (const id in results) {\n      const {aggregationData, minData, maxData, maxMinData} = results[id];\n      const {needMin, needMax} = weights[id];\n      const combineMaxMin = needMin && needMax && weights[id].combineMaxMin;\n      this._uploadResultsToGPU({\n        gl: this.gl,\n        bufferName: 'aggregationBuffer',\n        id,\n        data: aggregationData,\n        result: results[id]\n      });\n      if (combineMaxMin) {\n        this._uploadResultsToGPU({\n          gl: this.gl,\n          bufferName: 'maxMinBuffer',\n          textureName: 'maxMinTexture',\n          id,\n          data: maxMinData,\n          result: results[id]\n        });\n      } else {\n        if (needMin) {\n          this._uploadResultsToGPU({\n            gl: this.gl,\n            bufferName: 'minBuffer',\n            textureName: 'minTexture',\n            id,\n            data: minData,\n            result: results[id]\n          });\n        }\n        if (needMax) {\n          this._uploadResultsToGPU({\n            gl: this.gl,\n            bufferName: 'maxBuffer',\n            textureName: 'maxTexture',\n            id,\n            data: maxData,\n            result: results[id]\n          });\n        }\n      }\n    }\n  }\n\n  // GPU Aggregation methods\n\n  getAggregateData(opts) {\n    const results = {};\n    const {\n      textures,\n      framebuffers,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      weights,\n      resources\n    } = this.state;\n\n    for (const id in weights) {\n      results[id] = {};\n      const {needMin, needMax, combineMaxMin} = weights[id];\n      results[id].aggregationTexture = textures[id];\n      results[id].aggregationBuffer = readPixelsToBuffer(framebuffers[id], {\n        target: weights[id].aggregationBuffer, // update if a buffer is provided\n        sourceType: GL.FLOAT\n      });\n      if (needMin && needMax && combineMaxMin) {\n        results[id].maxMinBuffer = readPixelsToBuffer(maxMinFramebuffers[id], {\n          target: weights[id].maxMinBuffer, // update if a buffer is provided\n          sourceType: GL.FLOAT\n        });\n        results[id].maxMinTexture = resources[`${id}-maxMinTexture`];\n      } else {\n        if (needMin) {\n          results[id].minBuffer = readPixelsToBuffer(minFramebuffers[id], {\n            target: weights[id].minBuffer, // update if a buffer is provided\n            sourceType: GL.FLOAT\n          });\n          results[id].minTexture = resources[`${id}-minTexture`];\n        }\n        if (needMax) {\n          results[id].maxBuffer = readPixelsToBuffer(maxFramebuffers[id], {\n            target: weights[id].maxBuffer, // update if a buffer is provided\n            sourceType: GL.FLOAT\n          });\n          results[id].maxTexture = resources[`${id}-maxTexture`];\n        }\n      }\n    }\n    this.trackGPUResultBuffers(results, weights);\n    return results;\n  }\n\n  getAggregationModel(fp64 = false) {\n    const {gl} = this;\n    return new Model(gl, {\n      id: 'Gird-Aggregation-Model',\n      vs: fp64 ? AGGREGATE_TO_GRID_VS_FP64 : AGGREGATE_TO_GRID_VS,\n      fs: AGGREGATE_TO_GRID_FS,\n      modules: fp64 ? [project64] : ['project32'],\n      vertexCount: 0,\n      drawMode: GL.POINTS\n    });\n  }\n\n  getAllAggregationModel() {\n    const {gl} = this;\n    const {numCol, numRow} = this.state;\n    return new Model(gl, {\n      id: 'All-Aggregation-Model',\n      vs: AGGREGATE_ALL_VS_FP64,\n      fs: AGGREGATE_ALL_FS,\n      modules: [fp64ShaderModule],\n      vertexCount: 1,\n      drawMode: GL.POINTS,\n      isInstanced: true,\n      instanceCount: numCol * numRow,\n      attributes: {\n        position: [0, 0]\n      }\n    });\n  }\n\n  getMeanTransform(opts) {\n    if (this.meanTransform) {\n      this.meanTransform.update(opts);\n    } else {\n      this.meanTransform = new Transform(\n        this.gl,\n        Object.assign(\n          {},\n          {\n            vs: TRANSFORM_MEAN_VS,\n            _targetTextureVarying: 'meanValues'\n          },\n          opts\n        )\n      );\n    }\n    return this.meanTransform;\n  }\n\n  renderAggregateData(opts) {\n    const {cellSize, viewport, gridTransformMatrix, projectPoints} = opts;\n    const {\n      numCol,\n      numRow,\n      windowSize,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      weights\n    } = this.state;\n\n    const uProjectionMatrixFP64 = fp64ifyMatrix4(gridTransformMatrix);\n    const gridSize = [numCol, numRow];\n    const parameters = {\n      blend: true,\n      depthTest: false,\n      blendFunc: [GL.ONE, GL.ONE]\n    };\n    const moduleSettings = {viewport};\n    const uniforms = {\n      windowSize,\n      cellSize,\n      gridSize,\n      uProjectionMatrix: gridTransformMatrix,\n      uProjectionMatrixFP64,\n      projectPoints\n    };\n\n    for (const id in weights) {\n      const {needMin, needMax} = weights[id];\n      const combineMaxMin = needMin && needMax && weights[id].combineMaxMin;\n      this.renderToWeightsTexture({id, parameters, moduleSettings, uniforms, gridSize});\n      if (combineMaxMin) {\n        this.renderToMaxMinTexture({\n          id,\n          parameters: Object.assign({}, parameters, {blendEquation: MAX_MIN_BLEND_EQUATION}),\n          gridSize,\n          minOrMaxFb: maxMinFramebuffers[id],\n          clearParams: {clearColor: [0, 0, 0, MAX_32_BIT_FLOAT]},\n          combineMaxMin\n        });\n      } else {\n        if (needMin) {\n          this.renderToMaxMinTexture({\n            id,\n            parameters: Object.assign({}, parameters, {blendEquation: MIN_BLEND_EQUATION}),\n            gridSize,\n            minOrMaxFb: minFramebuffers[id],\n            clearParams: {clearColor: [MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, 0]},\n            combineMaxMin\n          });\n        }\n        if (needMax) {\n          this.renderToMaxMinTexture({\n            id,\n            parameters: Object.assign({}, parameters, {blendEquation: MAX_BLEND_EQUATION}),\n            gridSize,\n            minOrMaxFb: maxFramebuffers[id],\n            combineMaxMin\n          });\n        }\n      }\n    }\n  }\n\n  // render all aggregated grid-cells to generate Min, Max or MaxMin data texture\n  renderToMaxMinTexture(opts) {\n    const {id, parameters, gridSize, minOrMaxFb, combineMaxMin, clearParams = {}} = opts;\n    const {framebuffers} = this.state;\n    const {gl, allAggregationModel} = this;\n\n    minOrMaxFb.bind();\n    gl.viewport(0, 0, gridSize[0], gridSize[1]);\n    withParameters(gl, clearParams, () => {\n      gl.clear(gl.COLOR_BUFFER_BIT);\n    });\n    allAggregationModel.draw({\n      parameters,\n      uniforms: {\n        uSampler: framebuffers[id].texture,\n        gridSize,\n        combineMaxMin\n      }\n    });\n    minOrMaxFb.unbind();\n  }\n\n  // render all data points to aggregate weights\n  renderToWeightsTexture(opts) {\n    const {id, parameters, moduleSettings, uniforms, gridSize} = opts;\n    const {framebuffers, equations, weightAttributes, weights} = this.state;\n    const {gl, gridAggregationModel} = this;\n    const {operation} = weights[id];\n\n    framebuffers[id].bind();\n    gl.viewport(0, 0, gridSize[0], gridSize[1]);\n    const clearColor =\n      operation === AGGREGATION_OPERATION.MIN\n        ? [MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, 0]\n        : [0, 0, 0, 0];\n    withParameters(gl, {clearColor}, () => {\n      gl.clear(gl.COLOR_BUFFER_BIT);\n    });\n\n    const attributes = {weights: weightAttributes[id]};\n    gridAggregationModel.draw({\n      parameters: Object.assign({}, parameters, {blendEquation: equations[id]}),\n      moduleSettings,\n      uniforms,\n      attributes\n    });\n    framebuffers[id].unbind();\n\n    if (operation === AGGREGATION_OPERATION.MEAN) {\n      const {meanTextures, textures} = this.state;\n      const transformOptions = {\n        _sourceTextures: {aggregationValues: meanTextures[id]}, // contains aggregated data\n        _targetTexture: textures[id], // store mean values,\n        elementCount: textures[id].width * textures[id].height\n      };\n      const meanTransform = this.getMeanTransform(transformOptions);\n      meanTransform.run({\n        parameters: {\n          blend: false,\n          depthTest: false\n        }\n      });\n\n      // update framebuffer with mean results so readPixelsToBuffer returns mean values\n      framebuffers[id].attach({[GL.COLOR_ATTACHMENT0]: textures[id]});\n    }\n  }\n\n  runAggregationOnGPU(opts) {\n    this.updateModels(opts);\n    this.setupFramebuffers(opts);\n    this.renderAggregateData(opts);\n    const results = this.getAggregateData(opts);\n    this.setState({results});\n    return results;\n  }\n\n  // set up framebuffer for each weight\n  /* eslint-disable complexity, max-depth */\n  setupFramebuffers(opts) {\n    const {\n      numCol,\n      numRow,\n      textures,\n      framebuffers,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      meanTextures,\n      equations,\n      weights\n    } = this.state;\n    const framebufferSize = {width: numCol, height: numRow};\n    for (const id in weights) {\n      const {needMin, needMax, combineMaxMin, operation} = weights[id];\n      textures[id] =\n        weights[id].aggregationTexture ||\n        textures[id] ||\n        getFloatTexture(this.gl, {id: `${id}-texture`, width: numCol, height: numRow});\n      textures[id].resize(framebufferSize);\n      let texture = textures[id];\n      if (operation === AGGREGATION_OPERATION.MEAN) {\n        // For MEAN, we first aggregatet into a temp texture\n        meanTextures[id] =\n          meanTextures[id] ||\n          getFloatTexture(this.gl, {id: `${id}-mean-texture`, width: numCol, height: numRow});\n        meanTextures[id].resize(framebufferSize);\n        texture = meanTextures[id];\n      }\n      if (framebuffers[id]) {\n        framebuffers[id].attach({[GL.COLOR_ATTACHMENT0]: texture});\n      } else {\n        framebuffers[id] = getFramebuffer(this.gl, {\n          id: `${id}-fb`,\n          width: numCol,\n          height: numRow,\n          texture\n        });\n      }\n      framebuffers[id].resize(framebufferSize);\n      equations[id] = EQUATION_MAP[operation];\n      // For min/max framebuffers will use default size 1X1\n      if (needMin || needMax) {\n        if (needMin && needMax && combineMaxMin) {\n          if (!maxMinFramebuffers[id]) {\n            texture = this._getMinMaxTexture(`${id}-maxMinTexture`);\n            maxMinFramebuffers[id] = getFramebuffer(this.gl, {id: `${id}-maxMinFb`, texture});\n          }\n        } else {\n          if (needMin) {\n            if (!minFramebuffers[id]) {\n              texture = this._getMinMaxTexture(`${id}-minTexture`);\n              minFramebuffers[id] = getFramebuffer(this.gl, {\n                id: `${id}-minFb`,\n                texture\n              });\n            }\n          }\n          if (needMax) {\n            if (!maxFramebuffers[id]) {\n              texture = this._getMinMaxTexture(`${id}-maxTexture`);\n              maxFramebuffers[id] = getFramebuffer(this.gl, {\n                id: `${id}-maxFb`,\n                texture\n              });\n            }\n          }\n        }\n      }\n    }\n  }\n  /* eslint-enable complexity, max-depth */\n\n  _getMinMaxTexture(name) {\n    const {resources} = this.state;\n    if (!resources[name]) {\n      resources[name] = getFloatTexture(this.gl, {id: `resourceName`});\n    }\n    return resources[name];\n  }\n\n  setupModels(fp64 = false) {\n    if (this.gridAggregationModel) {\n      this.gridAggregationModel.delete();\n    }\n    this.gridAggregationModel = this.getAggregationModel(fp64);\n    if (!this.allAggregationModel) {\n      // Model doesn't have to change when fp64 flag changes\n      this.allAggregationModel = this.getAllAggregationModel();\n    }\n  }\n\n  // set up buffers for all weights\n  setupWeightAttributes(opts) {\n    const {weightAttributes, vertexCount, weights, resources} = this.state;\n    for (const id in weights) {\n      const {values} = weights[id];\n      // values can be Array, Float32Array or Buffer\n      if (Array.isArray(values) || values.constructor === Float32Array) {\n        log.assert(values.length / 3 === vertexCount);\n        const typedArray = Array.isArray(values) ? new Float32Array(values) : values;\n        if (weightAttributes[id] instanceof Buffer) {\n          weightAttributes[id].setData(typedArray);\n        } else {\n          resources[`${id}-buffer`] = new Buffer(this.gl, typedArray);\n          weightAttributes[id] = resources[`${id}-buffer`];\n        }\n      } else {\n        // log.assert((values instanceof Attribute) || (values instanceof Buffer));\n        log.assert(values instanceof Buffer);\n        weightAttributes[id] = values;\n      }\n    }\n  }\n\n  // GPU Aggregation results are provided in Buffers, if new Buffer objects are created track them for later deletion.\n  /* eslint-disable max-depth */\n  trackGPUResultBuffers(results, weights) {\n    const {resources} = this.state;\n    for (const id in results) {\n      if (results[id]) {\n        for (const bufferName of BUFFER_NAMES) {\n          if (results[id][bufferName] && weights[id][bufferName] !== results[id][bufferName]) {\n            // No result buffer is provided in weights object, `readPixelsToBuffer` has created a new Buffer object\n            // collect the new buffer for garabge collection\n            const name = `gpu-result-${id}-${bufferName}`;\n            if (resources[name]) {\n              resources[name].delete();\n            }\n            resources[name] = results[id][bufferName];\n          }\n        }\n      }\n    }\n  }\n  /* eslint-enable max-depth */\n\n  /* eslint-disable max-statements */\n  updateModels(opts) {\n    const {gl} = this;\n    const {positions, positions64xyLow, changeFlags} = opts;\n    const {numCol, numRow} = this.state;\n    const aggregationModelAttributes = {};\n    let modelDirty = false;\n\n    if (opts.fp64 !== this.state.fp64) {\n      this.setupModels(opts.fp64);\n      this.setState({fp64: opts.fp64});\n      modelDirty = true;\n    }\n\n    if (changeFlags.dataChanged || !this.state.positionsBuffer) {\n      let {positionsBuffer, positions64xyLowBuffer} = this.state;\n      if (positionsBuffer) {\n        positionsBuffer.delete();\n      }\n      if (positions64xyLowBuffer) {\n        positions64xyLowBuffer.delete();\n      }\n      const vertexCount = positions.length / 2;\n      positionsBuffer = new Buffer(gl, new Float32Array(positions));\n      positions64xyLowBuffer = new Buffer(gl, {\n        data: new Float32Array(positions64xyLow),\n        accessor: {size: 2}\n      });\n      this.setState({positionsBuffer, positions64xyLowBuffer, vertexCount});\n\n      this.setupWeightAttributes(opts);\n      modelDirty = true;\n    }\n\n    if (modelDirty) {\n      const {vertexCount, positionsBuffer, positions64xyLowBuffer} = this.state;\n      aggregationModelAttributes.positions = positionsBuffer;\n      if (opts.fp64) {\n        aggregationModelAttributes.positions64xyLow = positions64xyLowBuffer;\n      }\n      this.gridAggregationModel.setVertexCount(vertexCount);\n      this.gridAggregationModel.setAttributes(aggregationModelAttributes);\n    }\n\n    if (changeFlags.cellSizeChanged || changeFlags.viewportChanged) {\n      this.allAggregationModel.setInstanceCount(numCol * numRow);\n    }\n  }\n  /* eslint-enable max-statements */\n}\n"],"file":"gpu-grid-aggregator.js"}