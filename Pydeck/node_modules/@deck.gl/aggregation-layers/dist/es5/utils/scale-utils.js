"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.linearScale = linearScale;
exports.quantizeScale = quantizeScale;
exports.getScale = getScale;
exports.getQuantizeScale = getQuantizeScale;
exports.getLinearScale = getLinearScale;
exports.getQuantileScale = getQuantileScale;
exports.getOrdinalScale = getOrdinalScale;

var _core = require("@deck.gl/core");

function linearScale(domain, range, value) {
  return (value - domain[0]) / (domain[1] - domain[0]) * (range[1] - range[0]) + range[0];
}

function quantizeScale(domain, range, value) {
  var domainRange = domain[1] - domain[0];

  if (domainRange <= 0) {
    _core.log.warn('quantizeScale: invalid domain, returning range[0]')();

    return range[0];
  }

  var step = domainRange / range.length;
  var idx = Math.floor((value - domain[0]) / step);
  var clampIdx = Math.max(Math.min(idx, range.length - 1), 0);
  return range[clampIdx];
}

function getScale(domain, range, scaleFunction) {
  function scale(value) {
    return scaleFunction(domain, range, value);
  }

  scale.domain = function () {
    return domain;
  };

  scale.range = function () {
    return range;
  };

  return scale;
}

function getQuantizeScale(domain, range) {
  return getScale(domain, range, quantizeScale);
}

function getLinearScale(domain, range) {
  return getScale(domain, range, linearScale);
}

function ascending(a, b) {
  return a - b;
}

function threshold(domain, fraction) {
  var domainLength = domain.length;

  if (fraction <= 0 || domainLength < 2) {
    return domain[0];
  }

  if (fraction >= 1) {
    return domain[domainLength - 1];
  }

  var domainFraction = (domainLength - 1) * fraction;
  var lowIndex = Math.floor(domainFraction);
  var low = domain[lowIndex];
  var high = domain[lowIndex + 1];
  return low + (high - low) * (domainFraction - lowIndex);
}

function bisectRight(a, x) {
  var lo = 0;
  var hi = a.length;

  while (lo < hi) {
    var mid = lo + hi >>> 1;

    if (ascending(a[mid], x) > 0) {
      hi = mid;
    } else {
      lo = mid + 1;
    }
  }

  return lo;
}

function quantileScale(thresholds, range, value) {
  return range[bisectRight(thresholds, value)];
}

function getQuantileScale(domain, range) {
  var sortedDomain = domain.sort(ascending);
  var i = 0;
  var n = Math.max(1, range.length);
  var thresholds = new Array(n - 1);

  while (++i < n) {
    thresholds[i - 1] = threshold(sortedDomain, i / n);
  }

  return function (value) {
    return quantileScale(thresholds, range, value);
  };
}

function ordinalScale(domain, domainMap, range, value) {
  var key = "".concat(value);
  var d = domainMap.get(key);

  if (d === undefined) {
    d = domain.push(value);
    domainMap.set(key, d);
  }

  return range[(d - 1) % range.length];
}

function getOrdinalScale(domain, range) {
  var domainMap = new Map();
  var uniqueDomain = [];
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = domain[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var d = _step.value;
      var key = "".concat(d);

      if (!domainMap.has(key)) {
        domainMap.set(key, uniqueDomain.push(d));
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return function (value) {
    return ordinalScale(uniqueDomain, domainMap, range, value);
  };
}
//# sourceMappingURL=scale-utils.js.map