{"version":3,"sources":["../../../src/utils/cpu-aggregator.js"],"names":["nop","dimensionSteps","defaultDimensions","key","accessor","pickingInfo","getBins","triggers","value","prop","updateTrigger","weight","aggregation","getDomain","lowerPercentile","upperPercentile","onSet","props","getScaleFunc","domain","range","scaleType","nullValue","defaultGetCellSize","cellSize","CPUAggregator","opts","state","layerData","dimensions","changeFlags","dimensionUpdaters","_getCellSize","getCellSize","_getAggregator","getAggregator","_addDimension","viewport","oldProps","updateGetValueFuncs","reprojectNeeded","needsReProjectPoints","dataChanged","getAggregatedData","dimensionChanges","getDimensionChanges","forEach","f","updateObject","Object","assign","setState","result","hexagons","data","aggregator","normalizeResult","getSortedBins","getValue","getValueChanged","needUpdateDimensionStep","setDimensionState","updateTriggersChanged","all","getPosition","dimension","getDimensionUpdaters","sortedBins","scaleFunc","updater","getDimensionSortedBins","getDimensionValueDomain","getDimensionScale","attributeAccessor","getSubLayerDimensionAttribute","dimensionStep","values","some","item","updaters","needUpdate","find","step","push","bind","length","_updateTriggers","updateTriggers","fromProp","Array","isArray","undefined","getQuantizeScale","getLinearScale","getQuantileScale","getOrdinalScale","dimensionUpdater","BinSorter","valueDomain","getValueRange","dimensionRange","dimensionDomain","getScaleFunction","getScaleFunctionByScaleType","cell","cv","binMap","index","isValueInDomain","accessors","info","isPicked","picked","object","binInfo","Boolean","dimensionKey","hasOwnProperty"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2018 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport BinSorter from './bin-sorter';\nimport {getQuantizeScale, getLinearScale, getQuantileScale, getOrdinalScale} from './scale-utils';\nimport {getValueFunc} from './aggregation-operation-utils';\n\nfunction nop() {}\n\nconst dimensionSteps = ['getBins', 'getDomain', 'getScaleFunc'];\nconst defaultDimensions = [\n  {\n    key: 'fillColor',\n    accessor: 'getFillColor',\n    pickingInfo: 'colorValue',\n    getBins: {\n      triggers: {\n        value: {\n          prop: 'getColorValue',\n          updateTrigger: 'getColorValue'\n        },\n        weight: {\n          prop: 'getColorWeight',\n          updateTrigger: 'getColorWeight'\n        },\n        aggregation: {\n          prop: 'colorAggregation'\n        }\n      }\n    },\n    getDomain: {\n      triggers: {\n        lowerPercentile: {\n          prop: 'lowerPercentile'\n        },\n        upperPercentile: {\n          prop: 'upperPercentile'\n        }\n      },\n      onSet: {\n        props: 'onSetColorDomain'\n      }\n    },\n    getScaleFunc: {\n      triggers: {\n        domain: {prop: 'colorDomain'},\n        range: {prop: 'colorRange'},\n        scaleType: {prop: 'colorScaleType'}\n      }\n    },\n    nullValue: [0, 0, 0, 0]\n  },\n  {\n    key: 'elevation',\n    accessor: 'getElevation',\n    pickingInfo: 'elevationValue',\n    getBins: {\n      triggers: {\n        value: {\n          prop: 'getElevationValue',\n          updateTrigger: 'getElevationValue'\n        },\n        weight: {\n          prop: 'getElevationWeight',\n          updateTrigger: 'getElevationWeight'\n        },\n        aggregation: {\n          prop: 'elevationAggregation'\n        }\n      }\n    },\n    getDomain: {\n      triggers: {\n        lowerPercentile: {\n          prop: 'elevationLowerPercentile'\n        },\n        upperPercentile: {\n          prop: 'elevationUpperPercentile'\n        }\n      },\n      onSet: {\n        props: 'onSetElevationDomain'\n      }\n    },\n    getScaleFunc: {\n      triggers: {\n        domain: {prop: 'elevationDomain'},\n        range: {prop: 'elevationRange'},\n        scaleType: {prop: 'elevationScaleType'}\n      }\n    },\n    nullValue: -1\n  }\n];\nconst defaultGetCellSize = props => props.cellSize;\nexport default class CPUAggregator {\n  constructor(opts) {\n    this.state = {\n      layerData: {},\n      dimensions: {\n        // color: {\n        //   getValue: null,\n        //   domain: null,\n        //   sortedBins: null,\n        //   scaleFunc: nop\n        // },\n        // elevation: {\n        //   getValue: null,\n        //   domain: null,\n        //   sortedBins: null,\n        //   scaleFunc: nop\n        // }\n      }\n    };\n    this.changeFlags = {};\n    this.dimensionUpdaters = {};\n\n    this._getCellSize = opts.getCellSize || defaultGetCellSize;\n    this._getAggregator = opts.getAggregator;\n    this._addDimension(opts.dimensions || defaultDimensions);\n  }\n\n  static defaultDimensions() {\n    return defaultDimensions;\n  }\n\n  updateState({oldProps, props, changeFlags}, viewport) {\n    this.updateGetValueFuncs(oldProps, props, changeFlags);\n    const reprojectNeeded = this.needsReProjectPoints(oldProps, props, changeFlags);\n\n    if (changeFlags.dataChanged || reprojectNeeded) {\n      // project data into hexagons, and get sortedColorBins\n      this.getAggregatedData(props, viewport);\n    } else {\n      const dimensionChanges = this.getDimensionChanges(oldProps, props, changeFlags) || [];\n      // this here is layer\n      dimensionChanges.forEach(f => typeof f === 'function' && f());\n    }\n\n    return this.state;\n  }\n\n  // Update private state\n  setState(updateObject) {\n    this.state = Object.assign({}, this.state, updateObject);\n  }\n\n  // Update private state.dimensions\n  setDimensionState(key, updateObject) {\n    this.setState({\n      dimensions: Object.assign({}, this.state.dimensions, {\n        [key]: Object.assign({}, this.state.dimensions[key], updateObject)\n      })\n    });\n  }\n\n  normalizeResult(result = {}) {\n    // support previous hexagonAggregator API\n    if (result.hexagons) {\n      return Object.assign({data: result.hexagons}, result);\n    } else if (result.layerData) {\n      return Object.assign({data: result.layerData}, result);\n    }\n\n    return result;\n  }\n\n  getAggregatedData(props, viewport) {\n    const aggregator = this._getAggregator(props);\n\n    // result should contain a data array and other props\n    // result = {data: [], ...other props}\n    const result = aggregator(props, viewport);\n    this.setState({\n      layerData: this.normalizeResult(result)\n    });\n    this.changeFlags = {\n      layerData: true\n    };\n    this.getSortedBins(props);\n  }\n\n  updateGetValueFuncs(oldProps, props, changeFlags) {\n    for (const key in this.dimensionUpdaters) {\n      const {value, weight, aggregation} = this.dimensionUpdaters[key].getBins.triggers;\n      let getValue = props[value.prop];\n      const getValueChanged = this.needUpdateDimensionStep(\n        this.dimensionUpdaters[key].getBins,\n        oldProps,\n        props,\n        changeFlags\n      );\n\n      if (getValueChanged && getValue === null) {\n        // If `getValue` is not provided from props, build it with aggregation and weight.\n        getValue = getValueFunc(props[aggregation.prop], props[weight.prop]);\n      }\n\n      if (getValue) {\n        this.setDimensionState(key, {getValue});\n      }\n    }\n  }\n\n  needsReProjectPoints(oldProps, props, changeFlags) {\n    return (\n      this._getCellSize(oldProps) !== this._getCellSize(props) ||\n      this._getAggregator(oldProps) !== this._getAggregator(props) ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPosition))\n    );\n  }\n\n  // Adds dimensions\n  addDimension(dimensions) {\n    this._addDimension(dimensions);\n  }\n\n  _addDimension(dimensions = []) {\n    dimensions.forEach(dimension => {\n      const {key} = dimension;\n      this.dimensionUpdaters[key] = this.getDimensionUpdaters(dimension);\n      this.state.dimensions[key] = {\n        getValue: null,\n        domain: null,\n        sortedBins: null,\n        scaleFunc: nop\n      };\n    });\n  }\n\n  getDimensionUpdaters({key, accessor, pickingInfo, getBins, getDomain, getScaleFunc, nullValue}) {\n    return {\n      key,\n      accessor,\n      pickingInfo,\n      getBins: Object.assign({updater: this.getDimensionSortedBins}, getBins),\n      getDomain: Object.assign({updater: this.getDimensionValueDomain}, getDomain),\n      getScaleFunc: Object.assign({updater: this.getDimensionScale}, getScaleFunc),\n      attributeAccessor: this.getSubLayerDimensionAttribute(key, nullValue)\n    };\n  }\n\n  needUpdateDimensionStep(dimensionStep, oldProps, props, changeFlags) {\n    // whether need to update current dimension step\n    // dimension step is the value, domain, scaleFunction of each dimension\n    // each step is an object with properties links to layer prop and whether the prop is\n    // controlled by updateTriggers\n    // getBins: {\n    //   value: {\n    //     prop: 'getElevationValue',\n    //     updateTrigger: 'getElevationValue'\n    //   },\n    //   weight: {\n    //     prop: 'getElevationWeight',\n    //     updateTrigger: 'getElevationWeight'\n    //   },\n    //   aggregation: {\n    //     prop: 'elevationAggregation'\n    //   }\n    // }\n    return Object.values(dimensionStep.triggers).some(item => {\n      if (item.updateTrigger) {\n        // check based on updateTriggers change first\n        return (\n          changeFlags.updateTriggersChanged &&\n          (changeFlags.updateTriggersChanged.all ||\n            changeFlags.updateTriggersChanged[item.updateTrigger])\n        );\n      }\n      // fallback to direct comparison\n      return oldProps[item.prop] !== props[item.prop];\n    });\n  }\n\n  getDimensionChanges(oldProps, props, changeFlags) {\n    // const {dimensionUpdaters} = this.state;\n    const updaters = [];\n\n    // get dimension to be updated\n    for (const key in this.dimensionUpdaters) {\n      // return the first triggered updater for each dimension\n      const needUpdate = dimensionSteps.find(step =>\n        this.needUpdateDimensionStep(\n          this.dimensionUpdaters[key][step],\n          oldProps,\n          props,\n          changeFlags\n        )\n      );\n\n      if (needUpdate) {\n        updaters.push(\n          this.dimensionUpdaters[key][needUpdate].updater.bind(\n            this,\n            props,\n            this.dimensionUpdaters[key]\n          )\n        );\n      }\n    }\n\n    return updaters.length ? updaters : null;\n  }\n\n  getUpdateTriggers(props) {\n    const _updateTriggers = props.updateTriggers || {};\n    const updateTriggers = {};\n\n    for (const key in this.dimensionUpdaters) {\n      const {accessor} = this.dimensionUpdaters[key];\n      // fold dimension triggers into each accessor\n      updateTriggers[accessor] = {};\n\n      dimensionSteps.forEach(step => {\n        Object.values(this.dimensionUpdaters[key][step].triggers).forEach(\n          ({prop, updateTrigger}) => {\n            if (updateTrigger) {\n              // if prop is based on updateTrigger e.g. getColorValue, getColorWeight\n              // and updateTriggers is passed in from layer prop\n              // fold the updateTriggers into accessor\n              const fromProp = _updateTriggers[updateTrigger];\n              if (typeof fromProp === 'object' && !Array.isArray(fromProp)) {\n                // if updateTrigger is an object spread it\n                Object.assign(updateTriggers[accessor], fromProp);\n              } else if (fromProp !== undefined) {\n                updateTriggers[accessor][prop] = fromProp;\n              }\n            } else {\n              // if prop is not based on updateTrigger\n              updateTriggers[accessor][prop] = props[prop];\n            }\n          }\n        );\n      });\n    }\n\n    return updateTriggers;\n  }\n\n  getScaleFunctionByScaleType(scaleType) {\n    switch (scaleType) {\n      case 'quantize':\n        return getQuantizeScale;\n      case 'linear':\n        return getLinearScale;\n      case 'quantile':\n        return getQuantileScale;\n      case 'ordinal':\n        return getOrdinalScale;\n\n      default:\n        return getQuantizeScale;\n    }\n  }\n\n  getSortedBins(props) {\n    for (const key in this.dimensionUpdaters) {\n      this.getDimensionSortedBins(props, this.dimensionUpdaters[key]);\n    }\n  }\n\n  getDimensionSortedBins(props, dimensionUpdater) {\n    // const {getColorValue} = this.state;\n    const {key} = dimensionUpdater;\n    const {getValue} = this.state.dimensions[key];\n\n    const sortedBins = new BinSorter(this.state.layerData.data || [], getValue);\n    this.setDimensionState(key, {sortedBins});\n    this.getDimensionValueDomain(props, dimensionUpdater);\n  }\n\n  getDimensionValueDomain(props, dimensionUpdater) {\n    const {getDomain, key} = dimensionUpdater;\n    const {\n      triggers: {lowerPercentile, upperPercentile},\n      onSet\n    } = getDomain;\n    const valueDomain = this.state.dimensions[key].sortedBins.getValueRange([\n      props[lowerPercentile.prop],\n      props[upperPercentile.prop]\n    ]);\n\n    if (typeof onSet === 'object' && typeof props[onSet.props] === 'function') {\n      props[onSet.props](valueDomain);\n    }\n\n    this.setDimensionState(key, {valueDomain});\n    this.getDimensionScale(props, dimensionUpdater);\n  }\n\n  getDimensionScale(props, dimensionUpdater) {\n    const {key, getScaleFunc} = dimensionUpdater;\n    const {domain, range, scaleType} = getScaleFunc.triggers;\n    // const {colorRange} = key;\n    const dimensionRange = props[range.prop];\n    const dimensionDomain = props[domain.prop] || this.state.dimensions[key].valueDomain;\n    const getScaleFunction = this.getScaleFunctionByScaleType(props[scaleType.prop]);\n    const scaleFunc = getScaleFunction(dimensionDomain, dimensionRange);\n\n    this.setDimensionState(key, {scaleFunc});\n  }\n\n  getSubLayerDimensionAttribute(key, nullValue) {\n    return cell => {\n      const {sortedBins, scaleFunc} = this.state.dimensions[key];\n\n      const cv = sortedBins.binMap[cell.index] && sortedBins.binMap[cell.index].value;\n      const domain = scaleFunc.domain();\n\n      const isValueInDomain = cv >= domain[0] && cv <= domain[domain.length - 1];\n\n      // if cell value is outside domain, set alpha to 0\n      return isValueInDomain ? scaleFunc(cv) : nullValue;\n    };\n  }\n\n  getSubLayerAccessors(props) {\n    const accessors = {};\n    for (const key in this.dimensionUpdaters) {\n      const {accessor} = this.dimensionUpdaters[key];\n      accessors[accessor] = this.getSubLayerDimensionAttribute(props, key);\n    }\n\n    return accessors;\n  }\n\n  getPickingInfo({info}) {\n    const isPicked = info.picked && info.index > -1;\n    let object = null;\n\n    if (isPicked) {\n      // const {sortedColorBins, sortedElevationBins} = this.state;\n\n      const cell = this.state.layerData.data[info.index];\n\n      const binInfo = {};\n      for (const key in this.dimensionUpdaters) {\n        const {pickingInfo} = this.dimensionUpdaters[key];\n        const {sortedBins} = this.state.dimensions[key];\n        const value = sortedBins.binMap[cell.index] && sortedBins.binMap[cell.index].value;\n        binInfo[pickingInfo] = value;\n      }\n\n      object = Object.assign(binInfo, cell);\n    }\n\n    // add bin colorValue and elevationValue to info\n    return Object.assign(info, {\n      picked: Boolean(object),\n      // override object with picked cell\n      object\n    });\n  }\n\n  getAccessor(dimensionKey) {\n    if (!this.dimensionUpdaters.hasOwnProperty(dimensionKey)) {\n      return nop;\n    }\n    return this.dimensionUpdaters[dimensionKey].attributeAccessor;\n  }\n}\n"],"file":"cpu-aggregator.js"}