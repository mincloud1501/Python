"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _core = require("@luma.gl/core");

var _core2 = require("@deck.gl/core");

var _layers = require("@deck.gl/layers");

var _colorUtils = require("../utils/color-utils");

var _hexagonAggregator = require("./hexagon-aggregator");

var _cpuAggregator = _interopRequireDefault(require("../utils/cpu-aggregator"));

function nop() {}

var defaultMaterial = new _core.PhongMaterial();
var defaultProps = {
  colorDomain: null,
  colorRange: _colorUtils.defaultColorRange,
  getColorValue: {
    type: 'accessor',
    value: null
  },
  getColorWeight: {
    type: 'accessor',
    value: function value(x) {
      return 1;
    }
  },
  colorAggregation: 'SUM',
  lowerPercentile: {
    type: 'number',
    value: 0,
    min: 0,
    max: 100
  },
  upperPercentile: {
    type: 'number',
    value: 100,
    min: 0,
    max: 100
  },
  colorScaleType: 'quantize',
  onSetColorDomain: nop,
  elevationDomain: null,
  elevationRange: [0, 1000],
  getElevationValue: {
    type: 'accessor',
    value: null
  },
  getElevationWeight: {
    type: 'accessor',
    value: function value(x) {
      return 1;
    }
  },
  elevationAggregation: 'SUM',
  elevationLowerPercentile: {
    type: 'number',
    value: 0,
    min: 0,
    max: 100
  },
  elevationUpperPercentile: {
    type: 'number',
    value: 100,
    min: 0,
    max: 100
  },
  elevationScale: {
    type: 'number',
    min: 0,
    value: 1
  },
  elevationScaleType: 'linear',
  onSetElevationDomain: nop,
  radius: {
    type: 'number',
    value: 1000,
    min: 1
  },
  coverage: {
    type: 'number',
    min: 0,
    max: 1,
    value: 1
  },
  extruded: false,
  hexagonAggregator: _hexagonAggregator.pointToHexbin,
  getPosition: {
    type: 'accessor',
    value: function value(x) {
      return x.position;
    }
  },
  material: defaultMaterial
};

var HexagonLayer = function (_CompositeLayer) {
  (0, _inherits2["default"])(HexagonLayer, _CompositeLayer);

  function HexagonLayer() {
    (0, _classCallCheck2["default"])(this, HexagonLayer);
    return (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(HexagonLayer).apply(this, arguments));
  }

  (0, _createClass2["default"])(HexagonLayer, [{
    key: "initializeState",
    value: function initializeState() {
      var cpuAggregator = new _cpuAggregator["default"]({
        getAggregator: function getAggregator(props) {
          return props.hexagonAggregator;
        },
        getCellSize: function getCellSize(props) {
          return props.radius;
        }
      });
      this.state = {
        cpuAggregator: cpuAggregator,
        aggregatorState: cpuAggregator.state
      };
    }
  }, {
    key: "updateState",
    value: function updateState(_ref) {
      var oldProps = _ref.oldProps,
          props = _ref.props,
          changeFlags = _ref.changeFlags;
      var cpuAggregator = this.state.cpuAggregator;
      var oldLayerData = cpuAggregator.state.layerData;
      this.setState({
        aggregatorState: cpuAggregator.updateState({
          oldProps: oldProps,
          props: props,
          changeFlags: changeFlags
        }, this.context.viewport)
      });

      if (oldLayerData !== cpuAggregator.state.layerData) {
        var hexagonVertices = cpuAggregator.state.layerData.hexagonVertices;
        this.updateRadiusAngle(hexagonVertices);
      }
    }
  }, {
    key: "updateRadiusAngle",
    value: function updateRadiusAngle(vertices) {
      var radius = this.props.radius;
      var angle = 90;

      if (Array.isArray(vertices)) {
        if (vertices.length < 6) {
          _core2.log.error('HexagonCellLayer: hexagonVertices needs to be an array of 6 points')();
        }

        var vertex0 = vertices[0];
        var vertex3 = vertices[3];
        var viewport = this.context.viewport;

        var _viewport$getDistance = viewport.getDistanceScales(),
            pixelsPerMeter = _viewport$getDistance.pixelsPerMeter;

        var spaceCoord0 = this.projectFlat(vertex0);
        var spaceCoord3 = this.projectFlat(vertex3);
        var dx = spaceCoord0[0] - spaceCoord3[0];
        var dy = spaceCoord0[1] - spaceCoord3[1];
        var dxy = Math.sqrt(dx * dx + dy * dy);
        angle = Math.acos(dx / dxy) * -Math.sign(dy) / Math.PI * 180 + 90;
        radius = dxy / 2 / pixelsPerMeter[0];
      }

      this.setState({
        angle: angle,
        radius: radius
      });
    }
  }, {
    key: "getPickingInfo",
    value: function getPickingInfo(_ref2) {
      var info = _ref2.info;
      return this.state.cpuAggregator.getPickingInfo({
        info: info
      });
    }
  }, {
    key: "_onGetSublayerColor",
    value: function _onGetSublayerColor(cell) {
      return this.state.cpuAggregator.getAccessor('fillColor')(cell);
    }
  }, {
    key: "_onGetSublayerElevation",
    value: function _onGetSublayerElevation(cell) {
      return this.state.cpuAggregator.getAccessor('elevation')(cell);
    }
  }, {
    key: "_getSublayerUpdateTriggers",
    value: function _getSublayerUpdateTriggers() {
      return this.state.cpuAggregator.getUpdateTriggers(this.props);
    }
  }, {
    key: "renderLayers",
    value: function renderLayers() {
      var _this$props = this.props,
          elevationScale = _this$props.elevationScale,
          extruded = _this$props.extruded,
          coverage = _this$props.coverage,
          material = _this$props.material,
          transitions = _this$props.transitions;
      var _this$state = this.state,
          angle = _this$state.angle,
          radius = _this$state.radius,
          cpuAggregator = _this$state.cpuAggregator;
      var SubLayerClass = this.getSubLayerClass('hexagon-cell', _layers.ColumnLayer);

      var updateTriggers = this._getSublayerUpdateTriggers();

      return new SubLayerClass({
        radius: radius,
        diskResolution: 6,
        elevationScale: elevationScale,
        angle: angle,
        extruded: extruded,
        coverage: coverage,
        material: material,
        getFillColor: this._onGetSublayerColor.bind(this),
        getElevation: this._onGetSublayerElevation.bind(this),
        transitions: transitions && {
          getFillColor: transitions.getColorValue || transitions.getColorWeight,
          getElevation: transitions.getElevationValue || transitions.getElevationWeight
        }
      }, this.getSubLayerProps({
        id: 'hexagon-cell',
        updateTriggers: updateTriggers
      }), {
        data: cpuAggregator.state.layerData.data
      });
    }
  }]);
  return HexagonLayer;
}(_core2.CompositeLayer);

exports["default"] = HexagonLayer;
HexagonLayer.layerName = 'HexagonLayer';
HexagonLayer.defaultProps = defaultProps;
//# sourceMappingURL=hexagon-layer.js.map