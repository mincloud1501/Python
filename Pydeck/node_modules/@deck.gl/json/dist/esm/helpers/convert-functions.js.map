{"version":3,"sources":["../../../src/helpers/convert-functions.js"],"names":["parseExpressionString","getPropTypes","isFunctionProp","convertFunctions","Class","props","configuration","propTypes","convertFunctionsUsingPropTypes","replacedProps","propName","propValue","isFunction","isAccessor"],"mappings":"AAAA,OAAOA,qBAAP,MAAkC,2BAAlC;AACA,SAAQC,YAAR,EAAsBC,cAAtB,QAA2C,mBAA3C;AAIA,eAAe,SAASC,gBAAT,CAA0BC,KAA1B,EAAiCC,KAAjC,EAAwCC,aAAxC,EAAuD;AACpE,MAAMC,SAAS,GAAGN,YAAY,CAACG,KAAD,CAA9B;AAGA,SAAOI,8BAA8B,CAACH,KAAD,EAAQE,SAAR,EAAmBD,aAAnB,CAArC;AACD;;AAED,SAASE,8BAAT,CAAwCH,KAAxC,EAA+CE,SAA/C,EAA0DD,aAA1D,EAAyE;AACvE,MAAMG,aAAa,GAAG,EAAtB;;AACA,OAAK,IAAMC,QAAX,IAAuBL,KAAvB,EAA8B;AAC5B,QAAIM,SAAS,GAAGN,KAAK,CAACK,QAAD,CAArB;AAGA,QAAME,UAAU,GAAGV,cAAc,CAACK,SAAD,EAAYG,QAAZ,CAAjC;;AAGA,QAAIE,UAAU,IAAI,OAAOD,SAAP,KAAqB,QAAvC,EAAiD;AAC/C,UAAME,UAAU,GAAG,IAAnB;AACAF,MAAAA,SAAS,GAAGX,qBAAqB,CAACW,SAAD,EAAYL,aAAZ,EAA2BO,UAA3B,CAAjC;AACD;;AAGD,QAAIF,SAAJ,EAAe;AACbF,MAAAA,aAAa,CAACC,QAAD,CAAb,GAA0BC,SAA1B;AACD;AACF;;AAED,SAAOF,aAAP;AACD","sourcesContent":["import parseExpressionString from './parse-expression-string';\nimport {getPropTypes, isFunctionProp} from './deck-prop-types';\n\n// Try to determine if any props are function valued\n// and if so convert their string values to functions\nexport default function convertFunctions(Class, props, configuration) {\n  const propTypes = getPropTypes(Class);\n\n  // Use deck.gl prop types if available.\n  return convertFunctionsUsingPropTypes(props, propTypes, configuration);\n}\n\nfunction convertFunctionsUsingPropTypes(props, propTypes, configuration) {\n  const replacedProps = {};\n  for (const propName in props) {\n    let propValue = props[propName];\n\n    // Parse string valued expressions\n    const isFunction = isFunctionProp(propTypes, propName);\n\n    // Parse string as \"expression\", return equivalent JavaScript function\n    if (isFunction && typeof propValue === 'string') {\n      const isAccessor = true;\n      propValue = parseExpressionString(propValue, configuration, isAccessor);\n    }\n\n    // Invalid functions return null, show default value instead.\n    if (propValue) {\n      replacedProps[propName] = propValue;\n    }\n  }\n\n  return replacedProps;\n}\n"],"file":"convert-functions.js"}