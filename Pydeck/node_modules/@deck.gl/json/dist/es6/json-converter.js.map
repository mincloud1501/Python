{"version":3,"sources":["../../src/json-converter.js"],"names":["assert","JSONConfiguration","instantiateClass","parseJSON","isObject","value","JSONConverter","constructor","props","log","console","configuration","onJSONChange","json","convertedJson","setProps","finalize","convert","parsedJSON","convertJSON","postProcessConvertedJson","convertJson","convertJSONRecursively","key","Array","isArray","map","element","i","String","isClassInstance","convertClassInstance","convertPlainObject","convertString","typeKey","Boolean","type","result","string","constants","enumerations","convertFunction"],"mappings":"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","sourcesContent":["// Converts JSON to props (\"hydrating\" classes, resolving enums and functions etc).\n// Lightly processes `json` props, transform string values, and extract `views` and `layers`\n// See: https://github.com/uber/deck.gl/blob/master/dev-docs/RFCs/v6.1/json-layers-rfc.md\n//\n// NOTES:\n// * This is intended to provide minimal necessary processing required to support\n//   existing deck.gl props via JSON. This is not an implementation of alternate JSON schemas.\n// * Optionally, error checking could be applied, but ideally should leverage\n//   non-JSON specific mechanisms like prop types.\n\nimport assert from './utils/assert';\nimport JSONConfiguration from './json-configuration';\nimport {instantiateClass} from './helpers/instantiate-class';\nimport parseJSON from './helpers/parse-json';\n\nconst isObject = value => value && typeof value === 'object';\n\nexport default class JSONConverter {\n  constructor(props) {\n    this.log = console; // eslint-disable-line\n    this.configuration = {};\n    this.onJSONChange = () => {};\n    this.json = null;\n    this.convertedJson = null;\n    this.setProps(props);\n  }\n\n  finalize() {}\n\n  setProps(props) {\n    // HANDLE CONFIGURATION PROPS\n    if ('configuration' in props) {\n      // Accept object or `JSONConfiguration`\n      this.configuration =\n        props.configuration instanceof JSONConfiguration\n          ? props.configuration\n          : new JSONConfiguration(props.configuration);\n    }\n\n    if ('onJSONChange' in props) {\n      this.onJSONChange = props.onJSONChange;\n    }\n  }\n\n  convert(json) {\n    // Use shallow equality to ensure we only convert same json once\n    if (!json || json === this.json) {\n      return this.convertedJson;\n    }\n    // Save json for shallow diffing\n    this.json = json;\n\n    // Accept JSON strings by parsing them\n    const parsedJSON = parseJSON(json);\n\n    // Convert the JSON\n    let convertedJson = convertJSON(parsedJSON, this.configuration);\n\n    convertedJson = this.configuration.postProcessConvertedJson(convertedJson);\n\n    this.convertedJson = convertedJson;\n    return convertedJson;\n  }\n\n  // DEPRECATED: Backwards compatibility\n  convertJson(json) {\n    return this.convert(json);\n  }\n}\n\nfunction convertJSON(json, configuration) {\n  // Fixup configuration\n  configuration = new JSONConfiguration(configuration);\n  return convertJSONRecursively(json, '', configuration);\n}\n\n// Converts JSON to props (\"hydrating\" classes, resolving enums and functions etc).\nfunction convertJSONRecursively(json, key, configuration) {\n  if (Array.isArray(json)) {\n    return json.map((element, i) => convertJSONRecursively(element, String(i), configuration));\n  }\n\n  // If object.type is in configuration, instantitate\n  if (isClassInstance(json, configuration)) {\n    return convertClassInstance(json, configuration);\n  }\n\n  if (isObject(json)) {\n    return convertPlainObject(json, configuration);\n  }\n\n  // Single value\n  if (typeof json === 'string') {\n    return convertString(json, key, configuration);\n  }\n\n  // Return unchanged (number, boolean, ...)\n  return json;\n}\n\n// Returns true if an object has a `type` field\nfunction isClassInstance(json, configuration) {\n  const {typeKey} = configuration;\n  return isObject(json) && Boolean(json[typeKey]);\n}\n\nfunction convertClassInstance(json, configuration) {\n  // Extract the class type field\n  const {typeKey} = configuration;\n  const type = json[typeKey];\n\n  // Prepare a props object and ensure all values have been converted\n  let props = {...json};\n  delete props[typeKey];\n\n  props = convertPlainObject(props, configuration);\n\n  return instantiateClass(type, props, configuration);\n}\n\n// Plain JS object, convert each key and return.\nfunction convertPlainObject(json, configuration) {\n  assert(isObject(json));\n\n  const result = {};\n  for (const key in json) {\n    const value = json[key];\n    result[key] = convertJSONRecursively(value, key, configuration);\n  }\n  return result;\n}\n\n// Convert one string value in an object\n// TODO - hard to convert without type hint\n// TODO - Define a syntax for functions so we don't need to sniff types?\n// if (json.indexOf('@@: ') === 0)\n// if (typeHint === function)\n// parseExpressionString(propValue, configuration, isAccessor);\n\n// TODO - We could also support string syntax for hydrating other types, like regexps...\n// But no current use case\nfunction convertString(string, key, configuration) {\n  if (configuration.constants[string]) {\n    return configuration.constants[string];\n  }\n  if (configuration.enumerations[string]) {\n    // TODO - look up\n    return string;\n  }\n  if (configuration.convertFunction) {\n    return configuration.convertFunction(string, key, configuration);\n  }\n  return string;\n}\n"],"file":"json-converter.js"}