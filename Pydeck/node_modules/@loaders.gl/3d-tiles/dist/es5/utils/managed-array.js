"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assert = _interopRequireDefault(require("./assert"));

var ManagedArray = function () {
  function ManagedArray() {
    var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    (0, _classCallCheck2["default"])(this, ManagedArray);
    this._array = new Array(length);
    this._length = length;
  }

  (0, _createClass2["default"])(ManagedArray, [{
    key: "get",
    value: function get(index) {
      (0, _assert["default"])(index < this._array.length);
      return this._array[index];
    }
  }, {
    key: "set",
    value: function set(index, element) {
      (0, _assert["default"])(index >= 0);

      if (index >= this.length) {
        this.length = index + 1;
      }

      this._array[index] = element;
    }
  }, {
    key: "peek",
    value: function peek() {
      return this._array[this._length - 1];
    }
  }, {
    key: "push",
    value: function push(element) {
      var index = this.length++;
      this._array[index] = element;
    }
  }, {
    key: "pop",
    value: function pop() {
      return this._array[--this.length];
    }
  }, {
    key: "reserve",
    value: function reserve(length) {
      (0, _assert["default"])(length >= 0);

      if (length > this._array.length) {
        this._array.length = length;
      }
    }
  }, {
    key: "resize",
    value: function resize(length) {
      (0, _assert["default"])(length >= 0);
      this.length = length;
    }
  }, {
    key: "trim",
    value: function trim() {
      var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.length;
      this._array.length = length;
    }
  }, {
    key: "length",
    get: function get() {
      return this._length;
    },
    set: function set(length) {
      this._length = length;

      if (length > this._array.length) {
        this._array.length = length;
      }
    }
  }, {
    key: "values",
    get: function get() {
      return this._array;
    }
  }]);
  return ManagedArray;
}();

exports["default"] = ManagedArray;
//# sourceMappingURL=managed-array.js.map