"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _doublyLinkedListNode = _interopRequireDefault(require("../utils/doubly-linked-list-node"));

var defined = function defined(x) {
  return x !== undefined;
};

var DoublyLinkedList = function () {
  function DoublyLinkedList() {
    (0, _classCallCheck2["default"])(this, DoublyLinkedList);
    this.head = undefined;
    this.tail = undefined;
    this._length = 0;
  }

  (0, _createClass2["default"])(DoublyLinkedList, [{
    key: "add",
    value: function add(item) {
      var node = new _doublyLinkedListNode["default"](item, this.tail, undefined);

      if (defined(this.tail)) {
        this.tail.next = node;
        this.tail = node;
      } else {
        this.head = node;
        this.tail = node;
      }

      ++this._length;
      return node;
    }
  }, {
    key: "remove",
    value: function remove(node) {
      if (!defined(node)) {
        return;
      }

      if (defined(node.previous) && defined(node.next)) {
        node.previous.next = node.next;
        node.next.previous = node.previous;
      } else if (defined(node.previous)) {
        node.previous.next = undefined;
        this.tail = node.previous;
      } else if (defined(node.next)) {
        node.next.previous = undefined;
        this.head = node.next;
      } else {
        this.head = undefined;
        this.tail = undefined;
      }

      node.next = undefined;
      node.previous = undefined;
      --this._length;
    }
  }, {
    key: "splice",
    value: function splice(node, nextNode) {
      if (node === nextNode) {
        return;
      }

      this.remove(nextNode);
      var oldNodeNext = node.next;
      node.next = nextNode;

      if (this.tail === node) {
        this.tail = nextNode;
      } else {
        oldNodeNext.previous = nextNode;
      }

      nextNode.next = oldNodeNext;
      nextNode.previous = node;
    }
  }, {
    key: "length",
    get: function get() {
      return this._length;
    }
  }]);
  return DoublyLinkedList;
}();

exports["default"] = DoublyLinkedList;
//# sourceMappingURL=doubly-linked-list.js.map