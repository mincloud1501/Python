{"version":3,"sources":["../../../src/utils/managed-array.js"],"names":["ManagedArray","length","_array","Array","_length","index","element"],"mappings":";;;;;;;;;;;;;AAGA;;IAWqBA,Y;AACnB,0BAAwB;AAAA,QAAZC,MAAY,uEAAH,CAAG;AAAA;AACtB,SAAKC,MAAL,GAAc,IAAIC,KAAJ,CAAUF,MAAV,CAAd;AACA,SAAKG,OAAL,GAAeH,MAAf;AACD;;;;wBAoCGI,K,EAAO;AACT,8BAAOA,KAAK,GAAG,KAAKH,MAAL,CAAYD,MAA3B;AACA,aAAO,KAAKC,MAAL,CAAYG,KAAZ,CAAP;AACD;;;wBAQGA,K,EAAOC,O,EAAS;AAClB,8BAAOD,KAAK,IAAI,CAAhB;;AAEA,UAAIA,KAAK,IAAI,KAAKJ,MAAlB,EAA0B;AACxB,aAAKA,MAAL,GAAcI,KAAK,GAAG,CAAtB;AACD;;AACD,WAAKH,MAAL,CAAYG,KAAZ,IAAqBC,OAArB;AACD;;;2BAOM;AACL,aAAO,KAAKJ,MAAL,CAAY,KAAKE,OAAL,GAAe,CAA3B,CAAP;AACD;;;yBAOIE,O,EAAS;AACZ,UAAMD,KAAK,GAAG,KAAKJ,MAAL,EAAd;AACA,WAAKC,MAAL,CAAYG,KAAZ,IAAqBC,OAArB;AACD;;;0BAOK;AACJ,aAAO,KAAKJ,MAAL,CAAY,EAAE,KAAKD,MAAnB,CAAP;AACD;;;4BAOOA,M,EAAQ;AACd,8BAAOA,MAAM,IAAI,CAAjB;;AAEA,UAAIA,MAAM,GAAG,KAAKC,MAAL,CAAYD,MAAzB,EAAiC;AAC/B,aAAKC,MAAL,CAAYD,MAAZ,GAAqBA,MAArB;AACD;AACF;;;2BAOMA,M,EAAQ;AACb,8BAAOA,MAAM,IAAI,CAAjB;AAEA,WAAKA,MAAL,GAAcA,MAAd;AACD;;;2BAO0B;AAAA,UAAtBA,MAAsB,uEAAb,KAAKA,MAAQ;AACzB,WAAKC,MAAL,CAAYD,MAAZ,GAAqBA,MAArB;AACD;;;wBA1GY;AACX,aAAO,KAAKG,OAAZ;AACD,K;sBAEUH,M,EAAQ;AACjB,WAAKG,OAAL,GAAeH,MAAf;;AACA,UAAIA,MAAM,GAAG,KAAKC,MAAL,CAAYD,MAAzB,EAAiC;AAC/B,aAAKC,MAAL,CAAYD,MAAZ,GAAqBA,MAArB;AACD;AACF;;;wBASY;AACX,aAAO,KAAKC,MAAZ;AACD","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport assert from './assert';\n\n/**\n * A wrapper around arrays so that the internal length of the array can be manually managed.\n *\n * @alias ManagedArray\n * @constructor\n * @private\n *\n * @param {Number} [length=0] The initial length of the array.\n */\nexport default class ManagedArray {\n  constructor(length = 0) {\n    this._array = new Array(length);\n    this._length = length;\n  }\n\n  /**\n   * Gets or sets the length of the array.\n   * If the set length is greater than the length of the internal array, the internal array is resized.\n   *\n   * @memberof ManagedArray.prototype\n   * @type Number\n   */\n  get length() {\n    return this._length;\n  }\n\n  set length(length) {\n    this._length = length;\n    if (length > this._array.length) {\n      this._array.length = length;\n    }\n  }\n\n  /**\n   * Gets the internal array.\n   *\n   * @memberof ManagedArray.prototype\n   * @type Array\n   * @readonly\n   */\n  get values() {\n    return this._array;\n  }\n\n  /**\n   * Gets the element at an index.\n   *\n   * @param {Number} index The index to get.\n   */\n  get(index) {\n    assert(index < this._array.length);\n    return this._array[index];\n  }\n\n  /**\n   * Sets the element at an index. Resizes the array if index is greater than the length of the array.\n   *\n   * @param {Number} index The index to set.\n   * @param {*} element The element to set at index.\n   */\n  set(index, element) {\n    assert(index >= 0);\n\n    if (index >= this.length) {\n      this.length = index + 1;\n    }\n    this._array[index] = element;\n  }\n\n  /**\n   * Returns the last element in the array without modifying the array.\n   *\n   * @returns {*} The last element in the array.\n   */\n  peek() {\n    return this._array[this._length - 1];\n  }\n\n  /**\n   * Push an element into the array.\n   *\n   * @param {*} element The element to push.\n   */\n  push(element) {\n    const index = this.length++;\n    this._array[index] = element;\n  }\n\n  /**\n   * Pop an element from the array.\n   *\n   * @returns {*} The last element in the array.\n   */\n  pop() {\n    return this._array[--this.length];\n  }\n\n  /**\n   * Resize the internal array if length > _array.length.\n   *\n   * @param {Number} length The length.\n   */\n  reserve(length) {\n    assert(length >= 0);\n\n    if (length > this._array.length) {\n      this._array.length = length;\n    }\n  }\n\n  /**\n   * Resize the array.\n   *\n   * @param {Number} length The length.\n   */\n  resize(length) {\n    assert(length >= 0);\n\n    this.length = length;\n  }\n\n  /**\n   * Trim the internal array to the specified length. Defaults to the current length.\n   *\n   * @param {Number} [length] The length.\n   */\n  trim(length = this.length) {\n    this._array.length = length;\n  }\n}\n"],"file":"managed-array.js"}