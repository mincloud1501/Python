"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _math = require("math.gl");

var _geospatial = require("@math.gl/geospatial");

var _probe = require("probe.gl");

var _core = require("@loaders.gl/core");

var _assert = _interopRequireDefault(require("../utils/assert"));

var _requestScheduler = _interopRequireDefault(require("../request-utils/request-scheduler"));

var _transformUtils = require("./helpers/transform-utils");

var _tile3dHeader = _interopRequireDefault(require("./tile-3d-header"));

var _tileset3dTraverser = _interopRequireDefault(require("./tileset-3d-traverser"));

var _tileset3dCache = _interopRequireDefault(require("./tileset-3d-cache"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var TILES_TOTAL = 'Tiles In Tileset(s)';
var TILES_IN_MEMORY = 'Tiles In Memory';
var TILES_IN_VIEW = 'Tiles In View';
var TILES_RENDERABLE = 'Tiles To Render';
var TILES_LOADED = 'Tiles Loaded';
var TILES_LOADING = 'Tiles Loading';
var TILES_UNLOADED = 'Tiles Unloaded';
var TILES_LOAD_FAILED = 'Failed Tile Loads';
var POINTS_COUNT = 'Points';
var TILES_GPU_MEMORY = 'Tile Memory Use';
var WGS84_RADIUS_X = 6378137.0;
var WGS84_RADIUS_Y = 6378137.0;
var WGS84_RADIUS_Z = 6356752.3142451793;

function getZoom(boundingVolume) {
  var halfAxes = boundingVolume.halfAxes,
      radius = boundingVolume.radius,
      width = boundingVolume.width,
      height = boundingVolume.height;

  if (halfAxes) {
    var _halfAxes = (0, _slicedToArray2["default"])(halfAxes, 9),
        x = _halfAxes[0],
        y = _halfAxes[4],
        z = _halfAxes[8];

    var zoomX = Math.log2(WGS84_RADIUS_X / x / 2);
    var zoomY = Math.log2(WGS84_RADIUS_Y / y / 2);
    var zoomZ = Math.log2(WGS84_RADIUS_Z / z / 2);
    return (zoomX + zoomY + zoomZ) / 3;
  } else if (radius) {
    return Math.log2(WGS84_RADIUS_Z / radius);
  } else if (height && width) {
    var _zoomX = Math.log2(WGS84_RADIUS_X / width);

    var _zoomY = Math.log2(WGS84_RADIUS_Y / height);

    return (_zoomX + _zoomY) / 2;
  }

  return 18;
}

var DEFAULT_OPTIONS = {
  basePath: '',
  ellipsoid: _geospatial.Ellipsoid.WGS84,
  modelMatrix: new _math.Matrix4(),
  throttleRequests: false,
  maximumScreenSpaceError: 16,
  maximumMemoryUsage: 32,
  dynamicScreenSpaceError: false,
  dynamicScreenSpaceErrorDensity: 0.00278,
  dynamicScreenSpaceErrorFactor: 4.0,
  skipLevelOfDetail: false,
  baseScreenSpaceError: 1024,
  onTileLoad: function onTileLoad() {},
  onTileUnload: function onTileUnload() {},
  onTileLoadFail: function onTileLoadFail(tile, message, url) {
    return console.error("A 3D tile failed to load: ".concat(url, " ").concat(message));
  }
};

function getQueryParamString(queryParams) {
  var queryParamStrings = [];

  for (var _i = 0, _Object$keys = Object.keys(queryParams); _i < _Object$keys.length; _i++) {
    var key = _Object$keys[_i];
    queryParamStrings.push("".concat(key, "=").concat(queryParams[key]));
  }

  switch (queryParamStrings.length) {
    case 0:
      return '';

    case 1:
      return "?".concat(queryParamStrings[0]);

    default:
      return "?".concat(queryParamStrings.join('&'));
  }
}

var Tileset3D = function () {
  function Tileset3D(json, url) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    (0, _classCallCheck2["default"])(this, Tileset3D);
    (0, _assert["default"])(json);
    this.options = _objectSpread({}, DEFAULT_OPTIONS, {}, options);
    this.url = url;
    this.basePath = _core.path.dirname(url);
    this.modelMatrix = this.options.modelMatrix;
    this.stats = new _probe.Stats({
      id: url
    });

    this._initializeStats();

    this.gpuMemoryUsageInBytes = 0;
    this.geometricError = undefined;
    this.userData = {};
    this._queryParams = {};
    this._requestScheduler = new _requestScheduler["default"]({
      throttleRequests: this.options.throttleRequests
    });
    this._traverser = new _tileset3dTraverser["default"]();
    this._cache = new _tileset3dCache["default"]();
    this._processingQueue = [];
    this.selectedTiles = [];
    this._emptyTiles = [];
    this._requestedTiles = [];
    this._selectedTilesToStyle = [];
    this.asset = {};
    this.credits = {};
    this._root = undefined;
    this._properties = undefined;
    this._extensionsUsed = undefined;
    this._gltfUpAxis = undefined;
    this._loadTimestamp = undefined;
    this._timeSinceLoad = 0.0;
    this._updatedVisibilityFrame = 0;
    this._extras = undefined;
    this._allTilesAdditive = true;
    this._hasMixedContent = false;
    this._maximumScreenSpaceError = options.maximumScreenSpaceError;
    this._maximumMemoryUsage = options.maximumMemoryUsage;
    this._tilesLoaded = false;
    this._initialTilesLoaded = false;
    this._readyPromise = Promise.resolve();
    this._classificationType = this.options.classificationType;
    this._ellipsoid = this.options.ellipsoid;
    this._dynamicScreenSpaceErrorComputedDensity = 0.0;

    this._initializeTileSet(json, this.options);
  }

  (0, _createClass2["default"])(Tileset3D, [{
    key: "destroy",
    value: function destroy() {
      this._destroy();
    }
  }, {
    key: "getTileUrl",
    value: function getTileUrl(tilePath, basePath) {
      var isDataUrl = function isDataUrl(url) {
        return url.startsWith('data:');
      };

      return isDataUrl(tilePath) ? tilePath : "".concat(basePath || this.basePath, "/").concat(tilePath).concat(this.queryParams);
    }
  }, {
    key: "hasExtension",
    value: function hasExtension(extensionName) {
      return Boolean(this._extensionsUsed && this._extensionsUsed.indexOf(extensionName) > -1);
    }
  }, {
    key: "update",
    value: function update(frameState) {
      this._updatedVisibilityFrame++;

      this._cache.reset();

      this._traverser.traverse(this.root, frameState, this.options);

      Object.assign(this, this._traverser.result);
      var requestedTiles = this._requestedTiles;
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = requestedTiles[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var tile = _step.value;

          this._loadTile(tile);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      this._unloadTiles();

      var tilesRenderable = 0;
      var pointsRenderable = 0;
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = this.selectedTiles[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var _tile = _step2.value;

          if (_tile.contentAvailable) {
            tilesRenderable++;

            if (_tile.content.pointCount) {
              pointsRenderable += _tile.content.pointCount;
            }
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      this.stats.get(TILES_IN_VIEW).count = this.selectedTiles.length;
      this.stats.get(TILES_RENDERABLE).count = tilesRenderable;
      this.stats.get(POINTS_COUNT).count = pointsRenderable;
    }
  }, {
    key: "trimLoadedTiles",
    value: function trimLoadedTiles() {
      this._cache.trim();
    }
  }, {
    key: "addTileToCache",
    value: function addTileToCache(tile) {
      this._cache.add(this, tile, function (tileset, tileToAdd) {
        return tileset._addTileToCache(tileToAdd);
      });
    }
  }, {
    key: "_initializeTileSet",
    value: function _initializeTileSet(tilesetJson, options) {
      this.asset = tilesetJson.asset;

      if (!this.asset) {
        throw new Error('Tileset must have an asset property.');
      }

      if (this.asset.version !== '0.0' && this.asset.version !== '1.0') {
        throw new Error('The tileset must be 3D Tiles version 0.0 or 1.0.');
      }

      if ('tilesetVersion' in this.asset) {
        this._queryParams.v = this.asset.tilesetVersion;
      }

      this.credits = {
        attributions: options.attributions || []
      };
      this._properties = tilesetJson.properties;
      this.geometricError = tilesetJson.geometricError;
      this._extensionsUsed = tilesetJson.extensionsUsed;
      this._extras = tilesetJson.extras;
      this._root = this._initializeTileHeaders(tilesetJson, null, this.basePath);

      this._calculateViewProps();
    }
  }, {
    key: "_calculateViewProps",
    value: function _calculateViewProps() {
      var root = this._root;
      var center = root.boundingVolume.center;

      if (!center) {
        console.warn('center was not pre-calculated for the root tile');
        this.cartographicCenter = new _math.Vector3();
        this.zoom = 16;
        return;
      }

      this.cartographicCenter = _geospatial.Ellipsoid.WGS84.cartesianToCartographic(center, new _math.Vector3());
      this.zoom = getZoom(root.boundingVolume);
    }
  }, {
    key: "_initializeStats",
    value: function _initializeStats() {
      this.stats.get(TILES_TOTAL);
      this.stats.get(TILES_LOADING);
      this.stats.get(TILES_IN_MEMORY);
      this.stats.get(TILES_IN_VIEW);
      this.stats.get(TILES_RENDERABLE);
      this.stats.get(TILES_LOADED);
      this.stats.get(TILES_UNLOADED);
      this.stats.get(TILES_LOAD_FAILED);
      this.stats.get(POINTS_COUNT, 'memory');
      this.stats.get(TILES_GPU_MEMORY, 'memory');
    }
  }, {
    key: "_initializeTileHeaders",
    value: function _initializeTileHeaders(tilesetJson, parentTileHeader, basePath) {
      var rootTile = new _tile3dHeader["default"](this, tilesetJson.root, parentTileHeader, basePath);

      if (parentTileHeader) {
        parentTileHeader.children.push(rootTile);
        rootTile._depth = parentTileHeader._depth + 1;
      }

      var stack = [];
      stack.push(rootTile);

      while (stack.length > 0) {
        var tile = stack.pop();
        this.stats.get(TILES_TOTAL).incrementCount();
        var children = tile._header.children || [];
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
          for (var _iterator3 = children[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var childHeader = _step3.value;
            var childTile = new _tile3dHeader["default"](this, childHeader, tile, basePath);
            tile.children.push(childTile);
            childTile._depth = tile._depth + 1;
            stack.push(childTile);
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
              _iterator3["return"]();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }
      }

      return rootTile;
    }
  }, {
    key: "_destroyTileHeaders",
    value: function _destroyTileHeaders(parentTile) {
      this._destroySubtree(parentTile);
    }
  }, {
    key: "_loadTile",
    value: function () {
      var _loadTile2 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee(tile) {
        var loaded;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.stats.get(TILES_LOADING).incrementCount();
                _context.prev = 1;
                _context.next = 4;
                return tile.loadContent();

              case 4:
                loaded = _context.sent;
                _context.next = 13;
                break;

              case 7:
                _context.prev = 7;
                _context.t0 = _context["catch"](1);
                this.stats.get(TILES_LOADING).decrementCount();
                this.stats.get(TILES_LOAD_FAILED).incrementCount();
                this.options.onTileLoadFail(tile, _context.t0.message || _context.t0.toString(), tile.url);
                return _context.abrupt("return");

              case 13:
                this.stats.get(TILES_LOADING).decrementCount();

                if (loaded) {
                  _context.next = 16;
                  break;
                }

                return _context.abrupt("return");

              case 16:
                if (tile && tile._content) {
                  (0, _transformUtils.calculateTransformProps)(tile, tile._content);
                }

                this.options.onTileLoad(tile);

              case 18:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[1, 7]]);
      }));

      function _loadTile(_x) {
        return _loadTile2.apply(this, arguments);
      }

      return _loadTile;
    }()
  }, {
    key: "_addTileToCache",
    value: function _addTileToCache(tile) {
      this.stats.get(TILES_LOADED).incrementCount();
      this.stats.get(TILES_IN_MEMORY).incrementCount();
      this.gpuMemoryUsageInBytes += tile._content.byteLength || 0;
      this.stats.get(TILES_GPU_MEMORY).count = this.gpuMemoryUsageInBytes;
    }
  }, {
    key: "_unloadTile",
    value: function _unloadTile(tile) {
      this.stats.get(TILES_IN_MEMORY).decrementCount();
      this.stats.get(TILES_UNLOADED).incrementCount();
      this.gpuMemoryUsageInBytes -= tile._content.byteLength || 0;
      this.stats.get(TILES_GPU_MEMORY).count = this.gpuMemoryUsageInBytes;
      this.options.onTileUnload(tile);
      tile.unloadContent();
    }
  }, {
    key: "_unloadTiles",
    value: function _unloadTiles() {
      this._cache.unloadTiles(this, function (tileset, tile) {
        return tileset._unloadTile(tile);
      });
    }
  }, {
    key: "_destroy",
    value: function _destroy() {
      var stack = [];

      if (this._root) {
        stack.push(this._root);
      }

      while (stack.length > 0) {
        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = undefined;

        try {
          for (var _iterator4 = tile.children[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
            var child = _step4.value;
            stack.push(child);
          }
        } catch (err) {
          _didIteratorError4 = true;
          _iteratorError4 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
              _iterator4["return"]();
            }
          } finally {
            if (_didIteratorError4) {
              throw _iteratorError4;
            }
          }
        }

        var tile = stack.pop();
        tile.destroy();
      }

      this._root = null;
    }
  }, {
    key: "_destroySubtree",
    value: function _destroySubtree(tile) {
      var root = tile;
      var stack = [];
      stack.push(root);

      while (stack.length > 0) {
        tile = stack.pop();
        var _iteratorNormalCompletion5 = true;
        var _didIteratorError5 = false;
        var _iteratorError5 = undefined;

        try {
          for (var _iterator5 = tile.children[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
            var child = _step5.value;
            stack.push(child);
          }
        } catch (err) {
          _didIteratorError5 = true;
          _iteratorError5 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
              _iterator5["return"]();
            }
          } finally {
            if (_didIteratorError5) {
              throw _iteratorError5;
            }
          }
        }

        if (tile !== root) {
          this._destroyTile(tile);
        }
      }

      root.children = [];
    }
  }, {
    key: "_destroyTile",
    value: function _destroyTile(tile) {
      this._cache.unloadTile(this, tile);

      this._unloadTile(tile);

      tile.destroy();
    }
  }, {
    key: "properties",
    get: function get() {
      return this._properties;
    }
  }, {
    key: "ready",
    get: function get() {
      return Boolean(this._root);
    }
  }, {
    key: "readyPromise",
    get: function get() {
      return this._readyPromise.promise;
    }
  }, {
    key: "tilesLoaded",
    get: function get() {
      return this._tilesLoaded;
    }
  }, {
    key: "queryParams",
    get: function get() {
      return getQueryParamString(this._queryParams);
    }
  }, {
    key: "root",
    get: function get() {
      return this._root;
    }
  }, {
    key: "boundingSphere",
    get: function get() {
      this._checkReady();

      this._root.updateTransform(this.modelMatrix);

      return this._root.boundingSphere;
    }
  }, {
    key: "timeSinceLoad",
    get: function get() {
      return this._timeSinceLoad;
    }
  }, {
    key: "maximumMemoryUsage",
    get: function get() {
      return this._maximumMemoryUsage;
    },
    set: function set(value) {
      (0, _assert["default"])(value > 0);
      this._maximumMemoryUsage = value;
    }
  }, {
    key: "ellipsoid",
    get: function get() {
      return this.options.ellipsoid;
    }
  }, {
    key: "extras",
    get: function get() {
      return this._extras;
    }
  }]);
  return Tileset3D;
}();

exports["default"] = Tileset3D;
//# sourceMappingURL=tileset-3d.js.map