"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.calculateDynamicScreenSpaceError = calculateDynamicScreenSpaceError;

var _math = require("math.gl");

var scratchPositionNormal = new _math.Vector3();
var scratchCartographic = new Cartographic();
var scratchMatrix = new _math.Matrix4();
var scratchCenter = new _math.Vector3();
var scratchPosition = new _math.Vector3();
var scratchDirection = new _math.Vector3();

function calculateDynamicScreenSpaceError(root, _ref) {
  var camera = _ref.camera,
      mapProjection = _ref.mapProjection;
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var _options$dynamicScree = options.dynamicScreenSpaceErrorHeightFalloff,
      dynamicScreenSpaceErrorHeightFalloff = _options$dynamicScree === void 0 ? 0.25 : _options$dynamicScree,
      _options$dynamicScree2 = options.dynamicScreenSpaceErrorDensity,
      dynamicScreenSpaceErrorDensity = _options$dynamicScree2 === void 0 ? 0.00278 : _options$dynamicScree2;
  var up;
  var direction;
  var height;
  var minimumHeight;
  var maximumHeight;
  var tileBoundingVolume = root.contentBoundingVolume;

  if (tileBoundingVolume instanceof TileBoundingRegion) {
    up = Cartesian3.normalize(camera.positionWC, scratchPositionNormal);
    direction = camera.directionWC;
    height = camera.positionCartographic.height;
    minimumHeight = tileBoundingVolume.minimumHeight;
    maximumHeight = tileBoundingVolume.maximumHeight;
  } else {
    var transformLocal = _math.Matrix4.inverseTransformation(root.computedTransform, scratchMatrix);

    var ellipsoid = mapProjection.ellipsoid;
    var boundingVolume = tileBoundingVolume.boundingVolume;

    var centerLocal = _math.Matrix4.multiplyByPoint(transformLocal, boundingVolume.center, scratchCenter);

    if (Cartesian3.magnitude(centerLocal) > ellipsoid.minimumRadius) {
      var centerCartographic = Cartographic.fromCartesian(centerLocal, ellipsoid, scratchCartographic);
      up = Cartesian3.normalize(camera.positionWC, scratchPositionNormal);
      direction = camera.directionWC;
      height = camera.positionCartographic.height;
      minimumHeight = 0.0;
      maximumHeight = centerCartographic.height * 2.0;
    } else {
      var positionLocal = _math.Matrix4.multiplyByPoint(transformLocal, camera.positionWC, scratchPosition);

      up = Cartesian3.UNIT_Z;
      direction = _math.Matrix4.multiplyByPointAsVector(transformLocal, camera.directionWC, scratchDirection);
      direction = Cartesian3.normalize(direction, direction);
      height = positionLocal.z;

      if (tileBoundingVolume instanceof TileOrientedBoundingBox) {
        var boxHeight = root._header.boundingVolume.box[11];
        minimumHeight = centerLocal.z - boxHeight;
        maximumHeight = centerLocal.z + boxHeight;
      } else if (tileBoundingVolume instanceof TileBoundingSphere) {
        var radius = boundingVolume.radius;
        minimumHeight = centerLocal.z - radius;
        maximumHeight = centerLocal.z + radius;
      }
    }
  }

  var heightFalloff = dynamicScreenSpaceErrorHeightFalloff;
  var heightClose = minimumHeight + (maximumHeight - minimumHeight) * heightFalloff;
  var heightFar = maximumHeight;
  var t = (0, _math.clamp)((height - heightClose) / (heightFar - heightClose), 0.0, 1.0);
  var dot = Math.abs(Cartesian3.dot(direction, up));
  var horizonFactor = 1.0 - dot;
  horizonFactor = horizonFactor * (1.0 - t);
  return dynamicScreenSpaceErrorDensity * horizonFactor;
}
//# sourceMappingURL=screen-space-error.js.map