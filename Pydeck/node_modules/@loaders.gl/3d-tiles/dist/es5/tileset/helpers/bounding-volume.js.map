{"version":3,"sources":["../../../../src/tileset/helpers/bounding-volume.js"],"names":["defined","x","undefined","scratchMatrix","Matrix3","scratchScale","Vector3","scratchCenter","scratchTransform","Matrix4","createBoundingVolume","boundingVolumeHeader","transform","result","box","createBox","region","west","south","east","north","minHeight","maxHeight","center","centerInCartesian","Ellipsoid","WGS84","cartographicToCartesian","northWest","northEast","southWest","radius","Math","abs","createSphere","sphere","Error","halfAxes","slice","length","multiplyRight","OrientedBoundingBox","createBoxFromTransformedRegion","initialTransform","rectangle","Rectangle","unpack","scratchRectangle","minimumHeight","maximumHeight","orientedBoundingBox","fromRectangle","scratchOrientedBoundingBox","multiplyTransformation","inverseTransformation","multiplyByPoint","rotationScale","getRotation","multiply","TileOrientedBoundingBox","update","createRegion","equalsEpsilon","CesiumMath","EPSILON8","rectangleRegion","TileBoundingRegion","scale","getScale","uniformScale","max","BoundingSphere"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\n/* eslint-disable */\nimport {Vector3, Matrix3, Matrix4, degrees} from 'math.gl';\nimport {BoundingSphere, OrientedBoundingBox} from '@math.gl/culling';\nimport {Ellipsoid} from '@math.gl/geospatial';\nimport assert from '../../utils/assert';\n\n// const scratchProjectedBoundingSphere = new BoundingSphere();\n\nconst defined = x => x !== undefined;\n\nconst scratchMatrix = new Matrix3();\nconst scratchScale = new Vector3();\nconst scratchCenter = new Vector3();\n// const scratchRectangle = new Rectangle();\n// const scratchOrientedBoundingBox = new OrientedBoundingBox();\nconst scratchTransform = new Matrix4();\n\n/**\n * Create a bounding volume from the tile's bounding volume header.\n * @param {Object} boundingVolumeHeader The tile's bounding volume header.\n * @param {Matrix4} transform The transform to apply to the bounding volume.\n * @param {TileBoundingVolume} [result] The object onto which to store the result.\n * @returns {TileBoundingVolume} The modified result parameter or a new TileBoundingVolume instance if none was provided.\n */\nexport function createBoundingVolume(boundingVolumeHeader, transform, result) {\n  assert(boundingVolumeHeader, '3D Tile: boundingVolume must be defined');\n  if (boundingVolumeHeader.box) {\n    return createBox(boundingVolumeHeader.box, transform, result);\n  }\n  if (boundingVolumeHeader.region) {\n    // [west, south, east, north, minimum height, maximum height]\n    // Latitudes and longitudes are in the WGS 84 datum as defined in EPSG 4979 and are in radians.\n    // Heights are in meters above (or below) the WGS 84 ellipsoid.\n    const [west, south, east, north, minHeight, maxHeight] = boundingVolumeHeader.region;\n\n    const center = new Vector3(\n      degrees((west + east) / 2),\n      degrees((north + south) / 2),\n      (minHeight + maxHeight) / 2\n    );\n\n    const centerInCartesian = Ellipsoid.WGS84.cartographicToCartesian(center, scratchCenter);\n\n    const northWest = Ellipsoid.WGS84.cartographicToCartesian([north, west, 0]);\n    const northEast = Ellipsoid.WGS84.cartographicToCartesian([north, east, 0]);\n    const southWest = Ellipsoid.WGS84.cartographicToCartesian([south, west, 0]);\n    const radius =\n      (Math.abs(northEast[0] - northWest[0]) + Math.abs(southWest[1] - northWest[1])) * 8;\n\n    // TODO fix region boundingVolume\n    // for now, create a fake big sphere as the boundingVolume\n    return createSphere(\n      [centerInCartesian[0], centerInCartesian[1], centerInCartesian[2], radius],\n      new Matrix4()\n    );\n  }\n\n  if (boundingVolumeHeader.sphere) {\n    return createSphere(boundingVolumeHeader.sphere, transform, result);\n  }\n\n  throw new Error('3D Tile: boundingVolume must contain a sphere, region, or box');\n}\n\nfunction createBox(box, transform, result) {\n  const center = new Vector3(box[0], box[1], box[2]);\n  let halfAxes = new Matrix3(box.slice(3, box.length));\n\n  transform.transform(center, center);\n\n  halfAxes = new Matrix3(\n    transform[0],\n    transform[1],\n    transform[2],\n    transform[4],\n    transform[5],\n    transform[6],\n    transform[8],\n    transform[9],\n    transform[10]\n  ).multiplyRight(halfAxes);\n\n  if (defined(result)) {\n    result.center = center;\n    result.halfAxes = halfAxes;\n    return result;\n  }\n\n  return new OrientedBoundingBox(center, halfAxes);\n}\n\nfunction createBoxFromTransformedRegion(region, transform, initialTransform, result) {\n  const rectangle = Rectangle.unpack(region, 0, scratchRectangle);\n  const minimumHeight = region[4];\n  const maximumHeight = region[5];\n\n  const orientedBoundingBox = OrientedBoundingBox.fromRectangle(\n    rectangle,\n    minimumHeight,\n    maximumHeight,\n    Ellipsoid.WGS84,\n    scratchOrientedBoundingBox\n  );\n  const center = orientedBoundingBox.center;\n  const halfAxes = orientedBoundingBox.halfAxes;\n\n  // A region bounding volume is not transformed by the transform in the tileset JSON,\n  // but may be transformed by additional transforms applied in Cesium.\n  // This is why the transform is calculated as the difference between the initial transform and the current transform.\n  transform = Matrix4.multiplyTransformation(\n    transform,\n    Matrix4.inverseTransformation(initialTransform, scratchTransform),\n    scratchTransform\n  );\n  center = Matrix4.multiplyByPoint(transform, center, center);\n  const rotationScale = Matrix4.getRotation(transform, scratchMatrix);\n  halfAxes = Matrix3.multiply(rotationScale, halfAxes, halfAxes);\n\n  if (defined(result) && result instanceof TileOrientedBoundingBox) {\n    result.update(center, halfAxes);\n    return result;\n  }\n\n  return new TileOrientedBoundingBox(center, halfAxes);\n}\n\nfunction createRegion(region, transform, initialTransform, result) {\n  if (!Matrix4.equalsEpsilon(transform, initialTransform, CesiumMath.EPSILON8)) {\n    return createBoxFromTransformedRegion(region, transform, initialTransform, result);\n  }\n\n  if (defined(result)) {\n    return result;\n  }\n\n  const rectangleRegion = Rectangle.unpack(region, 0, scratchRectangle);\n\n  return new TileBoundingRegion({\n    rectangle: rectangleRegion,\n    minimumHeight: region[4],\n    maximumHeight: region[5]\n  });\n}\n\nfunction createSphere(sphere, transform, result) {\n  // Find the transformed center\n  const center = new Vector3(sphere[0], sphere[1], sphere[2]);\n  transform.transform(center, center);\n  const scale = transform.getScale(scratchScale);\n\n  const uniformScale = Math.max(Math.max(scale[0], scale[1]), scale[2]);\n  const radius = sphere[3] * uniformScale;\n\n  if (defined(result)) {\n    result.center = center;\n    result.radius = radius;\n    return result;\n  }\n\n  return new BoundingSphere(center, radius);\n}\n"],"file":"bounding-volume.js"}