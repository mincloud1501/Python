{"version":3,"sources":["../../../src/tileset/tileset-3d.js"],"names":["TILES_TOTAL","TILES_IN_MEMORY","TILES_IN_VIEW","TILES_RENDERABLE","TILES_LOADED","TILES_LOADING","TILES_UNLOADED","TILES_LOAD_FAILED","POINTS_COUNT","TILES_GPU_MEMORY","WGS84_RADIUS_X","WGS84_RADIUS_Y","WGS84_RADIUS_Z","getZoom","boundingVolume","halfAxes","radius","width","height","x","y","z","zoomX","Math","log2","zoomY","zoomZ","DEFAULT_OPTIONS","basePath","ellipsoid","Ellipsoid","WGS84","modelMatrix","Matrix4","throttleRequests","maximumScreenSpaceError","maximumMemoryUsage","dynamicScreenSpaceError","dynamicScreenSpaceErrorDensity","dynamicScreenSpaceErrorFactor","skipLevelOfDetail","baseScreenSpaceError","onTileLoad","onTileUnload","onTileLoadFail","tile","message","url","console","error","getQueryParamString","queryParams","queryParamStrings","Object","keys","key","push","length","join","Tileset3D","json","options","path","dirname","stats","Stats","id","_initializeStats","gpuMemoryUsageInBytes","geometricError","undefined","userData","_queryParams","_requestScheduler","RequestScheduler","_traverser","Tileset3DTraverser","_cache","Tileset3DCache","_processingQueue","selectedTiles","_emptyTiles","_requestedTiles","_selectedTilesToStyle","asset","credits","_root","_properties","_extensionsUsed","_gltfUpAxis","_loadTimestamp","_timeSinceLoad","_updatedVisibilityFrame","_extras","_allTilesAdditive","_hasMixedContent","_maximumScreenSpaceError","_maximumMemoryUsage","_tilesLoaded","_initialTilesLoaded","_readyPromise","Promise","resolve","_classificationType","classificationType","_ellipsoid","_dynamicScreenSpaceErrorComputedDensity","_initializeTileSet","_destroy","tilePath","isDataUrl","startsWith","extensionName","Boolean","indexOf","frameState","reset","traverse","root","assign","result","requestedTiles","_loadTile","_unloadTiles","tilesRenderable","pointsRenderable","contentAvailable","content","pointCount","get","count","trim","add","tileset","tileToAdd","_addTileToCache","tilesetJson","Error","version","v","tilesetVersion","attributions","properties","extensionsUsed","extras","_initializeTileHeaders","_calculateViewProps","center","warn","cartographicCenter","Vector3","zoom","cartesianToCartographic","parentTileHeader","rootTile","Tile3DHeader","children","_depth","stack","pop","incrementCount","_header","childHeader","childTile","parentTile","_destroySubtree","loadContent","loaded","decrementCount","toString","_content","byteLength","unloadContent","unloadTiles","_unloadTile","child","destroy","_destroyTile","unloadTile","promise","_checkReady","updateTransform","boundingSphere","value"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {Matrix4, Vector3} from 'math.gl';\nimport {Ellipsoid} from '@math.gl/geospatial';\nimport {Stats} from 'probe.gl';\nimport {path} from '@loaders.gl/core';\n\nimport assert from '../utils/assert';\nimport RequestScheduler from '../request-utils/request-scheduler';\n\nimport {calculateTransformProps} from './helpers/transform-utils';\nimport Tile3DHeader from './tile-3d-header';\nimport Tileset3DTraverser from './tileset-3d-traverser';\nimport Tileset3DCache from './tileset-3d-cache';\n\n// Tracked Stats\nconst TILES_TOTAL = 'Tiles In Tileset(s)';\nconst TILES_IN_MEMORY = 'Tiles In Memory';\nconst TILES_IN_VIEW = 'Tiles In View';\nconst TILES_RENDERABLE = 'Tiles To Render';\nconst TILES_LOADED = 'Tiles Loaded';\nconst TILES_LOADING = 'Tiles Loading';\nconst TILES_UNLOADED = 'Tiles Unloaded';\nconst TILES_LOAD_FAILED = 'Failed Tile Loads';\nconst POINTS_COUNT = 'Points';\nconst TILES_GPU_MEMORY = 'Tile Memory Use';\n\n// TODO move to Math library?\nconst WGS84_RADIUS_X = 6378137.0;\nconst WGS84_RADIUS_Y = 6378137.0;\nconst WGS84_RADIUS_Z = 6356752.3142451793;\n\nfunction getZoom(boundingVolume) {\n  const {halfAxes, radius, width, height} = boundingVolume;\n\n  if (halfAxes) {\n    // OrientedBoundingBox\n    const [x, , , , y, , , , z] = halfAxes;\n    const zoomX = Math.log2(WGS84_RADIUS_X / x / 2);\n    const zoomY = Math.log2(WGS84_RADIUS_Y / y / 2);\n    const zoomZ = Math.log2(WGS84_RADIUS_Z / z / 2);\n    return (zoomX + zoomY + zoomZ) / 3;\n  } else if (radius) {\n    // BoundingSphere\n    return Math.log2(WGS84_RADIUS_Z / radius);\n  } else if (height && width) {\n    // BoundingRectangle\n    const zoomX = Math.log2(WGS84_RADIUS_X / width);\n    const zoomY = Math.log2(WGS84_RADIUS_Y / height);\n\n    return (zoomX + zoomY) / 2;\n  }\n\n  return 18;\n}\n\nconst DEFAULT_OPTIONS = {\n  basePath: '',\n\n  ellipsoid: Ellipsoid.WGS84,\n  // A 4x4 transformation matrix this transforms the entire tileset.\n  modelMatrix: new Matrix4(),\n\n  // Set to true to enable experimental request throttling, for improved performance\n  throttleRequests: false,\n\n  // The maximum screen space error used to drive level of detail refinement.\n  maximumScreenSpaceError: 16,\n  maximumMemoryUsage: 32,\n\n  // default props\n  dynamicScreenSpaceError: false,\n  dynamicScreenSpaceErrorDensity: 0.00278,\n  dynamicScreenSpaceErrorFactor: 4.0,\n\n  // Optimization option. Determines if level of detail skipping should be applied during the traversal.\n  skipLevelOfDetail: false,\n  // The screen space error this must be reached before skipping levels of detail.\n  baseScreenSpaceError: 1024,\n\n  onTileLoad: () => {}, // Indicates this a tile's content was loaded\n  onTileUnload: () => {}, // Indicates this a tile's content was unloaded\n  onTileLoadFail: (tile, message, url) =>\n    console.error(`A 3D tile failed to load: ${url} ${message}`) // eslint-disable-line\n};\n\nfunction getQueryParamString(queryParams) {\n  const queryParamStrings = [];\n  for (const key of Object.keys(queryParams)) {\n    queryParamStrings.push(`${key}=${queryParams[key]}`);\n  }\n  switch (queryParamStrings.length) {\n    case 0:\n      return '';\n    case 1:\n      return `?${queryParamStrings[0]}`;\n    default:\n      return `?${queryParamStrings.join('&')}`;\n  }\n}\n\nexport default class Tileset3D {\n  // eslint-disable-next-line max-statements\n  constructor(json, url, options = {}) {\n    assert(json);\n\n    // PUBLIC MEMBERS\n    this.options = {...DEFAULT_OPTIONS, ...options};\n    this.url = url; // The url to a tileset JSON file.\n    this.basePath = path.dirname(url); // base path that non-absolute paths in tileset are relative to.\n    this.modelMatrix = this.options.modelMatrix;\n    this.stats = new Stats({id: url});\n    this._initializeStats();\n\n    this.gpuMemoryUsageInBytes = 0; // The total amount of GPU memory in bytes used by the tileset.\n    this.geometricError = undefined; // Geometric error when the tree is not rendered at all\n    this.userData = {};\n\n    // HELPER OBJECTS\n    this._queryParams = {};\n    this._requestScheduler = new RequestScheduler({\n      throttleRequests: this.options.throttleRequests\n    });\n    this._traverser = new Tileset3DTraverser();\n    this._cache = new Tileset3DCache();\n\n    // HOLD TRAVERSAL RESULTS\n    this._processingQueue = [];\n    this.selectedTiles = [];\n    this._emptyTiles = [];\n    this._requestedTiles = [];\n    this._selectedTilesToStyle = [];\n\n    this.asset = {}; // Metadata for the entire tileset\n    this.credits = {};\n\n    // EXTRACTED FROM TILESET\n    this._root = undefined;\n    this._properties = undefined; // Metadata for per-model/point/etc properties\n    this._extensionsUsed = undefined;\n    this._gltfUpAxis = undefined;\n\n    this._loadTimestamp = undefined;\n    this._timeSinceLoad = 0.0;\n    this._updatedVisibilityFrame = 0;\n    this._extras = undefined;\n\n    this._allTilesAdditive = true;\n    this._hasMixedContent = false;\n    this._maximumScreenSpaceError = options.maximumScreenSpaceError;\n    this._maximumMemoryUsage = options.maximumMemoryUsage;\n\n    this._tilesLoaded = false;\n    this._initialTilesLoaded = false;\n\n    this._readyPromise = Promise.resolve();\n\n    this._classificationType = this.options.classificationType;\n    this._ellipsoid = this.options.ellipsoid;\n\n    this._dynamicScreenSpaceErrorComputedDensity = 0.0; // Updated based on the camera position and direction\n\n    this._initializeTileSet(json, this.options);\n  }\n\n  destroy() {\n    this._destroy();\n  }\n\n  // Gets the tileset's asset object property, which contains metadata about the tileset.\n  // get asset() {\n  //   return this._asset;\n  // }\n\n  // Gets the tileset's properties dictionary object, which contains metadata about per-feature properties.\n  get properties() {\n    return this._properties;\n  }\n\n  // When <code>true</code>, the tileset's root tile is loaded and the tileset is ready to render.\n  get ready() {\n    return Boolean(this._root);\n  }\n\n  // Gets the promise this will be resolved when the tileset's root tile is loaded and the tileset is ready to render.\n  // This promise is resolved at the end of the frame before the first frame the tileset is rendered in.\n  get readyPromise() {\n    return this._readyPromise.promise;\n  }\n\n  // When <code>true</code>, all tiles this meet the screen space error this frame are loaded.\n  get tilesLoaded() {\n    return this._tilesLoaded;\n  }\n\n  get queryParams() {\n    return getQueryParamString(this._queryParams);\n  }\n\n  // The root tile header.\n  get root() {\n    return this._root;\n  }\n\n  // The tileset's bounding sphere.\n  get boundingSphere() {\n    this._checkReady();\n    this._root.updateTransform(this.modelMatrix);\n    return this._root.boundingSphere;\n  }\n\n  // Returns the time, in milliseconds, since the tileset was loaded and first updated.\n  get timeSinceLoad() {\n    return this._timeSinceLoad;\n  }\n\n  // The maximum amount of GPU memory (in MB) that may be used to cache tiles.\n  // Tiles not in view are unloaded to enforce this.\n  get maximumMemoryUsage() {\n    return this._maximumMemoryUsage;\n  }\n\n  set maximumMemoryUsage(value) {\n    assert(value > 0);\n    this._maximumMemoryUsage = value;\n  }\n\n  // Gets an ellipsoid describing the shape of the globe.\n  get ellipsoid() {\n    return this.options.ellipsoid;\n  }\n\n  // Returns the extras property at the top of the tileset JSON (application specific metadata).\n  get extras() {\n    return this._extras;\n  }\n\n  getTileUrl(tilePath, basePath) {\n    const isDataUrl = url => url.startsWith('data:');\n    return isDataUrl(tilePath)\n      ? tilePath\n      : `${basePath || this.basePath}/${tilePath}${this.queryParams}`;\n  }\n\n  // true if the tileset JSON file lists the extension in extensionsUsed\n  hasExtension(extensionName) {\n    return Boolean(this._extensionsUsed && this._extensionsUsed.indexOf(extensionName) > -1);\n  }\n\n  update(frameState) {\n    this._updatedVisibilityFrame++; // TODO: only update when camera or culling volume from last update moves (could be render camera change or prefetch camera)\n    this._cache.reset();\n\n    this._traverser.traverse(this.root, frameState, this.options);\n    Object.assign(this, this._traverser.result); // Hack during refactor\n\n    const requestedTiles = this._requestedTiles;\n    // Sort requests by priority before making any requests.\n    // This makes it less likely this requests will be cancelled after being issued.\n    // requestedTiles.sort((a, b) => a._priority - b._priority);\n    for (const tile of requestedTiles) {\n      this._loadTile(tile);\n    }\n\n    this._unloadTiles();\n\n    let tilesRenderable = 0;\n    let pointsRenderable = 0;\n    for (const tile of this.selectedTiles) {\n      if (tile.contentAvailable) {\n        tilesRenderable++;\n        if (tile.content.pointCount) {\n          pointsRenderable += tile.content.pointCount;\n        }\n      }\n    }\n\n    this.stats.get(TILES_IN_VIEW).count = this.selectedTiles.length;\n    this.stats.get(TILES_RENDERABLE).count = tilesRenderable;\n    this.stats.get(POINTS_COUNT).count = pointsRenderable;\n  }\n\n  // TODO - why are these public methods? For testing?\n\n  // Unloads all tiles this weren't selected the previous frame.  This can be used to\n  trimLoadedTiles() {\n    this._cache.trim();\n  }\n\n  // Add to the tile cache. Previously expired tiles are already in the cache and won't get re-added.\n  addTileToCache(tile) {\n    this._cache.add(this, tile, (tileset, tileToAdd) => tileset._addTileToCache(tileToAdd));\n  }\n\n  // PRIVATE\n\n  // eslint-disable-next-line max-statements\n  _initializeTileSet(tilesetJson, options) {\n    this.asset = tilesetJson.asset;\n    if (!this.asset) {\n      throw new Error('Tileset must have an asset property.');\n    }\n    if (this.asset.version !== '0.0' && this.asset.version !== '1.0') {\n      throw new Error('The tileset must be 3D Tiles version 0.0 or 1.0.');\n    }\n\n    // Note: `asset.tilesetVersion` is version of the tileset itself (not the version of the 3D TILES standard)\n    // We add this version as a `v=1.0` query param to fetch the right version and not get an older cached version\n    if ('tilesetVersion' in this.asset) {\n      this._queryParams.v = this.asset.tilesetVersion;\n    }\n\n    // TODO - ion resources have a credits property we can use for additional attribution.\n    this.credits = {\n      attributions: options.attributions || []\n    };\n\n    this._properties = tilesetJson.properties;\n    this.geometricError = tilesetJson.geometricError;\n    this._extensionsUsed = tilesetJson.extensionsUsed;\n    this._extras = tilesetJson.extras;\n\n    // TODO - handle configurable glTF up axis\n    // const gltfUpAxis = defined(tilesetJson.asset.gltfUpAxis)\n    //   ? Axis.fromName(tilesetJson.asset.gltfUpAxis)\n    //   : Axis.Y;\n\n    this._root = this._initializeTileHeaders(tilesetJson, null, this.basePath);\n\n    // Calculate cartographicCenter & zoom props to help apps center view on tileset\n    this._calculateViewProps();\n\n    // TODO - Do we need this?\n    // Save the original, untransformed bounding volume position so we can apply\n    // the tile transform and model matrix at run time\n    // const boundingVolume = this._root.createBoundingVolume(\n    //   tilesetJson.root.boundingVolume,\n    //   Matrix4.IDENTITY\n    // );\n    // const clippingPlanesOrigin = boundingVolume.boundingSphere.center;\n    // If this origin is above the surface of the earth\n    // we want to apply an ENU orientation as our best guess of orientation.\n    // Otherwise, we assume it gets its position/orientation completely from the\n    // root tile transform and the tileset's model matrix\n    // const originCartographic = this._ellipsoid.cartesianToCartographic(clippingPlanesOrigin);\n    // if (\n    //   originCartographic &&\n    //   originCartographic.height > ApproximateTerrainHeights._defaultMinTerrainHeight\n    // ) {\n    //   this._initialClippingPlanesOriginMatrix = Transforms.eastNorthUpToFixedFrame(\n    //     clippingPlanesOrigin\n    //   );\n    // }\n\n    // this._clippingPlanesOriginMatrix = Matrix4.clone(this._initialClippingPlanesOriginMatrix);\n    // this._readyPromise.resolve(this);\n  }\n\n  // Called during intializeTileset to initialize the tileset's cartographic center (longitude, latitude) and zoom.\n  _calculateViewProps() {\n    const root = this._root;\n    const {center} = root.boundingVolume;\n    // TODO - handle all cases\n    if (!center) {\n      // eslint-disable-next-line\n      console.warn('center was not pre-calculated for the root tile');\n      this.cartographicCenter = new Vector3();\n      this.zoom = 16;\n      return;\n    }\n    this.cartographicCenter = Ellipsoid.WGS84.cartesianToCartographic(center, new Vector3());\n    this.zoom = getZoom(root.boundingVolume);\n  }\n\n  _initializeStats() {\n    this.stats.get(TILES_TOTAL);\n    this.stats.get(TILES_LOADING);\n    this.stats.get(TILES_IN_MEMORY);\n    this.stats.get(TILES_IN_VIEW);\n    this.stats.get(TILES_RENDERABLE);\n    this.stats.get(TILES_LOADED);\n    this.stats.get(TILES_UNLOADED);\n    this.stats.get(TILES_LOAD_FAILED);\n    this.stats.get(POINTS_COUNT, 'memory');\n    this.stats.get(TILES_GPU_MEMORY, 'memory');\n  }\n\n  // Installs the main tileset JSON file or a tileset JSON file referenced from a tile.\n  // eslint-disable-next-line max-statements\n  _initializeTileHeaders(tilesetJson, parentTileHeader, basePath) {\n    // A tileset JSON file referenced from a tile may exist in a different directory than the root tileset.\n    // Get the basePath relative to the external tileset.\n    const rootTile = new Tile3DHeader(this, tilesetJson.root, parentTileHeader, basePath); // resource\n\n    // If there is a parentTileHeader, add the root of the currently loading tileset\n    // to parentTileHeader's children, and update its _depth.\n    if (parentTileHeader) {\n      parentTileHeader.children.push(rootTile);\n      rootTile._depth = parentTileHeader._depth + 1;\n    }\n\n    const stack = [];\n    stack.push(rootTile);\n\n    while (stack.length > 0) {\n      const tile = stack.pop();\n      this.stats.get(TILES_TOTAL).incrementCount();\n      // this._allTilesAdditive = this._allTilesAdditive && tile.refine === TILE_3D_REFINE.ADD;\n\n      const children = tile._header.children || [];\n      for (const childHeader of children) {\n        const childTile = new Tile3DHeader(this, childHeader, tile, basePath);\n        tile.children.push(childTile);\n        childTile._depth = tile._depth + 1;\n        stack.push(childTile);\n      }\n\n      // TODO:\n      // if (this.options.cullWithChildrenBounds) {\n      //   Tile3DOptimizations.checkChildrenWithinParent(tile);\n      // }\n    }\n\n    return rootTile;\n  }\n\n  _destroyTileHeaders(parentTile) {\n    this._destroySubtree(parentTile);\n  }\n\n  async _loadTile(tile) {\n    // TODO - support tile expiration\n    // const expired = tile.contentExpired;\n    // if (expired) {\n    //   if (tile.hasTilesetContent) {\n    //     this._destroySubtree(tile);\n    //   }\n    // }\n\n    let loaded;\n\n    this.stats.get(TILES_LOADING).incrementCount();\n    try {\n      loaded = await tile.loadContent();\n    } catch (error) {\n      this.stats.get(TILES_LOADING).decrementCount();\n      this.stats.get(TILES_LOAD_FAILED).incrementCount();\n      this.options.onTileLoadFail(tile, error.message || error.toString(), tile.url);\n      return;\n    }\n    this.stats.get(TILES_LOADING).decrementCount();\n\n    if (!loaded) {\n      return;\n    }\n\n    // add coordinateOrigin and modelMatrix to tile\n    if (tile && tile._content) {\n      calculateTransformProps(tile, tile._content);\n    }\n\n    this.options.onTileLoad(tile);\n  }\n\n  _addTileToCache(tile) {\n    this.stats.get(TILES_LOADED).incrementCount();\n    this.stats.get(TILES_IN_MEMORY).incrementCount();\n\n    // Good enough? Just use the raw binary ArrayBuffer's byte length.\n    this.gpuMemoryUsageInBytes += tile._content.byteLength || 0;\n    this.stats.get(TILES_GPU_MEMORY).count = this.gpuMemoryUsageInBytes;\n  }\n\n  _unloadTile(tile) {\n    this.stats.get(TILES_IN_MEMORY).decrementCount();\n    this.stats.get(TILES_UNLOADED).incrementCount();\n\n    this.gpuMemoryUsageInBytes -= tile._content.byteLength || 0;\n    this.stats.get(TILES_GPU_MEMORY).count = this.gpuMemoryUsageInBytes;\n\n    this.options.onTileUnload(tile);\n    tile.unloadContent();\n  }\n\n  _unloadTiles() {\n    this._cache.unloadTiles(this, (tileset, tile) => tileset._unloadTile(tile));\n  }\n\n  // Traverse the tree and destroy all tiles\n  _destroy() {\n    const stack = [];\n    if (this._root) {\n      stack.push(this._root);\n    }\n    while (stack.length > 0) {\n      for (const child of tile.children) {\n        stack.push(child);\n      }\n      const tile = stack.pop();\n\n      // TODO - Use this._destroyTile(tile); ?\n      tile.destroy();\n    }\n    this._root = null;\n  }\n\n  // Traverse the tree and destroy all sub tiles\n  _destroySubtree(tile) {\n    const root = tile;\n    const stack = [];\n    stack.push(root);\n    while (stack.length > 0) {\n      tile = stack.pop();\n      for (const child of tile.children) {\n        stack.push(child);\n      }\n      if (tile !== root) {\n        this._destroyTile(tile);\n      }\n    }\n    root.children = [];\n  }\n\n  _destroyTile(tile) {\n    this._cache.unloadTile(this, tile);\n    this._unloadTile(tile);\n    tile.destroy();\n  }\n}\n"],"file":"tileset-3d.js"}