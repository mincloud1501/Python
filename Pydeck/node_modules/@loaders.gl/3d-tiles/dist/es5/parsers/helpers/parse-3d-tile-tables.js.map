{"version":3,"sources":["../../../../src/parsers/helpers/parse-3d-tile-tables.js"],"names":["SIZEOF_UINT32","parse3DTileTablesHeaderSync","tile","arrayBuffer","byteOffset","view","DataView","featureTableJsonByteLength","getUint32","featureTableBinaryByteLength","batchTableJsonByteLength","batchTableBinaryByteLength","parse3DTileTablesSync","options","parse3DTileFeatureTable","parse3DTileBatchTable","featureTableJson","BATCH_LENGTH","featureTableString","JSON","parse","featureTableBinary","Uint8Array","batchTableString","batchTableJson","batchTableBinary"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {getStringFromArrayBuffer} from './parse-utils';\n\nconst SIZEOF_UINT32 = 4;\n\n// eslint-disable-next-line max-statements\nexport function parse3DTileTablesHeaderSync(tile, arrayBuffer, byteOffset) {\n  const view = new DataView(arrayBuffer);\n\n  tile.featureTableJsonByteLength = view.getUint32(byteOffset, true);\n  byteOffset += SIZEOF_UINT32;\n\n  tile.featureTableBinaryByteLength = view.getUint32(byteOffset, true);\n  byteOffset += SIZEOF_UINT32;\n\n  tile.batchTableJsonByteLength = view.getUint32(byteOffset, true);\n  byteOffset += SIZEOF_UINT32;\n\n  tile.batchTableBinaryByteLength = view.getUint32(byteOffset, true);\n  byteOffset += SIZEOF_UINT32;\n\n  return byteOffset;\n}\n\nexport function parse3DTileTablesSync(tile, arrayBuffer, byteOffset, options) {\n  byteOffset = parse3DTileFeatureTable(tile, arrayBuffer, byteOffset, options);\n  byteOffset = parse3DTileBatchTable(tile, arrayBuffer, byteOffset, options);\n  return byteOffset;\n}\n\nfunction parse3DTileFeatureTable(tile, arrayBuffer, byteOffset, options) {\n  const {featureTableJsonByteLength, featureTableBinaryByteLength} = tile;\n\n  tile.featureTableJson = {\n    BATCH_LENGTH: 0\n  };\n\n  if (featureTableJsonByteLength > 0) {\n    const featureTableString = getStringFromArrayBuffer(\n      arrayBuffer,\n      byteOffset,\n      featureTableJsonByteLength\n    );\n    tile.featureTableJson = JSON.parse(featureTableString);\n  }\n  byteOffset += featureTableJsonByteLength;\n\n  tile.featureTableBinary = new Uint8Array(arrayBuffer, byteOffset, featureTableBinaryByteLength);\n  byteOffset += featureTableBinaryByteLength;\n\n  /*\n  const featureTable = parseFeatureTable(featureTableJson, featureTableBinary);\n\n  const batchLength = featureTable.getGlobalProperty('BATCH_LENGTH');\n  featureTable.featuresLength = batchLength;\n  */\n\n  return byteOffset;\n}\n\nfunction parse3DTileBatchTable(tile, arrayBuffer, byteOffset, options) {\n  const {batchTableJsonByteLength, batchTableBinaryByteLength} = tile;\n\n  if (batchTableJsonByteLength > 0) {\n    const batchTableString = getStringFromArrayBuffer(\n      arrayBuffer,\n      byteOffset,\n      batchTableJsonByteLength\n    );\n    tile.batchTableJson = JSON.parse(batchTableString);\n    byteOffset += batchTableJsonByteLength;\n\n    if (batchTableBinaryByteLength > 0) {\n      // Has a batch table binary\n      tile.batchTableBinary = new Uint8Array(arrayBuffer, byteOffset, batchTableBinaryByteLength);\n      // Copy the batchTableBinary section and let the underlying ArrayBuffer be freed\n      tile.batchTableBinary = new Uint8Array(tile.batchTableBinary);\n\n      byteOffset += batchTableBinaryByteLength;\n    }\n  }\n\n  return byteOffset;\n}\n"],"file":"parse-3d-tile-tables.js"}