{"version":3,"sources":["../../../src/parsers/parse-3d-tile-point-cloud.js"],"names":["parsePointCloud3DTile","tile","arrayBuffer","byteOffset","options","context","initializeTile","parsePointCloudTables","featureTable","batchTable","parseDraco","parsePositions","parseColors","parseNormals","parsePointCloud3DTileSync","attributes","positions","colors","normals","batchIds","isQuantized","isTranslucent","isRGB565","isOctEncoded16P","Tile3DFeatureTable","featureTableJson","featureTableBinary","pointsLength","getGlobalProperty","Number","isFinite","Error","featuresLength","pointCount","rtcCenter","GL","FLOAT","parseBatchIds","hasProperty","getPropertyArray","UNSIGNED_SHORT","quantizedRange","quantizedVolumeScale","quantizedVolumeOffset","UNSIGNED_BYTE","constantRGBA","batchFeatureLength","batchTableJson","batchTableBinary","Tile3DBatchTable","batchTableDraco","getExtension","dracoBatchTableProperties","properties","featureTableDraco","dracoFeatureTableProperties","dracoByteOffset","dracoByteLength","byteLength","dracoBuffer","slice","hasPositions","POSITION","hasColors","RGB","RGBA","hasNormals","NORMAL","hasBatchIds","BATCH_ID","dracoData","buffer","featureTableProperties","batchTableProperties","dequantizeInShader","loadDraco","parse","DracoLoader","data","decodedPositions","value","decodedColors","COLOR_0","decodedNormals","decodedBatchIds","isQuantizedDraco","quantization","isOctEncodedDraco","range","Vector3","minValues","quantizationBits","octEncodedRange"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {Vector3} from 'math.gl';\nimport {GL} from '@loaders.gl/math'; // 'math.gl/geometry';\n\nimport Tile3DFeatureTable from '../classes/tile-3d-feature-table';\nimport Tile3DBatchTable from '../classes/tile-3d-batch-table';\nimport {parse3DTileHeaderSync} from './helpers/parse-3d-tile-header';\nimport {parse3DTileTablesHeaderSync, parse3DTileTablesSync} from './helpers/parse-3d-tile-tables';\nimport {normalize3DTileColorAttribute} from './helpers/normalize-3d-tile-colors';\nimport {normalize3DTileNormalAttribute} from './helpers/normalize-3d-tile-normals';\nimport {normalize3DTilePositionAttribute} from './helpers/normalize-3d-tile-positions';\n\nexport async function parsePointCloud3DTile(tile, arrayBuffer, byteOffset, options, context) {\n  byteOffset = parse3DTileHeaderSync(tile, arrayBuffer, byteOffset, options);\n  byteOffset = parse3DTileTablesHeaderSync(tile, arrayBuffer, byteOffset, options);\n  byteOffset = parse3DTileTablesSync(tile, arrayBuffer, byteOffset, options);\n  initializeTile(tile);\n\n  const {featureTable, batchTable} = parsePointCloudTables(tile);\n\n  await parseDraco(tile, featureTable, batchTable, options, context);\n\n  parsePositions(tile, featureTable, options);\n  parseColors(tile, featureTable, batchTable, options);\n  parseNormals(tile, featureTable, options);\n\n  return byteOffset;\n}\n\n// TODO - is there really a need for sync tile parsing?\nexport function parsePointCloud3DTileSync(tile, arrayBuffer, byteOffset, options, context) {\n  byteOffset = parse3DTileHeaderSync(tile, arrayBuffer, byteOffset, options);\n  byteOffset = parse3DTileTablesHeaderSync(tile, arrayBuffer, byteOffset, options);\n  byteOffset = parse3DTileTablesSync(tile, arrayBuffer, byteOffset, options);\n\n  initializeTile(tile);\n\n  const {featureTable} = parsePointCloudTables(tile);\n\n  // parseDracoSync(tile, featureTable, batchTable, options);\n\n  parsePositions(tile, featureTable, options);\n  parseColors(tile, featureTable, options);\n  parseNormals(tile, featureTable, options);\n\n  return byteOffset;\n}\n\nfunction initializeTile(tile) {\n  // Initialize point cloud tile defaults\n  tile.attributes = {\n    positions: null,\n    colors: null,\n    normals: null,\n    batchIds: null\n  };\n  tile.isQuantized = false;\n  tile.isTranslucent = false;\n  tile.isRGB565 = false;\n  tile.isOctEncoded16P = false;\n}\n\nfunction parsePointCloudTables(tile) {\n  const featureTable = new Tile3DFeatureTable(tile.featureTableJson, tile.featureTableBinary);\n\n  const pointsLength = featureTable.getGlobalProperty('POINTS_LENGTH');\n  if (!Number.isFinite(pointsLength)) {\n    throw new Error('POINTS_LENGTH must be defined');\n  }\n  featureTable.featuresLength = pointsLength;\n\n  tile.featuresLength = pointsLength;\n  tile.pointsLength = pointsLength;\n  tile.pointCount = pointsLength;\n\n  tile.rtcCenter = featureTable.getGlobalProperty('RTC_CENTER', GL.FLOAT, 3);\n\n  const batchTable = parseBatchIds(tile, featureTable);\n\n  return {featureTable, batchTable};\n}\n\nfunction parsePositions(tile, featureTable, options) {\n  if (!tile.attributes.positions) {\n    if (featureTable.hasProperty('POSITION')) {\n      tile.attributes.positions = featureTable.getPropertyArray('POSITION', GL.FLOAT, 3);\n    } else if (featureTable.hasProperty('POSITION_QUANTIZED')) {\n      const positions = featureTable.getPropertyArray('POSITION_QUANTIZED', GL.UNSIGNED_SHORT, 3);\n\n      tile.isQuantized = true;\n      tile.quantizedRange = (1 << 16) - 1;\n\n      tile.quantizedVolumeScale = featureTable.getGlobalProperty(\n        'QUANTIZED_VOLUME_SCALE',\n        GL.FLOAT,\n        3\n      );\n      if (!tile.quantizedVolumeScale) {\n        throw new Error('QUANTIZED_VOLUME_SCALE must be defined for quantized positions.');\n      }\n\n      tile.quantizedVolumeOffset = featureTable.getGlobalProperty(\n        'QUANTIZED_VOLUME_OFFSET',\n        GL.FLOAT,\n        3\n      );\n      if (!tile.quantizedVolumeOffset) {\n        throw new Error('QUANTIZED_VOLUME_OFFSET must be defined for quantized positions.');\n      }\n\n      tile.attributes.positions = normalize3DTilePositionAttribute(tile, positions, options);\n    }\n  }\n\n  if (!tile.attributes.positions) {\n    throw new Error('Either POSITION or POSITION_QUANTIZED must be defined.');\n  }\n}\n\nfunction parseColors(tile, featureTable, batchTable) {\n  if (!tile.attributes.colors) {\n    let colors = null;\n    if (featureTable.hasProperty('RGBA')) {\n      colors = featureTable.getPropertyArray('RGBA', GL.UNSIGNED_BYTE, 4);\n      tile.isTranslucent = true;\n    } else if (featureTable.hasProperty('RGB')) {\n      colors = featureTable.getPropertyArray('RGB', GL.UNSIGNED_BYTE, 3);\n    } else if (featureTable.hasProperty('RGB565')) {\n      colors = featureTable.getPropertyArray('RGB565', GL.UNSIGNED_SHORT, 1);\n      tile.isRGB565 = true;\n    }\n\n    tile.attributes.colors = normalize3DTileColorAttribute(tile, colors, batchTable);\n  }\n\n  if (featureTable.hasProperty('CONSTANT_RGBA')) {\n    tile.constantRGBA = featureTable.getGlobalProperty('CONSTANT_RGBA', GL.UNSIGNED_BYTE, 4);\n  }\n}\n\nfunction parseNormals(tile, featureTable) {\n  if (!tile.attributes.normals) {\n    let normals = null;\n    if (featureTable.hasProperty('NORMAL')) {\n      normals = featureTable.getPropertyArray('NORMAL', GL.FLOAT, 3);\n    } else if (featureTable.hasProperty('NORMAL_OCT16P')) {\n      normals = featureTable.getPropertyArray('NORMAL_OCT16P', GL.UNSIGNED_BYTE, 2);\n      tile.isOctEncoded16P = true;\n    }\n\n    tile.attributes.normals = normalize3DTileNormalAttribute(tile, normals);\n  }\n}\n\nfunction parseBatchIds(tile, featureTable) {\n  let batchTable = null;\n  if (!tile.batchIds && featureTable.hasProperty('BATCH_ID')) {\n    tile.batchIds = featureTable.getPropertyArray('BATCH_ID', GL.UNSIGNED_SHORT, 1);\n\n    if (tile.batchIds) {\n      const batchFeatureLength = featureTable.getGlobalProperty('BATCH_LENGTH');\n      if (!batchFeatureLength) {\n        throw new Error('Global property: BATCH_LENGTH must be defined when BATCH_ID is defined.');\n      }\n      const {batchTableJson, batchTableBinary} = tile;\n      batchTable = new Tile3DBatchTable(batchTableJson, batchTableBinary, batchFeatureLength);\n    }\n  }\n  return batchTable;\n}\n\n// eslint-disable-next-line complexity\nasync function parseDraco(tile, featureTable, batchTable, options, context) {\n  let dracoBuffer;\n  let dracoFeatureTableProperties;\n  let dracoBatchTableProperties;\n  const batchTableDraco = batchTable && batchTable.getExtension('3DTILES_draco_point_compression');\n  if (batchTableDraco) {\n    dracoBatchTableProperties = batchTableDraco.properties;\n  }\n\n  const featureTableDraco = featureTable.getExtension('3DTILES_draco_point_compression');\n  if (featureTableDraco) {\n    dracoFeatureTableProperties = featureTableDraco.properties;\n    const dracoByteOffset = featureTableDraco.byteOffset;\n    const dracoByteLength = featureTableDraco.byteLength;\n    if (!dracoFeatureTableProperties || !Number.isFinite(dracoByteOffset) || !dracoByteLength) {\n      throw new Error('Draco properties, byteOffset, and byteLength must be defined');\n    }\n\n    dracoBuffer = tile.featureTableBinary.slice(dracoByteOffset, dracoByteOffset + dracoByteLength);\n\n    tile.hasPositions = Number.isFinite(dracoFeatureTableProperties.POSITION);\n    tile.hasColors =\n      Number.isFinite(dracoFeatureTableProperties.RGB) ||\n      Number.isFinite(dracoFeatureTableProperties.RGBA);\n    tile.hasNormals = Number.isFinite(dracoFeatureTableProperties.NORMAL);\n    tile.hasBatchIds = Number.isFinite(dracoFeatureTableProperties.BATCH_ID);\n    tile.isTranslucent = Number.isFinite(dracoFeatureTableProperties.RGBA);\n  }\n\n  if (dracoBuffer) {\n    const dracoData = {\n      buffer: dracoBuffer,\n      properties: {...dracoFeatureTableProperties, ...dracoBatchTableProperties},\n      featureTableProperties: dracoFeatureTableProperties,\n      batchTableProperties: dracoBatchTableProperties,\n      dequantizeInShader: false\n    };\n\n    await loadDraco(tile, dracoData, options, context);\n  }\n}\n\n// eslint-disable-next-line complexity, max-statements\nexport async function loadDraco(tile, dracoData, options, context) {\n  const {parse} = context;\n  const data = await parse(dracoData.buffer, options.DracoLoader);\n  const decodedPositions = data.attributes.POSITION && data.attributes.POSITION.value;\n  const decodedColors = data.attributes.COLOR_0 && data.attributes.COLOR_0.value;\n  const decodedNormals = data.attributes.NORMAL && data.attributes.NORMAL.value;\n  const decodedBatchIds = data.attributes.BATCH_ID && data.attributes.BATCH_ID.value;\n  const isQuantizedDraco = decodedPositions && data.attributes.POSITION.value.quantization;\n  const isOctEncodedDraco = decodedNormals && data.attributes.NORMAL.value.quantization;\n  if (isQuantizedDraco) {\n    // Draco quantization range == quantized volume scale - size in meters of the quantized volume\n    // Internal quantized range is the range of values of the quantized data, e.g. 255 for 8-bit, 1023 for 10-bit, etc\n    const quantization = data.POSITION.data.quantization;\n    const range = quantization.range;\n    tile.quantizedVolumeScale = new Vector3(range, range, range);\n    tile.quantizedVolumeOffset = new Vector3(quantization.minValues);\n    tile.quantizedRange = (1 << quantization.quantizationBits) - 1.0;\n    tile.isQuantizedDraco = true;\n  }\n  if (isOctEncodedDraco) {\n    tile.octEncodedRange = (1 << data.NORMAL.data.quantization.quantizationBits) - 1.0;\n    tile.isOctEncodedDraco = true;\n  }\n\n  tile.attributes = {\n    positions: decodedPositions,\n    colors: normalize3DTileColorAttribute(tile, decodedColors),\n    normals: decodedNormals,\n    batchIds: decodedBatchIds\n  };\n}\n\n/*\n  const batchTable = new Tile3DBatchTable(tile);\n\n  // parseDracoBuffer(tile, featureTable, batchTable);\n\n  if (!tile.attributes.positions) {\n    throw new Error('Either POSITION or POSITION_QUANTIZED must be defined.');\n  }\n}\n/*\n\n  if (!tile.attributes.positions) {\n    if (featureTable.hasProperty('POSITION')) {\n      tile.attributes.positions = featureTable.getPropertyArray('POSITION', GL.FLOAT, 3);\n    } else if (featureTable.hasProperty('POSITION_QUANTIZED')) {\n      tile.attributes.positions = featureTable.getPropertyArray('POSITION_QUANTIZED', GL.UNSIGNED_SHORT, 3);\n\n\n  if (!tile.colors) {\n    if (featureTable.hasProperty('RGBA')) {\n      tile.colors = featureTable.getPropertyArray('RGBA', GL.UNSIGNED_BYTE, 4);\n      tile.isTranslucent = true;\n    } else if (featureTable.hasProperty('RGB')) {\n      tile.colors = featureTable.getPropertyArray('RGB', GL.UNSIGNED_BYTE, 3);\n    } else if (featureTable.hasPropertry('RGB565')) {\n      tile.colors = featureTable.getPropertyArray('RGB565', GL.UNSIGNED_SHORT, 1);\n      tile.isRGB565 = true;\n    }\n  }\n\n  if (!tile.attributes.normals) {\n    if (featureTable.getPropertry('NORMAL')) {\n      tile.attributes.normals = featureTable.getPropertyArray('NORMAL', GL.FLOAT, 3);\n    } else if (featureTable.getProperty('NORMAL_OCT16P')) {\n      tile.attributes.normals = featureTable.getPropertyArray('NORMAL_OCT16P', GL.UNSIGNED_BYTE, 2);\n      tile.isOctEncoded16P = true;\n    }\n  }\n\n  if (!tile.batchIds) {\n    if (featureTable.hasProperty('BATCH_ID')) {\n      tile.batchIds = featureTable.getPropertyArray('BATCH_ID', GL.UNSIGNED_SHORT, 1);\n    }\n  }\n\n  if (!tile.attributes.positions) {\n    throw new Error('Either POSITION or POSITION_QUANTIZED must be defined.');\n  }\n\n  if (featureTable.getPropertry('CONSTANT_RGBA')) {\n    tile.constantRGBA = featureTable.getGlobalProperty('CONSTANT_RGBA', GL.UNSIGNED_BYTE, 4);\n  }\n\n  if (tile.batchIds) {\n    const batchLength = featureTable.getGlobalProperty('BATCH_LENGTH');\n    if (!defined(batchLength)) {\n      throw new Error('Global property: BATCH_LENGTH must be defined when BATCH_ID is defined.');\n    }\n\n    if (defined(batchTableBinary)) {\n      // Copy the batchTableBinary section and let the underlying ArrayBuffer be freed\n      batchTableBinary = new Uint8Array(batchTableBinary);\n    }\n\n    if (defined(pointCloud._batchTableLoaded)) {\n      pointCloud._batchTableLoaded(batchLength, batchTableJson, batchTableBinary);\n    }\n  }\n\n  // If points are not batched and there are per-point properties, use these properties for styling purposes\n  var styleableProperties;\n  if (!hasBatchIds && defined(batchTableBinary)) {\n    tile.styleableProperties = Cesium3DTileBatchTable.getBinaryProperties(\n      pointsLength,\n      batchTableJson,\n      batchTableBinary\n    );\n  }\n\n  tile.draco = draco;\n}\n\n// Separate parsing and decoding of Draco\nexport function parseDracoBuffer(tile, featureTable, batchTable) {\n  let dracoBuffer;\n  let dracoFeatureTableProperties;\n  let dracoBatchTableProperties;\n\n  const batchTableDraco = batchTable.getExtension('3DTILES_draco_point_compression');\n  if (batchTableDraco) {\n    dracoBatchTableProperties = batchTableDraco.properties;\n  }\n\n  const featureTableDraco = featureTable.getExtension('3DTILES_draco_point_compression');\n  if (featureTableDraco) {\n    dracoFeatureTableProperties = featureTableDraco.properties;\n    const dracoByteOffset = featureTableDraco.byteOffset;\n    const dracoByteLength = featureTableDraco.byteLength;\n    if (!dracoFeatureTableProperties || !dracoByteOffset || !dracoByteLength) {\n      throw new Error('Draco properties, byteOffset, and byteLength must be defined');\n    }\n\n    dracoBuffer = arraySlice(\n      featureTableBinary,\n      dracoByteOffset,\n      dracoByteOffset + dracoByteLength\n    );\n    tile.hasPositions = dracoFeatureTableProperties.POSITION;\n    tile.hasColors = dracoFeatureTableProperties.RGB || dracoFeatureTableProperties.RGBA;\n    tile.hasNormals = dracoFeatureTableProperties.NORMAL;\n    tile.hasBatchIds = dracoFeatureTableProperties.BATCH_ID;\n    tile.isTranslucent = dracoFeatureTableProperties.RGBA;\n  }\n\n  if (dracoBuffer) {\n    tile.draco = {\n      buffer: dracoBuffer,\n      properties: {...dracoFeatureTableProperties, ...dracoBatchTableProperties},\n      featureTableProperties: dracoFeatureTableProperties,\n      batchTableProperties: dracoBatchTableProperties,\n      dequantizeInShader: false\n    };\n\n    tile.decodingState = DECODING_STATE.NEEDS_DECODE;\n  }\n}\n\n/*\nfunction decodeDraco(tile, context) {\n  if (tile.decodingState === DECODING_STATE.READY) {\n    return false;\n  }\n  if (tile.decodingState === DECODING_STATE.NEEDS_DECODE) {\n    var parsedContent = tile._parsedContent;\n    var draco = parsedContent.draco;\n    var decodePromise = DracoLoader.decodePointCloud(draco, context);\n    if (defined(decodePromise)) {\n      tile.decodingState = DECODING_STATE.DECODING;\n      decodePromise.then(function(result) {\n        tile.decodingState = DECODING_STATE.READY;\n        var decodedPositions = defined(result.POSITION) ? result.POSITION.array : undefined;\n        var decodedRgb = defined(result.RGB) ? result.RGB.array : undefined;\n        var decodedRgba = defined(result.RGBA) ? result.RGBA.array : undefined;\n        var decodedNormals = defined(result.NORMAL) ? result.NORMAL.array : undefined;\n        var decodedBatchIds = defined(result.BATCH_ID) ? result.BATCH_ID.array : undefined;\n        var isQuantizedDraco = defined(decodedPositions) && defined(result.POSITION.data.quantization);\n        var isOctEncodedDraco = defined(decodedNormals) && defined(result.NORMAL.data.quantization);\n        if (isQuantizedDraco) {\n          // Draco quantization range == quantized volume scale - size in meters of the quantized volume\n          // Internal quantized range is the range of values of the quantized data, e.g. 255 for 8-bit, 1023 for 10-bit, etc\n          var quantization = result.POSITION.data.quantization;\n          var range = quantization.range;\n          tile._quantizedVolumeScale = Cartesian3.fromElements(range, range, range);\n          tile._quantizedVolumeOffset = Cartesian3.unpack(quantization.minValues);\n          tile._quantizedRange = (1 << quantization.quantizationBits) - 1.0;\n          tile._isQuantizedDraco = true;\n        }\n        if (isOctEncodedDraco) {\n          tile._octEncodedRange = (1 << result.NORMAL.data.quantization.quantizationBits) - 1.0;\n          tile._isOctEncodedDraco = true;\n        }\n        var styleableProperties = parsedContent.styleableProperties;\n        var batchTableProperties = draco.batchTableProperties;\n        for (var name in batchTableProperties) {\n          if (batchTableProperties.hasOwnProperty(name)) {\n            var property = result[name];\n            if (!defined(styleableProperties)) {\n              styleableProperties = {};\n            }\n            styleableProperties[name] = {\n              typedArray : property.array,\n              componentCount : property.data.componentsPerAttribute\n            };\n          }\n        }\n        parsedContent.positions = defaultValue(decodedPositions, parsedContent.positions);\n        parsedContent.colors = defaultValue(defaultValue(decodedRgba, decodedRgb), parsedContent.colors);\n        parsedContent.normals = defaultValue(decodedNormals, parsedContent.normals);\n        parsedContent.batchIds = defaultValue(decodedBatchIds, parsedContent.batchIds);\n        parsedContent.styleableProperties = styleableProperties;\n      }).otherwise(function(error) {\n        tile.decodingState = DECODING_STATE.FAILED;\n        tile._readyPromise.reject(error);\n      });\n    }\n  }\n  return true;\n}\n*/\n"],"file":"parse-3d-tile-point-cloud.js"}