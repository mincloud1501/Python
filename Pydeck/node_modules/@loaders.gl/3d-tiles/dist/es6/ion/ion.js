import assert from '../utils/assert';
import { _getErrorMessageFromResponse } from '@loaders.gl/core';
const CESIUM_ION_URL = 'https://api.cesium.com/v1/assets';
export async function getIonTilesetMetadata(accessToken, assetId) {
  if (!assetId) {
    const assets = await getIonAssets(accessToken);

    for (const item of assets.items) {
      if (item.type === '3DTILES') {
        assetId = item.id;
      }
    }
  }

  const ionAssetMetadata = await getIonAssetMetadata(accessToken, assetId);
  const {
    type,
    url
  } = ionAssetMetadata;
  assert(type === '3DTILES' && url);
  ionAssetMetadata.headers = {
    Authorization: "Bearer ".concat(ionAssetMetadata.accessToken)
  };
  return ionAssetMetadata;
}
export async function getIonAssets(accessToken) {
  assert(accessToken);
  const url = CESIUM_ION_URL;
  const headers = {
    Authorization: "Bearer ".concat(accessToken)
  };
  const response = await fetch(url, {
    headers
  });

  if (!response.ok) {
    throw new Error((await _getErrorMessageFromResponse(response)));
  }

  return await response.json();
}
export async function getIonAssetMetadata(accessToken, assetId) {
  assert(accessToken, assetId);
  const url = "".concat(CESIUM_ION_URL, "/").concat(assetId, "/endpoint");
  const headers = {
    Authorization: "Bearer ".concat(accessToken)
  };
  const response = await fetch(url, {
    headers
  });

  if (!response.ok) {
    throw new Error((await _getErrorMessageFromResponse(response)));
  }

  return await response.json();
}
//# sourceMappingURL=ion.js.map