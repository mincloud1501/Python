{"version":3,"sources":["../../../src/ion/ion.js"],"names":["assert","_getErrorMessageFromResponse","CESIUM_ION_URL","getIonTilesetMetadata","accessToken","assetId","assets","getIonAssets","item","items","type","id","ionAssetMetadata","getIonAssetMetadata","url","headers","Authorization","response","fetch","ok","Error","json"],"mappings":"AAEA,OAAOA,MAAP,MAAmB,iBAAnB;AACA,SAAQC,4BAAR,QAA2C,kBAA3C;AAEA,MAAMC,cAAc,GAAG,kCAAvB;AAIA,OAAO,eAAeC,qBAAf,CAAqCC,WAArC,EAAkDC,OAAlD,EAA2D;AAEhE,MAAI,CAACA,OAAL,EAAc;AACZ,UAAMC,MAAM,GAAG,MAAMC,YAAY,CAACH,WAAD,CAAjC;;AACA,SAAK,MAAMI,IAAX,IAAmBF,MAAM,CAACG,KAA1B,EAAiC;AAC/B,UAAID,IAAI,CAACE,IAAL,KAAc,SAAlB,EAA6B;AAC3BL,QAAAA,OAAO,GAAGG,IAAI,CAACG,EAAf;AACD;AACF;AACF;;AAGD,QAAMC,gBAAgB,GAAG,MAAMC,mBAAmB,CAACT,WAAD,EAAcC,OAAd,CAAlD;AACA,QAAM;AAACK,IAAAA,IAAD;AAAOI,IAAAA;AAAP,MAAcF,gBAApB;AACAZ,EAAAA,MAAM,CAACU,IAAI,KAAK,SAAT,IAAsBI,GAAvB,CAAN;AAGAF,EAAAA,gBAAgB,CAACG,OAAjB,GAA2B;AACzBC,IAAAA,aAAa,mBAAYJ,gBAAgB,CAACR,WAA7B;AADY,GAA3B;AAGA,SAAOQ,gBAAP;AACD;AAGD,OAAO,eAAeL,YAAf,CAA4BH,WAA5B,EAAyC;AAC9CJ,EAAAA,MAAM,CAACI,WAAD,CAAN;AACA,QAAMU,GAAG,GAAGZ,cAAZ;AACA,QAAMa,OAAO,GAAG;AAACC,IAAAA,aAAa,mBAAYZ,WAAZ;AAAd,GAAhB;AACA,QAAMa,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAD,EAAM;AAACC,IAAAA;AAAD,GAAN,CAA5B;;AACA,MAAI,CAACE,QAAQ,CAACE,EAAd,EAAkB;AAChB,UAAM,IAAIC,KAAJ,EAAU,MAAMnB,4BAA4B,CAACgB,QAAD,CAA5C,EAAN;AACD;;AACD,SAAO,MAAMA,QAAQ,CAACI,IAAT,EAAb;AACD;AAGD,OAAO,eAAeR,mBAAf,CAAmCT,WAAnC,EAAgDC,OAAhD,EAAyD;AAC9DL,EAAAA,MAAM,CAACI,WAAD,EAAcC,OAAd,CAAN;AACA,QAAMS,GAAG,aAAMZ,cAAN,cAAwBG,OAAxB,cAAT;AACA,QAAMU,OAAO,GAAG;AAACC,IAAAA,aAAa,mBAAYZ,WAAZ;AAAd,GAAhB;AACA,QAAMa,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAD,EAAM;AAACC,IAAAA;AAAD,GAAN,CAA5B;;AACA,MAAI,CAACE,QAAQ,CAACE,EAAd,EAAkB;AAChB,UAAM,IAAIC,KAAJ,EAAU,MAAMnB,4BAA4B,CAACgB,QAAD,CAA5C,EAAN;AACD;;AACD,SAAO,MAAMA,QAAQ,CAACI,IAAT,EAAb;AACD","sourcesContent":["// Minimal support to load tilsets from the Cesium ION services\n/* global fetch */\nimport assert from '../utils/assert';\nimport {_getErrorMessageFromResponse} from '@loaders.gl/core';\n\nconst CESIUM_ION_URL = 'https://api.cesium.com/v1/assets';\n// const CESIUM_ION_URL = 'https://api.cesium.com/v1/assets/2/endpoint';\n\n// Returns `{url, headers, type, attributions}` for an ion tileset\nexport async function getIonTilesetMetadata(accessToken, assetId) {\n  // Step 1, if no asset id, look for first 3DTILES asset associated with this token.\n  if (!assetId) {\n    const assets = await getIonAssets(accessToken);\n    for (const item of assets.items) {\n      if (item.type === '3DTILES') {\n        assetId = item.id;\n      }\n    }\n  }\n\n  // Step 2: Query metdatadata for this asset.\n  const ionAssetMetadata = await getIonAssetMetadata(accessToken, assetId);\n  const {type, url} = ionAssetMetadata;\n  assert(type === '3DTILES' && url);\n\n  // Prepare a headers object for fetch\n  ionAssetMetadata.headers = {\n    Authorization: `Bearer ${ionAssetMetadata.accessToken}`\n  };\n  return ionAssetMetadata;\n}\n\n// Return a list of all assets associated with accessToken\nexport async function getIonAssets(accessToken) {\n  assert(accessToken);\n  const url = CESIUM_ION_URL;\n  const headers = {Authorization: `Bearer ${accessToken}`};\n  const response = await fetch(url, {headers});\n  if (!response.ok) {\n    throw new Error(await _getErrorMessageFromResponse(response));\n  }\n  return await response.json();\n}\n\n// Return metadata for a specific asset assocated with token\nexport async function getIonAssetMetadata(accessToken, assetId) {\n  assert(accessToken, assetId);\n  const url = `${CESIUM_ION_URL}/${assetId}/endpoint`;\n  const headers = {Authorization: `Bearer ${accessToken}`};\n  const response = await fetch(url, {headers});\n  if (!response.ok) {\n    throw new Error(await _getErrorMessageFromResponse(response));\n  }\n  return await response.json();\n}\n"],"file":"ion.js"}