{"version":3,"sources":["../../../src/request-utils/request-scheduler.js"],"names":["Stats","STAT_QUEUED_REQUESTS","STAT_ACTIVE_REQUESTS","STAT_CANCELLED_REQUESTS","STAT_QUEUED_REQUESTS_EVER","STAT_ACTIVE_REQUESTS_EVER","DEFAULT_PROPS","id","throttleRequests","maxRequests","RequestScheduler","constructor","props","requestQueue","activeRequestCount","stats","get","scheduleRequest","handle","callback","Promise","resolve","promise","reject","push","_issueNewRequests","startRequest","endRequest","trackRequestPromise","then","catch","_updateNeeded","setTimeout","_issueNewRequestsAsync","freeSlots","Math","max","_updateAllRequests","i","length","request","shift","_updateRequest","splice","sort","a","b","priority"],"mappings":"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","sourcesContent":["// TODO - this should move to core when test cases are more complete\n\n/* global setTimeout */\nimport {Stats} from 'probe.gl';\n\nconst STAT_QUEUED_REQUESTS = 'Queued Requests';\nconst STAT_ACTIVE_REQUESTS = 'Active Requests';\nconst STAT_CANCELLED_REQUESTS = 'Cancelled Requests';\nconst STAT_QUEUED_REQUESTS_EVER = 'Queued Requests Ever';\nconst STAT_ACTIVE_REQUESTS_EVER = 'Active Requests Ever';\n\nconst DEFAULT_PROPS = {\n  id: 'request-scheduler',\n  // Specifies if the request scheduler should throttle incoming requests, mainly for comparative testing\n  throttleRequests: true,\n  // The maximum number of simultaneous active requests. Un-throttled requests do not observe this limit.\n  maxRequests: 6\n};\n\n// The request scheduler does not actually issue requests, it just lets apps know\n// when the request can be issued without overwhelming the server.\n// The main use case is to let the app  reprioritize or cancel requests if\n//  circumstances change before the request can be scheduled.\n//\n// TODO - Track requests globally, across multiple servers\nexport default class RequestScheduler {\n  constructor(props = {}) {\n    this.props = {...props, ...DEFAULT_PROPS};\n\n    // Tracks the number of active requests and prioritizes/cancels queued requests.\n    this.requestQueue = [];\n    this.activeRequestCount = 0;\n\n    // Returns the statistics used by the request scheduler.\n    this.stats = new Stats({id: props.id});\n    this.stats.get(STAT_QUEUED_REQUESTS);\n    this.stats.get(STAT_ACTIVE_REQUESTS);\n    this.stats.get(STAT_CANCELLED_REQUESTS);\n    this.stats.get(STAT_QUEUED_REQUESTS_EVER);\n    this.stats.get(STAT_ACTIVE_REQUESTS_EVER);\n  }\n\n  // Called by an application that wants to issue a request, without having it deeply queued\n  // Parameter `callback` will be called when request \"slots\" open up,\n  //    allowing the caller to update priority or cancel the request\n  //    Highest priority executes first, priority < 0 cancels the request\n  // Returns: a promise that resolves when the request can be issued without queueing,\n  //    or rejects if the request has been cancelled (by the callback)\n  scheduleRequest(handle, callback = () => 0) {\n    // Allows throttling to be disabled\n    if (!this.props.throttleRequests) {\n      return Promise.resolve(handle);\n    }\n\n    const promise = new Promise((resolve, reject) => {\n      this.requestQueue.push({handle, callback, resolve, reject});\n    });\n\n    this._issueNewRequests();\n    return promise;\n  }\n\n  // Called by an application to mark that it is actively making a request\n  startRequest(handle) {\n    this.activeRequestCount++;\n  }\n\n  // Called by an application to mark that it is finished making a request\n  endRequest(handle) {\n    this.activeRequestCount--;\n    this._issueNewRequests();\n  }\n\n  // Tracks a request promise, starting and then ending the request (triggering new slots).\n  trackRequestPromise(handle, promise) {\n    this.startRequest(handle);\n    promise.then(() => this.endRequest(handle)).catch(() => this.endRequest(handle));\n  }\n\n  // PRIVATE\n\n  // We check requests asynchronously, to prevent multiple updates\n  _issueNewRequests() {\n    this._updateNeeded = true;\n    setTimeout(() => this._issueNewRequestsAsync(), 0);\n  }\n\n  // Refresh all requests and\n  _issueNewRequestsAsync() {\n    this._updateNeeded = false;\n\n    const freeSlots = Math.max(this.props.maxRequests - this.activeRequestCount, 0);\n\n    if (freeSlots === 0) {\n      return;\n    }\n\n    this._updateAllRequests();\n\n    // Resolve pending promises for the top-priority requests\n    for (let i = 0; i < freeSlots; ++i) {\n      if (this.requestQueue.length > 0) {\n        const request = this.requestQueue.shift();\n        request.resolve(true);\n      }\n    }\n\n    // Uncomment to debug\n    // console.log(`${freeSlots} free slots, ${this.requestQueue.length} queued requests`);\n  }\n\n  // Ensure all requests have updated priorities, and that no longer valid requests are cancelled\n  _updateAllRequests() {\n    const requestQueue = this.requestQueue;\n    for (let i = 0; i < requestQueue.length; ++i) {\n      const request = requestQueue[i];\n      if (!this._updateRequest(request)) {\n        // Remove the element and make sure to adjust the counter to account for shortened array\n        requestQueue.splice(i, 1);\n        i--;\n      }\n    }\n\n    // Sort the remaining requests based on priority\n    requestQueue.sort((a, b) => a.priority - b.priority);\n  }\n\n  // Update a single request by calling the callback\n  _updateRequest(request) {\n    request.priority = request.callback(request.handle); // eslint-disable-line callback-return\n\n    // by returning a negative priority, the callback cancels the request\n    if (request.priority < 0) {\n      request.resolve(false);\n      return false;\n    }\n    return true;\n  }\n}\n"],"file":"request-scheduler.js"}