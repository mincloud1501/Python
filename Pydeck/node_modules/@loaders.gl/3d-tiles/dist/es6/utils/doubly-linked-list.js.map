{"version":3,"sources":["../../../src/utils/doubly-linked-list.js"],"names":["DoublyLinkedListNode","defined","x","undefined","DoublyLinkedList","constructor","head","tail","_length","length","add","item","node","next","remove","previous","splice","nextNode","oldNodeNext"],"mappings":"AAGA,OAAOA,oBAAP,MAAiC,kCAAjC;;AAEA,MAAMC,OAAO,GAAGC,CAAC,IAAIA,CAAC,KAAKC,SAA3B;;AAOA,eAAe,MAAMC,gBAAN,CAAuB;AACpCC,EAAAA,WAAW,GAAG;AACZ,SAAKC,IAAL,GAAYH,SAAZ;AACA,SAAKI,IAAL,GAAYJ,SAAZ;AACA,SAAKK,OAAL,GAAe,CAAf;AACD;;AAED,MAAIC,MAAJ,GAAa;AACX,WAAO,KAAKD,OAAZ;AACD;;AAODE,EAAAA,GAAG,CAACC,IAAD,EAAO;AACR,UAAMC,IAAI,GAAG,IAAIZ,oBAAJ,CAAyBW,IAAzB,EAA+B,KAAKJ,IAApC,EAA0CJ,SAA1C,CAAb;;AAEA,QAAIF,OAAO,CAAC,KAAKM,IAAN,CAAX,EAAwB;AACtB,WAAKA,IAAL,CAAUM,IAAV,GAAiBD,IAAjB;AACA,WAAKL,IAAL,GAAYK,IAAZ;AACD,KAHD,MAGO;AACL,WAAKN,IAAL,GAAYM,IAAZ;AACA,WAAKL,IAAL,GAAYK,IAAZ;AACD;;AAED,MAAE,KAAKJ,OAAP;AAEA,WAAOI,IAAP;AACD;;AAMDE,EAAAA,MAAM,CAACF,IAAD,EAAO;AACX,QAAI,CAACX,OAAO,CAACW,IAAD,CAAZ,EAAoB;AAClB;AACD;;AAED,QAAIX,OAAO,CAACW,IAAI,CAACG,QAAN,CAAP,IAA0Bd,OAAO,CAACW,IAAI,CAACC,IAAN,CAArC,EAAkD;AAChDD,MAAAA,IAAI,CAACG,QAAL,CAAcF,IAAd,GAAqBD,IAAI,CAACC,IAA1B;AACAD,MAAAA,IAAI,CAACC,IAAL,CAAUE,QAAV,GAAqBH,IAAI,CAACG,QAA1B;AACD,KAHD,MAGO,IAAId,OAAO,CAACW,IAAI,CAACG,QAAN,CAAX,EAA4B;AAEjCH,MAAAA,IAAI,CAACG,QAAL,CAAcF,IAAd,GAAqBV,SAArB;AACA,WAAKI,IAAL,GAAYK,IAAI,CAACG,QAAjB;AACD,KAJM,MAIA,IAAId,OAAO,CAACW,IAAI,CAACC,IAAN,CAAX,EAAwB;AAE7BD,MAAAA,IAAI,CAACC,IAAL,CAAUE,QAAV,GAAqBZ,SAArB;AACA,WAAKG,IAAL,GAAYM,IAAI,CAACC,IAAjB;AACD,KAJM,MAIA;AAEL,WAAKP,IAAL,GAAYH,SAAZ;AACA,WAAKI,IAAL,GAAYJ,SAAZ;AACD;;AAEDS,IAAAA,IAAI,CAACC,IAAL,GAAYV,SAAZ;AACAS,IAAAA,IAAI,CAACG,QAAL,GAAgBZ,SAAhB;AAEA,MAAE,KAAKK,OAAP;AACD;;AAODQ,EAAAA,MAAM,CAACJ,IAAD,EAAOK,QAAP,EAAiB;AACrB,QAAIL,IAAI,KAAKK,QAAb,EAAuB;AACrB;AACD;;AAGD,SAAKH,MAAL,CAAYG,QAAZ;AAEA,UAAMC,WAAW,GAAGN,IAAI,CAACC,IAAzB;AACAD,IAAAA,IAAI,CAACC,IAAL,GAAYI,QAAZ;;AAGA,QAAI,KAAKV,IAAL,KAAcK,IAAlB,EAAwB;AACtB,WAAKL,IAAL,GAAYU,QAAZ;AACD,KAFD,MAEO;AACLC,MAAAA,WAAW,CAACH,QAAZ,GAAuBE,QAAvB;AACD;;AAEDA,IAAAA,QAAQ,CAACJ,IAAT,GAAgBK,WAAhB;AACAD,IAAAA,QAAQ,CAACF,QAAT,GAAoBH,IAApB;AACD;;AAzFmC","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport DoublyLinkedListNode from '../utils/doubly-linked-list-node';\n\nconst defined = x => x !== undefined;\n\n/**\n * Doubly linked list\n *\n * @private\n */\nexport default class DoublyLinkedList {\n  constructor() {\n    this.head = undefined;\n    this.tail = undefined;\n    this._length = 0;\n  }\n\n  get length() {\n    return this._length;\n  }\n\n  /**\n   * Adds the item to the end of the list\n   * @param {*} [item]\n   * @return {DoublyLinkedListNode}\n   */\n  add(item) {\n    const node = new DoublyLinkedListNode(item, this.tail, undefined);\n\n    if (defined(this.tail)) {\n      this.tail.next = node;\n      this.tail = node;\n    } else {\n      this.head = node;\n      this.tail = node;\n    }\n\n    ++this._length;\n\n    return node;\n  }\n\n  /**\n   * Removes the given node from the list\n   * @param {DoublyLinkedListNode} node\n   */\n  remove(node) {\n    if (!defined(node)) {\n      return;\n    }\n\n    if (defined(node.previous) && defined(node.next)) {\n      node.previous.next = node.next;\n      node.next.previous = node.previous;\n    } else if (defined(node.previous)) {\n      // Remove last node\n      node.previous.next = undefined;\n      this.tail = node.previous;\n    } else if (defined(node.next)) {\n      // Remove first node\n      node.next.previous = undefined;\n      this.head = node.next;\n    } else {\n      // Remove last node in the linked list\n      this.head = undefined;\n      this.tail = undefined;\n    }\n\n    node.next = undefined;\n    node.previous = undefined;\n\n    --this._length;\n  }\n\n  /**\n   * Moves nextNode after node\n   * @param {DoublyLinkedListNode} node\n   * @param {DoublyLinkedListNode} nextNode\n   */\n  splice(node, nextNode) {\n    if (node === nextNode) {\n      return;\n    }\n\n    // Remove nextNode, then insert after node\n    this.remove(nextNode);\n\n    const oldNodeNext = node.next;\n    node.next = nextNode;\n\n    // Tail check\n    if (this.tail === node) {\n      this.tail = nextNode;\n    } else {\n      oldNodeNext.previous = nextNode;\n    }\n\n    nextNode.next = oldNodeNext;\n    nextNode.previous = node;\n  }\n}\n"],"file":"doubly-linked-list.js"}