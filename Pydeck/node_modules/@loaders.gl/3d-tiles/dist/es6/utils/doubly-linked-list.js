import DoublyLinkedListNode from '../utils/doubly-linked-list-node';

const defined = x => x !== undefined;

export default class DoublyLinkedList {
  constructor() {
    this.head = undefined;
    this.tail = undefined;
    this._length = 0;
  }

  get length() {
    return this._length;
  }

  add(item) {
    const node = new DoublyLinkedListNode(item, this.tail, undefined);

    if (defined(this.tail)) {
      this.tail.next = node;
      this.tail = node;
    } else {
      this.head = node;
      this.tail = node;
    }

    ++this._length;
    return node;
  }

  remove(node) {
    if (!defined(node)) {
      return;
    }

    if (defined(node.previous) && defined(node.next)) {
      node.previous.next = node.next;
      node.next.previous = node.previous;
    } else if (defined(node.previous)) {
      node.previous.next = undefined;
      this.tail = node.previous;
    } else if (defined(node.next)) {
      node.next.previous = undefined;
      this.head = node.next;
    } else {
      this.head = undefined;
      this.tail = undefined;
    }

    node.next = undefined;
    node.previous = undefined;
    --this._length;
  }

  splice(node, nextNode) {
    if (node === nextNode) {
      return;
    }

    this.remove(nextNode);
    const oldNodeNext = node.next;
    node.next = nextNode;

    if (this.tail === node) {
      this.tail = nextNode;
    } else {
      oldNodeNext.previous = nextNode;
    }

    nextNode.next = oldNodeNext;
    nextNode.previous = node;
  }

}
//# sourceMappingURL=doubly-linked-list.js.map