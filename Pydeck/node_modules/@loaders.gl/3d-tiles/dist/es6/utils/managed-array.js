import assert from './assert';
export default class ManagedArray {
  constructor(length = 0) {
    this._array = new Array(length);
    this._length = length;
  }

  get length() {
    return this._length;
  }

  set length(length) {
    this._length = length;

    if (length > this._array.length) {
      this._array.length = length;
    }
  }

  get values() {
    return this._array;
  }

  get(index) {
    assert(index < this._array.length);
    return this._array[index];
  }

  set(index, element) {
    assert(index >= 0);

    if (index >= this.length) {
      this.length = index + 1;
    }

    this._array[index] = element;
  }

  peek() {
    return this._array[this._length - 1];
  }

  push(element) {
    const index = this.length++;
    this._array[index] = element;
  }

  pop() {
    return this._array[--this.length];
  }

  reserve(length) {
    assert(length >= 0);

    if (length > this._array.length) {
      this._array.length = length;
    }
  }

  resize(length) {
    assert(length >= 0);
    this.length = length;
  }

  trim(length = this.length) {
    this._array.length = length;
  }

}
//# sourceMappingURL=managed-array.js.map