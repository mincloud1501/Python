import { Vector3, Matrix4 } from 'math.gl';
import { CullingVolume } from '@math.gl/culling';
import { parse, fetchFile, path } from '@loaders.gl/core';
import Tile3DLoader from '../tile-3d-loader';
import Tileset3DLoader from '../tileset-3d-loader';
import { TILE3D_REFINEMENT, TILE3D_CONTENT_STATE, TILE3D_OPTIMIZATION_HINT } from '../constants';
import assert from '../utils/assert';
import { createBoundingVolume } from './helpers/bounding-volume';

const defined = x => x !== undefined && x !== null;

const scratchDate = new Date();
const scratchCommandList = [];
const scratchToTileCenter = new Vector3();
const scratchPlane = new Plane();
import { INTERSECT, Intersect, Plane } from '@math.gl/culling';

function computeVisibilityWithPlaneMask(cullingVolume, boundingVolume, parentPlaneMask) {
  assert(boundingVolume, 'boundingVolume is required.');
  assert(Number.isFinite(parentPlaneMask), 'parentPlaneMask is required.');

  if (parentPlaneMask === CullingVolume.MASK_OUTSIDE || parentPlaneMask === CullingVolume.MASK_INSIDE) {
    return parentPlaneMask;
  }

  let mask = CullingVolume.MASK_INSIDE;
  const planes = cullingVolume.planes;

  for (let k = 0; k < cullingVolume.planes.length; ++k) {
    const flag = k < 31 ? 1 << k : 0;

    if (k < 31 && (parentPlaneMask & flag) === 0) {
      continue;
    }

    const plane = scratchPlane.fromNormalDistance(planes[k].normal, planes[k].distance);
    const result = boundingVolume.intersectPlane(plane);

    if (result === Intersect.OUTSIDE) {
      return CullingVolume.MASK_OUTSIDE;
    } else if (result === Intersect.INTERSECTING) {
      mask |= flag;
    }
  }

  return mask;
}

export default class Tile3DHeader {
  constructor(tileset, header, parentHeader, basePath) {
    assert(typeof header === 'object');
    this._tileset = tileset;
    this._header = header;
    this._basePath = basePath;
    this._content = null;
    this._contentState = TILE3D_CONTENT_STATE.UNLOADED;
    this._gpuMemoryUsageInBytes = 0;
    this.parent = parentHeader;
    this.children = [];
    this.refine = this._getRefine(header.refine);
    this.cacheNode = undefined;
    this.userData = {};

    if ('geometricError' in header) {
      this.geometricError = header.geometricError;
    } else {
      this.geometricError = this.parent && this.parent.geometricError || tileset.geometricError;
      console.warn('3D Tile: Required prop geometricError is undefined. Using parent error');
    }

    this._initializeTransforms(header);

    this._initializeBoundingVolumes(header);

    this._initializeContent(header);

    this._initializeCache(header);

    this._optimChildrenWithinParent = TILE3D_OPTIMIZATION_HINT.NOT_COMPUTED;

    this._initializeRenderingState();

    Object.seal(this);
  }

  destroy() {
    this._header = null;
  }

  isDestroyed() {
    return this._header === null;
  }

  get gpuMemoryUsageInBytes() {
    return this._gpuMemoryUsageInBytes;
  }

  get tileset() {
    return this._tileset;
  }

  get depth() {
    return this._depth;
  }

  get selectedFrame() {
    return this._selectedFrame;
  }

  get isVisibleAndInRequestVolume() {
    return this._visible && this._inRequestVolume;
  }

  get content() {
    return this._content;
  }

  get contentReady() {
    return this._contentState === TILE3D_CONTENT_STATE.READY;
  }

  get hasRenderContent() {
    return !this.hasEmptyContent && !this.hasTilesetContent;
  }

  get contentAvailable() {
    return this.contentReady && this.hasRenderContent || defined(this._expiredContent) && !this.contentFailed;
  }

  get hasUnloadedContent() {
    return this.hasRenderContent && this.contentUnloaded;
  }

  get contentUnloaded() {
    return this._contentState === TILE3D_CONTENT_STATE.UNLOADED;
  }

  get contentExpired() {
    return this._contentState === TILE3D_CONTENT_STATE.EXPIRED;
  }

  get contentFailed() {
    return this._contentState === TILE3D_CONTENT_STATE.FAILED;
  }

  get url() {
    return this.tileset.getTileUrl(this.contentUri, this._basePath);
  }

  get uri() {
    return this.tileset.getTileUrl(this.contentUri, this._basePath);
  }

  get boundingVolume() {
    return this._boundingVolume;
  }

  get contentBoundingVolume() {
    return this._contentBoundingVolume || this._boundingVolume;
  }

  get boundingSphere() {
    return this._boundingVolume.boundingSphere;
  }

  get extras() {
    return this._header.extras;
  }

  get depth() {
    return this._depth;
  }

  getScreenSpaceError(frameState, useParentGeometricError) {
    const tileset = this._tileset;
    const parentGeometricError = this.parent && this.parent.geometricError || tileset.geometricError;
    const geometricError = useParentGeometricError ? parentGeometricError : this.geometricError;

    if (geometricError === 0.0) {
      return 0.0;
    }

    const distance = Math.max(this._distanceToCamera, 1e-7);
    const {
      height,
      sseDenominator
    } = frameState;
    let error = geometricError * height / (distance * sseDenominator);
    error -= this._getDynamicScreenSpaceError(distance);
    return error;
  }

  _getDynamicScreenSpaceError(distance) {
    function fog(distanceToCamera, density) {
      const scalar = distanceToCamera * density;
      return 1.0 - Math.exp(-(scalar * scalar));
    }

    const tileset = this._tileset;

    if (tileset.dynamicScreenSpaceError && tileset._dynamicScreenSpaceErrorComputedDensity) {
      const density = tileset._dynamicScreenSpaceErrorComputedDensity;
      const factor = tileset.dynamicScreenSpaceErrorFactor;
      const dynamicError = fog(distance, density) * factor;
      return dynamicError;
    }

    return 0;
  }

  async loadContent() {
    if (this.hasEmptyContent) {
      return false;
    }

    if (this._content) {
      return true;
    }

    const expired = this.contentExpired;

    if (expired) {
      this.expireDate = undefined;
    }

    this._contentState = TILE3D_CONTENT_STATE.LOADING;

    function updatePriority(tile) {
      if (!tile._visible) {
        return -1;
      }

      if (tile._contentState === TILE3D_CONTENT_STATE.UNLOADED) {
        return -1;
      }

      return Math.max(1e7 - tile._priority, 0) || 0;
    }

    const cancelled = !(await this.tileset._requestScheduler.scheduleRequest(this, updatePriority));

    if (cancelled) {
      this._contentState = TILE3D_CONTENT_STATE.UNLOADED;
      return false;
    }

    try {
      const contentUri = this.uri;
      let response;

      try {
        this.tileset._requestScheduler.startRequest(this);

        response = await fetchFile(contentUri, this.tileset.options.fetchOptions);
      } finally {
        this.tileset._requestScheduler.endRequest(this);
      }

      this._content = await parse(response, [Tile3DLoader, Tileset3DLoader]);

      if (contentUri.indexOf('.json') !== -1) {
        this._tileset._initializeTileHeaders(this._content, this, path.dirname(this.uri));
      }

      this._contentState = TILE3D_CONTENT_STATE.READY;

      this._contentLoaded();

      return true;
    } catch (error) {
      this._contentState = TILE3D_CONTENT_STATE.FAILED;
      throw error;
    }
  }

  unloadContent() {
    if (!this.hasRenderContent) {
      return false;
    }

    if (this._content && this._content.destroy) {
      this._content.destroy();
    }

    this._content = null;
    this._contentState = TILE3D_CONTENT_STATE.UNLOADED;
    return true;
  }

  updateVisibility(frameState) {
    const tileset = this._tileset;

    if (this._updatedVisibilityFrame === tileset._updatedVisibilityFrame) {
      return;
    }

    const parent = this.parent;
    const parentTransform = parent ? parent.computedTransform : this._tileset.modelMatrix;
    const parentVisibilityPlaneMask = parent ? parent._visibilityPlaneMask : CullingVolume.MASK_INDETERMINATE;

    this._updateTransform(parentTransform);

    this._distanceToCamera = this.distanceToTile(frameState);
    this._screenSpaceError = this.getScreenSpaceError(frameState, false);
    this._visibilityPlaneMask = this.visibility(frameState, parentVisibilityPlaneMask);
    this._visible = this._visibilityPlaneMask !== CullingVolume.MASK_OUTSIDE;
    this._inRequestVolume = this.insideViewerRequestVolume(frameState);
    this._updatedVisibilityFrame = tileset._updatedVisibilityFrame;
  }

  updateExpiration() {
    if (defined(this.expireDate) && this.contentReady && !this.hasEmptyContent) {
      const now = Date.now(scratchDate);

      if (Date.lessThan(this.expireDate, now)) {
        this._contentState = TILE3D_CONTENT_STATE.EXPIRED;
        this._expiredContent = this._content;
      }
    }
  }

  visibility(frameState, parentVisibilityPlaneMask) {
    const {
      cullingVolume
    } = frameState;
    const {
      boundingVolume,
      tileset
    } = this;
    const {
      clippingPlanes,
      clippingPlanesOriginMatrix
    } = tileset;

    if (clippingPlanes && clippingPlanes.enabled) {
      const intersection = clippingPlanes.computeIntersectionWithBoundingVolume(boundingVolume, clippingPlanesOriginMatrix);
      this._isClipped = intersection !== Intersect.INSIDE;

      if (intersection === Intersect.OUTSIDE) {
        return CullingVolume.MASK_OUTSIDE;
      }
    }

    return computeVisibilityWithPlaneMask(cullingVolume, boundingVolume, parentVisibilityPlaneMask);
  }

  contentVisibility(frameState) {
    return true;
  }

  distanceToTile(frameState) {
    const boundingVolume = this._boundingVolume;
    return Math.sqrt(boundingVolume.distanceSquaredTo(frameState.camera.position));
  }

  cameraSpaceZDepth({
    camera
  }) {
    const boundingVolume = this.boundingVolume;
    scratchToTileCenter.subVectors(boundingVolume.center, camera.position);
    return camera.direction.dot(scratchToTileCenter);
  }

  insideViewerRequestVolume(frameState) {
    const viewerRequestVolume = this._viewerRequestVolume;
    return !viewerRequestVolume || viewerRequestVolume.distanceToCamera(frameState) === 0.0;
  }

  _initializeCache(header) {
    this.cacheNode = undefined;
    let expire = header.expire;
    let expireDuration;
    let expireDate;

    if (expire) {
      expireDuration = expire.duration;

      if (expire.date) {
        expireDate = Date.fromIso8601(expire.date);
      }
    }

    this.expireDuration = expireDuration;
    this.expireDate = expireDate;
  }

  _initializeTransforms(tileHeader) {
    this.transform = tileHeader.transform ? new Matrix4(tileHeader.transform) : new Matrix4();
    const parent = this.parent;
    const tileset = this._tileset;
    const parentTransform = parent && parent.computedTransform ? parent.computedTransform.clone() : tileset.modelMatrix.clone();
    this.computedTransform = new Matrix4(parentTransform).multiplyRight(this.transform);
    const parentInitialTransform = parent && parent._initialTransform ? parent._initialTransform.clone() : new Matrix4();
    this._initialTransform = new Matrix4(parentInitialTransform).multiplyRight(this.transform);
  }

  _initializeBoundingVolumes(tileHeader) {
    this._boundingVolume = createBoundingVolume(tileHeader.boundingVolume, this.computedTransform);
    this._contentBoundingVolume = null;
    this._viewerRequestVolume = null;

    if (tileHeader.content && tileHeader.content.boundingVolume) {
      this._contentBoundingVolume = createBoundingVolume(tileHeader.boundingVolume, this.computedTransform);
    }

    if (tileHeader.viewerRequestVolume) {
      this._viewerRequestVolume = createBoundingVolume(tileHeader.viewerRequestVolume, this.computedTransform);
    }
  }

  _initializeContent(tileHeader) {
    this._content = {
      _tileset: this._tileset,
      _tile: this
    };
    this.hasEmptyContent = true;
    this.contentState = TILE3D_CONTENT_STATE.UNLOADED;
    this._expiredContent = undefined;
    this._serverKey = null;
    this.hasTilesetContent = false;

    if (tileHeader.content) {
      this.contentUri = tileHeader.content.uri || tileHeader.content.url;

      if ('url' in tileHeader) {
        console.warn('Tileset 3D: "content.url" property deprecated. Use "content.uri" instead.');
        this.contentUri = tileHeader.url;
      }

      this._content = null;
      this.hasEmptyContent = false;
      this.contentState = TILE3D_CONTENT_STATE.UNLOADED;
      this.fullUri = this._basePath + '/' + this.contentUri;
    }
  }

  _initializeRenderingState() {
    this._distanceToCamera = 0;
    this._centerZDepth = 0;
    this._screenSpaceError = 0;
    this._visibilityPlaneMask = CullingVolume.MASK_INDETERMINATE;
    this._visible = false;
    this._inRequestVolume = false;
    this._finalResolution = true;
    this._depth = 0;
    this._stackLength = 0;
    this._selectionDepth = 0;
    this._updatedVisibilityFrame = 0;
    this._touchedFrame = 0;
    this._visitedFrame = 0;
    this._selectedFrame = 0;
    this._requestedFrame = 0;
    this._ancestorWithContent = undefined;
    this._ancestorWithContentAvailable = undefined;
    this._refines = false;
    this._shouldSelect = false;
    this._priority = 0.0;
  }

  _getRefine(refine) {
    switch (refine) {
      case 'REPLACE':
      case 'replace':
        return TILE3D_REFINEMENT.REPLACE;

      case 'ADD':
      case 'add':
        return TILE3D_REFINEMENT.ADD;

      default:
        return this.parent ? this.parent.refine : TILE3D_REFINEMENT.REPLACE;
    }
  }

  _isTileset(content) {
    return Boolean(content.asset);
  }

  _contentLoaded() {
    switch (this._content && this._content.type) {
      case 'vctr':
      case 'geom':
        tileset.traverser.disableSkipLevelOfDetail = true;

      default:
    }

    if (this._isTileset(this._content)) {
      this.hasTilesetContent = true;
    }
  }

  _updateTransform(parentTransform = new Matrix4()) {
    const computedTransform = parentTransform.clone().multiplyRight(this.transform);
    const didTransformChange = !computedTransform.equals(this.computedTransform);

    if (!didTransformChange) {
      return;
    }

    this.computedTransform = computedTransform;
    const header = this._header;
    const content = this._header.content;
    this._boundingVolume = createBoundingVolume(header.boundingVolume, this.computedTransform, this._boundingVolume);

    if (this._contentBoundingVolume) {
      this._contentBoundingVolume = createBoundingVolume(content.boundingVolume, this.computedTransform, this._contentBoundingVolume);
    }

    if (this._viewerRequestVolume) {
      this._viewerRequestVolume = createBoundingVolume(header.viewerRequestVolume, this.computedTransform, this._viewerRequestVolume);
    }
  }

}

function updateContent(tile, tileset, frameState) {
  const content = tile._content;
  const expiredContent = tile._expiredContent;

  if (expiredContent) {
    if (!tile.contentReady) {
      expiredContent.update(tileset, frameState);
      return;
    }

    tile._expiredContent.destroy();

    tile._expiredContent = undefined;
  }

  content.update(tileset, frameState);
}

function updateExpireDate(tile) {
  if (defined(tile.expireDuration)) {
    const expireDurationDate = Date.now(scratchDate);
    Date.addSeconds(expireDurationDate, tile.expireDuration, expireDurationDate);

    if (defined(tile.expireDate)) {
      if (Date.lessThan(tile.expireDate, expireDurationDate)) {
        Date.clone(expireDurationDate, tile.expireDate);
      }
    } else {
      tile.expireDate = Date.clone(expireDurationDate);
    }
  }
}

function createPriorityFunction(tile) {
  return function () {
    return tile._priority;
  };
}
//# sourceMappingURL=tile-3d-header.js.map