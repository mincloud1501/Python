{"version":3,"sources":["../../../src/tileset/tileset-3d.js"],"names":["Matrix4","Vector3","Ellipsoid","Stats","path","assert","RequestScheduler","calculateTransformProps","Tile3DHeader","Tileset3DTraverser","Tileset3DCache","TILES_TOTAL","TILES_IN_MEMORY","TILES_IN_VIEW","TILES_RENDERABLE","TILES_LOADED","TILES_LOADING","TILES_UNLOADED","TILES_LOAD_FAILED","POINTS_COUNT","TILES_GPU_MEMORY","WGS84_RADIUS_X","WGS84_RADIUS_Y","WGS84_RADIUS_Z","getZoom","boundingVolume","halfAxes","radius","width","height","x","y","z","zoomX","Math","log2","zoomY","zoomZ","DEFAULT_OPTIONS","basePath","ellipsoid","WGS84","modelMatrix","throttleRequests","maximumScreenSpaceError","maximumMemoryUsage","dynamicScreenSpaceError","dynamicScreenSpaceErrorDensity","dynamicScreenSpaceErrorFactor","skipLevelOfDetail","baseScreenSpaceError","onTileLoad","onTileUnload","onTileLoadFail","tile","message","url","console","error","getQueryParamString","queryParams","queryParamStrings","key","Object","keys","push","length","join","Tileset3D","constructor","json","options","dirname","stats","id","_initializeStats","gpuMemoryUsageInBytes","geometricError","undefined","userData","_queryParams","_requestScheduler","_traverser","_cache","_processingQueue","selectedTiles","_emptyTiles","_requestedTiles","_selectedTilesToStyle","asset","credits","_root","_properties","_extensionsUsed","_gltfUpAxis","_loadTimestamp","_timeSinceLoad","_updatedVisibilityFrame","_extras","_allTilesAdditive","_hasMixedContent","_maximumScreenSpaceError","_maximumMemoryUsage","_tilesLoaded","_initialTilesLoaded","_readyPromise","Promise","resolve","_classificationType","classificationType","_ellipsoid","_dynamicScreenSpaceErrorComputedDensity","_initializeTileSet","destroy","_destroy","properties","ready","Boolean","readyPromise","promise","tilesLoaded","root","boundingSphere","_checkReady","updateTransform","timeSinceLoad","value","extras","getTileUrl","tilePath","isDataUrl","startsWith","hasExtension","extensionName","indexOf","update","frameState","reset","traverse","assign","result","requestedTiles","_loadTile","_unloadTiles","tilesRenderable","pointsRenderable","contentAvailable","content","pointCount","get","count","trimLoadedTiles","trim","addTileToCache","add","tileset","tileToAdd","_addTileToCache","tilesetJson","Error","version","v","tilesetVersion","attributions","extensionsUsed","_initializeTileHeaders","_calculateViewProps","center","warn","cartographicCenter","zoom","cartesianToCartographic","parentTileHeader","rootTile","children","_depth","stack","pop","incrementCount","_header","childHeader","childTile","_destroyTileHeaders","parentTile","_destroySubtree","loaded","loadContent","decrementCount","toString","_content","byteLength","_unloadTile","unloadContent","unloadTiles","child","_destroyTile","unloadTile"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {Matrix4, Vector3} from 'math.gl';\nimport {Ellipsoid} from '@math.gl/geospatial';\nimport {Stats} from 'probe.gl';\nimport {path} from '@loaders.gl/core';\n\nimport assert from '../utils/assert';\nimport RequestScheduler from '../request-utils/request-scheduler';\n\nimport {calculateTransformProps} from './helpers/transform-utils';\nimport Tile3DHeader from './tile-3d-header';\nimport Tileset3DTraverser from './tileset-3d-traverser';\nimport Tileset3DCache from './tileset-3d-cache';\n\n// Tracked Stats\nconst TILES_TOTAL = 'Tiles In Tileset(s)';\nconst TILES_IN_MEMORY = 'Tiles In Memory';\nconst TILES_IN_VIEW = 'Tiles In View';\nconst TILES_RENDERABLE = 'Tiles To Render';\nconst TILES_LOADED = 'Tiles Loaded';\nconst TILES_LOADING = 'Tiles Loading';\nconst TILES_UNLOADED = 'Tiles Unloaded';\nconst TILES_LOAD_FAILED = 'Failed Tile Loads';\nconst POINTS_COUNT = 'Points';\nconst TILES_GPU_MEMORY = 'Tile Memory Use';\n\n// TODO move to Math library?\nconst WGS84_RADIUS_X = 6378137.0;\nconst WGS84_RADIUS_Y = 6378137.0;\nconst WGS84_RADIUS_Z = 6356752.3142451793;\n\nfunction getZoom(boundingVolume) {\n  const {halfAxes, radius, width, height} = boundingVolume;\n\n  if (halfAxes) {\n    // OrientedBoundingBox\n    const [x, , , , y, , , , z] = halfAxes;\n    const zoomX = Math.log2(WGS84_RADIUS_X / x / 2);\n    const zoomY = Math.log2(WGS84_RADIUS_Y / y / 2);\n    const zoomZ = Math.log2(WGS84_RADIUS_Z / z / 2);\n    return (zoomX + zoomY + zoomZ) / 3;\n  } else if (radius) {\n    // BoundingSphere\n    return Math.log2(WGS84_RADIUS_Z / radius);\n  } else if (height && width) {\n    // BoundingRectangle\n    const zoomX = Math.log2(WGS84_RADIUS_X / width);\n    const zoomY = Math.log2(WGS84_RADIUS_Y / height);\n\n    return (zoomX + zoomY) / 2;\n  }\n\n  return 18;\n}\n\nconst DEFAULT_OPTIONS = {\n  basePath: '',\n\n  ellipsoid: Ellipsoid.WGS84,\n  // A 4x4 transformation matrix this transforms the entire tileset.\n  modelMatrix: new Matrix4(),\n\n  // Set to true to enable experimental request throttling, for improved performance\n  throttleRequests: false,\n\n  // The maximum screen space error used to drive level of detail refinement.\n  maximumScreenSpaceError: 16,\n  maximumMemoryUsage: 32,\n\n  // default props\n  dynamicScreenSpaceError: false,\n  dynamicScreenSpaceErrorDensity: 0.00278,\n  dynamicScreenSpaceErrorFactor: 4.0,\n\n  // Optimization option. Determines if level of detail skipping should be applied during the traversal.\n  skipLevelOfDetail: false,\n  // The screen space error this must be reached before skipping levels of detail.\n  baseScreenSpaceError: 1024,\n\n  onTileLoad: () => {}, // Indicates this a tile's content was loaded\n  onTileUnload: () => {}, // Indicates this a tile's content was unloaded\n  onTileLoadFail: (tile, message, url) =>\n    console.error(`A 3D tile failed to load: ${url} ${message}`) // eslint-disable-line\n};\n\nfunction getQueryParamString(queryParams) {\n  const queryParamStrings = [];\n  for (const key of Object.keys(queryParams)) {\n    queryParamStrings.push(`${key}=${queryParams[key]}`);\n  }\n  switch (queryParamStrings.length) {\n    case 0:\n      return '';\n    case 1:\n      return `?${queryParamStrings[0]}`;\n    default:\n      return `?${queryParamStrings.join('&')}`;\n  }\n}\n\nexport default class Tileset3D {\n  // eslint-disable-next-line max-statements\n  constructor(json, url, options = {}) {\n    assert(json);\n\n    // PUBLIC MEMBERS\n    this.options = {...DEFAULT_OPTIONS, ...options};\n    this.url = url; // The url to a tileset JSON file.\n    this.basePath = path.dirname(url); // base path that non-absolute paths in tileset are relative to.\n    this.modelMatrix = this.options.modelMatrix;\n    this.stats = new Stats({id: url});\n    this._initializeStats();\n\n    this.gpuMemoryUsageInBytes = 0; // The total amount of GPU memory in bytes used by the tileset.\n    this.geometricError = undefined; // Geometric error when the tree is not rendered at all\n    this.userData = {};\n\n    // HELPER OBJECTS\n    this._queryParams = {};\n    this._requestScheduler = new RequestScheduler({\n      throttleRequests: this.options.throttleRequests\n    });\n    this._traverser = new Tileset3DTraverser();\n    this._cache = new Tileset3DCache();\n\n    // HOLD TRAVERSAL RESULTS\n    this._processingQueue = [];\n    this.selectedTiles = [];\n    this._emptyTiles = [];\n    this._requestedTiles = [];\n    this._selectedTilesToStyle = [];\n\n    this.asset = {}; // Metadata for the entire tileset\n    this.credits = {};\n\n    // EXTRACTED FROM TILESET\n    this._root = undefined;\n    this._properties = undefined; // Metadata for per-model/point/etc properties\n    this._extensionsUsed = undefined;\n    this._gltfUpAxis = undefined;\n\n    this._loadTimestamp = undefined;\n    this._timeSinceLoad = 0.0;\n    this._updatedVisibilityFrame = 0;\n    this._extras = undefined;\n\n    this._allTilesAdditive = true;\n    this._hasMixedContent = false;\n    this._maximumScreenSpaceError = options.maximumScreenSpaceError;\n    this._maximumMemoryUsage = options.maximumMemoryUsage;\n\n    this._tilesLoaded = false;\n    this._initialTilesLoaded = false;\n\n    this._readyPromise = Promise.resolve();\n\n    this._classificationType = this.options.classificationType;\n    this._ellipsoid = this.options.ellipsoid;\n\n    this._dynamicScreenSpaceErrorComputedDensity = 0.0; // Updated based on the camera position and direction\n\n    this._initializeTileSet(json, this.options);\n  }\n\n  destroy() {\n    this._destroy();\n  }\n\n  // Gets the tileset's asset object property, which contains metadata about the tileset.\n  // get asset() {\n  //   return this._asset;\n  // }\n\n  // Gets the tileset's properties dictionary object, which contains metadata about per-feature properties.\n  get properties() {\n    return this._properties;\n  }\n\n  // When <code>true</code>, the tileset's root tile is loaded and the tileset is ready to render.\n  get ready() {\n    return Boolean(this._root);\n  }\n\n  // Gets the promise this will be resolved when the tileset's root tile is loaded and the tileset is ready to render.\n  // This promise is resolved at the end of the frame before the first frame the tileset is rendered in.\n  get readyPromise() {\n    return this._readyPromise.promise;\n  }\n\n  // When <code>true</code>, all tiles this meet the screen space error this frame are loaded.\n  get tilesLoaded() {\n    return this._tilesLoaded;\n  }\n\n  get queryParams() {\n    return getQueryParamString(this._queryParams);\n  }\n\n  // The root tile header.\n  get root() {\n    return this._root;\n  }\n\n  // The tileset's bounding sphere.\n  get boundingSphere() {\n    this._checkReady();\n    this._root.updateTransform(this.modelMatrix);\n    return this._root.boundingSphere;\n  }\n\n  // Returns the time, in milliseconds, since the tileset was loaded and first updated.\n  get timeSinceLoad() {\n    return this._timeSinceLoad;\n  }\n\n  // The maximum amount of GPU memory (in MB) that may be used to cache tiles.\n  // Tiles not in view are unloaded to enforce this.\n  get maximumMemoryUsage() {\n    return this._maximumMemoryUsage;\n  }\n\n  set maximumMemoryUsage(value) {\n    assert(value > 0);\n    this._maximumMemoryUsage = value;\n  }\n\n  // Gets an ellipsoid describing the shape of the globe.\n  get ellipsoid() {\n    return this.options.ellipsoid;\n  }\n\n  // Returns the extras property at the top of the tileset JSON (application specific metadata).\n  get extras() {\n    return this._extras;\n  }\n\n  getTileUrl(tilePath, basePath) {\n    const isDataUrl = url => url.startsWith('data:');\n    return isDataUrl(tilePath)\n      ? tilePath\n      : `${basePath || this.basePath}/${tilePath}${this.queryParams}`;\n  }\n\n  // true if the tileset JSON file lists the extension in extensionsUsed\n  hasExtension(extensionName) {\n    return Boolean(this._extensionsUsed && this._extensionsUsed.indexOf(extensionName) > -1);\n  }\n\n  update(frameState) {\n    this._updatedVisibilityFrame++; // TODO: only update when camera or culling volume from last update moves (could be render camera change or prefetch camera)\n    this._cache.reset();\n\n    this._traverser.traverse(this.root, frameState, this.options);\n    Object.assign(this, this._traverser.result); // Hack during refactor\n\n    const requestedTiles = this._requestedTiles;\n    // Sort requests by priority before making any requests.\n    // This makes it less likely this requests will be cancelled after being issued.\n    // requestedTiles.sort((a, b) => a._priority - b._priority);\n    for (const tile of requestedTiles) {\n      this._loadTile(tile);\n    }\n\n    this._unloadTiles();\n\n    let tilesRenderable = 0;\n    let pointsRenderable = 0;\n    for (const tile of this.selectedTiles) {\n      if (tile.contentAvailable) {\n        tilesRenderable++;\n        if (tile.content.pointCount) {\n          pointsRenderable += tile.content.pointCount;\n        }\n      }\n    }\n\n    this.stats.get(TILES_IN_VIEW).count = this.selectedTiles.length;\n    this.stats.get(TILES_RENDERABLE).count = tilesRenderable;\n    this.stats.get(POINTS_COUNT).count = pointsRenderable;\n  }\n\n  // TODO - why are these public methods? For testing?\n\n  // Unloads all tiles this weren't selected the previous frame.  This can be used to\n  trimLoadedTiles() {\n    this._cache.trim();\n  }\n\n  // Add to the tile cache. Previously expired tiles are already in the cache and won't get re-added.\n  addTileToCache(tile) {\n    this._cache.add(this, tile, (tileset, tileToAdd) => tileset._addTileToCache(tileToAdd));\n  }\n\n  // PRIVATE\n\n  // eslint-disable-next-line max-statements\n  _initializeTileSet(tilesetJson, options) {\n    this.asset = tilesetJson.asset;\n    if (!this.asset) {\n      throw new Error('Tileset must have an asset property.');\n    }\n    if (this.asset.version !== '0.0' && this.asset.version !== '1.0') {\n      throw new Error('The tileset must be 3D Tiles version 0.0 or 1.0.');\n    }\n\n    // Note: `asset.tilesetVersion` is version of the tileset itself (not the version of the 3D TILES standard)\n    // We add this version as a `v=1.0` query param to fetch the right version and not get an older cached version\n    if ('tilesetVersion' in this.asset) {\n      this._queryParams.v = this.asset.tilesetVersion;\n    }\n\n    // TODO - ion resources have a credits property we can use for additional attribution.\n    this.credits = {\n      attributions: options.attributions || []\n    };\n\n    this._properties = tilesetJson.properties;\n    this.geometricError = tilesetJson.geometricError;\n    this._extensionsUsed = tilesetJson.extensionsUsed;\n    this._extras = tilesetJson.extras;\n\n    // TODO - handle configurable glTF up axis\n    // const gltfUpAxis = defined(tilesetJson.asset.gltfUpAxis)\n    //   ? Axis.fromName(tilesetJson.asset.gltfUpAxis)\n    //   : Axis.Y;\n\n    this._root = this._initializeTileHeaders(tilesetJson, null, this.basePath);\n\n    // Calculate cartographicCenter & zoom props to help apps center view on tileset\n    this._calculateViewProps();\n\n    // TODO - Do we need this?\n    // Save the original, untransformed bounding volume position so we can apply\n    // the tile transform and model matrix at run time\n    // const boundingVolume = this._root.createBoundingVolume(\n    //   tilesetJson.root.boundingVolume,\n    //   Matrix4.IDENTITY\n    // );\n    // const clippingPlanesOrigin = boundingVolume.boundingSphere.center;\n    // If this origin is above the surface of the earth\n    // we want to apply an ENU orientation as our best guess of orientation.\n    // Otherwise, we assume it gets its position/orientation completely from the\n    // root tile transform and the tileset's model matrix\n    // const originCartographic = this._ellipsoid.cartesianToCartographic(clippingPlanesOrigin);\n    // if (\n    //   originCartographic &&\n    //   originCartographic.height > ApproximateTerrainHeights._defaultMinTerrainHeight\n    // ) {\n    //   this._initialClippingPlanesOriginMatrix = Transforms.eastNorthUpToFixedFrame(\n    //     clippingPlanesOrigin\n    //   );\n    // }\n\n    // this._clippingPlanesOriginMatrix = Matrix4.clone(this._initialClippingPlanesOriginMatrix);\n    // this._readyPromise.resolve(this);\n  }\n\n  // Called during intializeTileset to initialize the tileset's cartographic center (longitude, latitude) and zoom.\n  _calculateViewProps() {\n    const root = this._root;\n    const {center} = root.boundingVolume;\n    // TODO - handle all cases\n    if (!center) {\n      // eslint-disable-next-line\n      console.warn('center was not pre-calculated for the root tile');\n      this.cartographicCenter = new Vector3();\n      this.zoom = 16;\n      return;\n    }\n    this.cartographicCenter = Ellipsoid.WGS84.cartesianToCartographic(center, new Vector3());\n    this.zoom = getZoom(root.boundingVolume);\n  }\n\n  _initializeStats() {\n    this.stats.get(TILES_TOTAL);\n    this.stats.get(TILES_LOADING);\n    this.stats.get(TILES_IN_MEMORY);\n    this.stats.get(TILES_IN_VIEW);\n    this.stats.get(TILES_RENDERABLE);\n    this.stats.get(TILES_LOADED);\n    this.stats.get(TILES_UNLOADED);\n    this.stats.get(TILES_LOAD_FAILED);\n    this.stats.get(POINTS_COUNT, 'memory');\n    this.stats.get(TILES_GPU_MEMORY, 'memory');\n  }\n\n  // Installs the main tileset JSON file or a tileset JSON file referenced from a tile.\n  // eslint-disable-next-line max-statements\n  _initializeTileHeaders(tilesetJson, parentTileHeader, basePath) {\n    // A tileset JSON file referenced from a tile may exist in a different directory than the root tileset.\n    // Get the basePath relative to the external tileset.\n    const rootTile = new Tile3DHeader(this, tilesetJson.root, parentTileHeader, basePath); // resource\n\n    // If there is a parentTileHeader, add the root of the currently loading tileset\n    // to parentTileHeader's children, and update its _depth.\n    if (parentTileHeader) {\n      parentTileHeader.children.push(rootTile);\n      rootTile._depth = parentTileHeader._depth + 1;\n    }\n\n    const stack = [];\n    stack.push(rootTile);\n\n    while (stack.length > 0) {\n      const tile = stack.pop();\n      this.stats.get(TILES_TOTAL).incrementCount();\n      // this._allTilesAdditive = this._allTilesAdditive && tile.refine === TILE_3D_REFINE.ADD;\n\n      const children = tile._header.children || [];\n      for (const childHeader of children) {\n        const childTile = new Tile3DHeader(this, childHeader, tile, basePath);\n        tile.children.push(childTile);\n        childTile._depth = tile._depth + 1;\n        stack.push(childTile);\n      }\n\n      // TODO:\n      // if (this.options.cullWithChildrenBounds) {\n      //   Tile3DOptimizations.checkChildrenWithinParent(tile);\n      // }\n    }\n\n    return rootTile;\n  }\n\n  _destroyTileHeaders(parentTile) {\n    this._destroySubtree(parentTile);\n  }\n\n  async _loadTile(tile) {\n    // TODO - support tile expiration\n    // const expired = tile.contentExpired;\n    // if (expired) {\n    //   if (tile.hasTilesetContent) {\n    //     this._destroySubtree(tile);\n    //   }\n    // }\n\n    let loaded;\n\n    this.stats.get(TILES_LOADING).incrementCount();\n    try {\n      loaded = await tile.loadContent();\n    } catch (error) {\n      this.stats.get(TILES_LOADING).decrementCount();\n      this.stats.get(TILES_LOAD_FAILED).incrementCount();\n      this.options.onTileLoadFail(tile, error.message || error.toString(), tile.url);\n      return;\n    }\n    this.stats.get(TILES_LOADING).decrementCount();\n\n    if (!loaded) {\n      return;\n    }\n\n    // add coordinateOrigin and modelMatrix to tile\n    if (tile && tile._content) {\n      calculateTransformProps(tile, tile._content);\n    }\n\n    this.options.onTileLoad(tile);\n  }\n\n  _addTileToCache(tile) {\n    this.stats.get(TILES_LOADED).incrementCount();\n    this.stats.get(TILES_IN_MEMORY).incrementCount();\n\n    // Good enough? Just use the raw binary ArrayBuffer's byte length.\n    this.gpuMemoryUsageInBytes += tile._content.byteLength || 0;\n    this.stats.get(TILES_GPU_MEMORY).count = this.gpuMemoryUsageInBytes;\n  }\n\n  _unloadTile(tile) {\n    this.stats.get(TILES_IN_MEMORY).decrementCount();\n    this.stats.get(TILES_UNLOADED).incrementCount();\n\n    this.gpuMemoryUsageInBytes -= tile._content.byteLength || 0;\n    this.stats.get(TILES_GPU_MEMORY).count = this.gpuMemoryUsageInBytes;\n\n    this.options.onTileUnload(tile);\n    tile.unloadContent();\n  }\n\n  _unloadTiles() {\n    this._cache.unloadTiles(this, (tileset, tile) => tileset._unloadTile(tile));\n  }\n\n  // Traverse the tree and destroy all tiles\n  _destroy() {\n    const stack = [];\n    if (this._root) {\n      stack.push(this._root);\n    }\n    while (stack.length > 0) {\n      for (const child of tile.children) {\n        stack.push(child);\n      }\n      const tile = stack.pop();\n\n      // TODO - Use this._destroyTile(tile); ?\n      tile.destroy();\n    }\n    this._root = null;\n  }\n\n  // Traverse the tree and destroy all sub tiles\n  _destroySubtree(tile) {\n    const root = tile;\n    const stack = [];\n    stack.push(root);\n    while (stack.length > 0) {\n      tile = stack.pop();\n      for (const child of tile.children) {\n        stack.push(child);\n      }\n      if (tile !== root) {\n        this._destroyTile(tile);\n      }\n    }\n    root.children = [];\n  }\n\n  _destroyTile(tile) {\n    this._cache.unloadTile(this, tile);\n    this._unloadTile(tile);\n    tile.destroy();\n  }\n}\n"],"file":"tileset-3d.js"}