{"version":3,"sources":["../../../src/parsers/parse-3d-tile.js"],"names":["TILE3D_TYPE","getMagicString","parsePointCloud3DTile","parsePointCloud3DTileSync","parseBatchedModel3DTile","parseBatchedModel3DTileSync","parseInstancedModel3DTile","parseInstancedModel3DTileSync","parseComposite3DTile","parseComposite3DTileSync","parse3DTile","arrayBuffer","byteOffset","options","context","tile","type","COMPOSITE","BATCHED_3D_MODEL","INSTANCED_3D_MODEL","POINT_CLOUD","Error","parse3DTileSync"],"mappings":"AAGA,SAAQA,WAAR,QAA0B,cAA1B;AACA,SAAQC,cAAR,QAA6B,uBAA7B;AAEA,SAAQC,qBAAR,EAA+BC,yBAA/B,QAA+D,6BAA/D;AACA,SAAQC,uBAAR,EAAiCC,2BAAjC,QAAmE,+BAAnE;AACA,SACEC,yBADF,EAEEC,6BAFF,QAGO,iCAHP;AAIA,SAAQC,oBAAR,EAA8BC,wBAA9B,QAA6D,2BAA7D;AAGA,OAAO,eAAeC,WAAf,CAA2BC,WAA3B,EAAwCC,UAAU,GAAG,CAArD,EAAwDC,OAAxD,EAAiEC,OAAjE,EAA0EC,IAAI,GAAG,EAAjF,EAAqF;AAC1FA,EAAAA,IAAI,CAACH,UAAL,GAAkBA,UAAlB;AACAG,EAAAA,IAAI,CAACC,IAAL,GAAYf,cAAc,CAACU,WAAD,EAAcC,UAAd,CAA1B;;AAEA,UAAQG,IAAI,CAACC,IAAb;AACE,SAAKhB,WAAW,CAACiB,SAAjB;AAEE,aAAO,MAAMT,oBAAoB,CAC/BO,IAD+B,EAE/BJ,WAF+B,EAG/BC,UAH+B,EAI/BC,OAJ+B,EAK/BC,OAL+B,EAM/BJ,WAN+B,CAAjC;;AASF,SAAKV,WAAW,CAACkB,gBAAjB;AACE,aAAO,MAAMd,uBAAuB,CAACW,IAAD,EAAOJ,WAAP,EAAoBC,UAApB,EAAgCC,OAAhC,EAAyCC,OAAzC,CAApC;;AAEF,SAAKd,WAAW,CAACmB,kBAAjB;AACE,aAAO,MAAMb,yBAAyB,CAACS,IAAD,EAAOJ,WAAP,EAAoBC,UAApB,EAAgCC,OAAhC,EAAyCC,OAAzC,CAAtC;;AAEF,SAAKd,WAAW,CAACoB,WAAjB;AACE,aAAO,MAAMlB,qBAAqB,CAACa,IAAD,EAAOJ,WAAP,EAAoBC,UAApB,EAAgCC,OAAhC,EAAyCC,OAAzC,CAAlC;;AAEF;AACE,YAAM,IAAIO,KAAJ,sCAAwCN,IAAI,CAACC,IAA7C,EAAN;AAtBJ;AAwBD;AAED,OAAO,SAASM,eAAT,CAAyBX,WAAzB,EAAsCC,UAAU,GAAG,CAAnD,EAAsDC,OAAtD,EAA+DC,OAA/D,EAAwEC,IAAI,GAAG,EAA/E,EAAmF;AACxFA,EAAAA,IAAI,CAACH,UAAL,GAAkBA,UAAlB;AACAG,EAAAA,IAAI,CAACC,IAAL,GAAYf,cAAc,CAACU,WAAD,EAAcC,UAAd,CAA1B;;AAEA,UAAQG,IAAI,CAACC,IAAb;AACE,SAAKhB,WAAW,CAACiB,SAAjB;AAEE,aAAOR,wBAAwB,CAC7BM,IAD6B,EAE7BJ,WAF6B,EAG7BC,UAH6B,EAI7BC,OAJ6B,EAK7BC,OAL6B,EAM7BQ,eAN6B,CAA/B;;AASF,SAAKtB,WAAW,CAACkB,gBAAjB;AACE,aAAOb,2BAA2B,CAACU,IAAD,EAAOJ,WAAP,EAAoBC,UAApB,EAAgCC,OAAhC,EAAyCC,OAAzC,CAAlC;;AAEF,SAAKd,WAAW,CAACmB,kBAAjB;AACE,aAAOZ,6BAA6B,CAACQ,IAAD,EAAOJ,WAAP,EAAoBC,UAApB,EAAgCC,OAAhC,EAAyCC,OAAzC,CAApC;;AAEF,SAAKd,WAAW,CAACoB,WAAjB;AACE,aAAOjB,yBAAyB,CAACY,IAAD,EAAOJ,WAAP,EAAoBC,UAApB,EAAgCC,OAAhC,EAAyCC,OAAzC,CAAhC;;AAEF;AACE,YAAM,IAAIO,KAAJ,sCAAwCN,IAAI,CAACC,IAA7C,EAAN;AAtBJ;AAwBD","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {TILE3D_TYPE} from '../constants';\nimport {getMagicString} from './helpers/parse-utils';\n\nimport {parsePointCloud3DTile, parsePointCloud3DTileSync} from './parse-3d-tile-point-cloud';\nimport {parseBatchedModel3DTile, parseBatchedModel3DTileSync} from './parse-3d-tile-batched-model';\nimport {\n  parseInstancedModel3DTile,\n  parseInstancedModel3DTileSync\n} from './parse-3d-tile-instanced-model';\nimport {parseComposite3DTile, parseComposite3DTileSync} from './parse-3d-tile-composite';\n\n// Extracts\nexport async function parse3DTile(arrayBuffer, byteOffset = 0, options, context, tile = {}) {\n  tile.byteOffset = byteOffset;\n  tile.type = getMagicString(arrayBuffer, byteOffset);\n\n  switch (tile.type) {\n    case TILE3D_TYPE.COMPOSITE:\n      // Note: We pass this function as argument so that embedded tiles can be parsed recursively\n      return await parseComposite3DTile(\n        tile,\n        arrayBuffer,\n        byteOffset,\n        options,\n        context,\n        parse3DTile\n      );\n\n    case TILE3D_TYPE.BATCHED_3D_MODEL:\n      return await parseBatchedModel3DTile(tile, arrayBuffer, byteOffset, options, context);\n\n    case TILE3D_TYPE.INSTANCED_3D_MODEL:\n      return await parseInstancedModel3DTile(tile, arrayBuffer, byteOffset, options, context);\n\n    case TILE3D_TYPE.POINT_CLOUD:\n      return await parsePointCloud3DTile(tile, arrayBuffer, byteOffset, options, context);\n\n    default:\n      throw new Error(`3DTileLoader: unknown type ${tile.type}`); // eslint-disable-line\n  }\n}\n\nexport function parse3DTileSync(arrayBuffer, byteOffset = 0, options, context, tile = {}) {\n  tile.byteOffset = byteOffset;\n  tile.type = getMagicString(arrayBuffer, byteOffset);\n\n  switch (tile.type) {\n    case TILE3D_TYPE.COMPOSITE:\n      // Note: We pass this function as argument so that embedded tiles can be parsed recursively\n      return parseComposite3DTileSync(\n        tile,\n        arrayBuffer,\n        byteOffset,\n        options,\n        context,\n        parse3DTileSync\n      );\n\n    case TILE3D_TYPE.BATCHED_3D_MODEL:\n      return parseBatchedModel3DTileSync(tile, arrayBuffer, byteOffset, options, context);\n\n    case TILE3D_TYPE.INSTANCED_3D_MODEL:\n      return parseInstancedModel3DTileSync(tile, arrayBuffer, byteOffset, options, context);\n\n    case TILE3D_TYPE.POINT_CLOUD:\n      return parsePointCloud3DTileSync(tile, arrayBuffer, byteOffset, options, context);\n\n    default:\n      throw new Error(`3DTileLoader: unknown type ${tile.type}`); // eslint-disable-line\n  }\n}\n"],"file":"parse-3d-tile.js"}