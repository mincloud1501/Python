import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _typeof from "@babel/runtime/helpers/esm/typeof";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import { Vector3, Matrix4 } from 'math.gl';
import { CullingVolume } from '@math.gl/culling';
import { parse, fetchFile, path } from '@loaders.gl/core';
import Tile3DLoader from '../tile-3d-loader';
import Tileset3DLoader from '../tileset-3d-loader';
import { TILE3D_REFINEMENT, TILE3D_CONTENT_STATE, TILE3D_OPTIMIZATION_HINT } from '../constants';
import assert from '../utils/assert';
import { createBoundingVolume } from './helpers/bounding-volume';

var defined = function defined(x) {
  return x !== undefined && x !== null;
};

var scratchDate = new Date();
var scratchCommandList = [];
var scratchToTileCenter = new Vector3();
var scratchPlane = new Plane();
import { INTERSECT, Intersect, Plane } from '@math.gl/culling';

function computeVisibilityWithPlaneMask(cullingVolume, boundingVolume, parentPlaneMask) {
  assert(boundingVolume, 'boundingVolume is required.');
  assert(Number.isFinite(parentPlaneMask), 'parentPlaneMask is required.');

  if (parentPlaneMask === CullingVolume.MASK_OUTSIDE || parentPlaneMask === CullingVolume.MASK_INSIDE) {
    return parentPlaneMask;
  }

  var mask = CullingVolume.MASK_INSIDE;
  var planes = cullingVolume.planes;

  for (var k = 0; k < cullingVolume.planes.length; ++k) {
    var flag = k < 31 ? 1 << k : 0;

    if (k < 31 && (parentPlaneMask & flag) === 0) {
      continue;
    }

    var plane = scratchPlane.fromNormalDistance(planes[k].normal, planes[k].distance);
    var result = boundingVolume.intersectPlane(plane);

    if (result === Intersect.OUTSIDE) {
      return CullingVolume.MASK_OUTSIDE;
    } else if (result === Intersect.INTERSECTING) {
      mask |= flag;
    }
  }

  return mask;
}

var Tile3DHeader = function () {
  function Tile3DHeader(tileset, header, parentHeader, basePath) {
    _classCallCheck(this, Tile3DHeader);

    assert(_typeof(header) === 'object');
    this._tileset = tileset;
    this._header = header;
    this._basePath = basePath;
    this._content = null;
    this._contentState = TILE3D_CONTENT_STATE.UNLOADED;
    this._gpuMemoryUsageInBytes = 0;
    this.parent = parentHeader;
    this.children = [];
    this.refine = this._getRefine(header.refine);
    this.cacheNode = undefined;
    this.userData = {};

    if ('geometricError' in header) {
      this.geometricError = header.geometricError;
    } else {
      this.geometricError = this.parent && this.parent.geometricError || tileset.geometricError;
      console.warn('3D Tile: Required prop geometricError is undefined. Using parent error');
    }

    this._initializeTransforms(header);

    this._initializeBoundingVolumes(header);

    this._initializeContent(header);

    this._initializeCache(header);

    this._optimChildrenWithinParent = TILE3D_OPTIMIZATION_HINT.NOT_COMPUTED;

    this._initializeRenderingState();

    Object.seal(this);
  }

  _createClass(Tile3DHeader, [{
    key: "destroy",
    value: function destroy() {
      this._header = null;
    }
  }, {
    key: "isDestroyed",
    value: function isDestroyed() {
      return this._header === null;
    }
  }, {
    key: "getScreenSpaceError",
    value: function getScreenSpaceError(frameState, useParentGeometricError) {
      var tileset = this._tileset;
      var parentGeometricError = this.parent && this.parent.geometricError || tileset.geometricError;
      var geometricError = useParentGeometricError ? parentGeometricError : this.geometricError;

      if (geometricError === 0.0) {
        return 0.0;
      }

      var distance = Math.max(this._distanceToCamera, 1e-7);
      var height = frameState.height,
          sseDenominator = frameState.sseDenominator;
      var error = geometricError * height / (distance * sseDenominator);
      error -= this._getDynamicScreenSpaceError(distance);
      return error;
    }
  }, {
    key: "_getDynamicScreenSpaceError",
    value: function _getDynamicScreenSpaceError(distance) {
      function fog(distanceToCamera, density) {
        var scalar = distanceToCamera * density;
        return 1.0 - Math.exp(-(scalar * scalar));
      }

      var tileset = this._tileset;

      if (tileset.dynamicScreenSpaceError && tileset._dynamicScreenSpaceErrorComputedDensity) {
        var density = tileset._dynamicScreenSpaceErrorComputedDensity;
        var factor = tileset.dynamicScreenSpaceErrorFactor;
        var dynamicError = fog(distance, density) * factor;
        return dynamicError;
      }

      return 0;
    }
  }, {
    key: "loadContent",
    value: function () {
      var _loadContent = _asyncToGenerator(_regeneratorRuntime.mark(function _callee() {
        var expired, updatePriority, cancelled, contentUri, response;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                updatePriority = function _ref(tile) {
                  if (!tile._visible) {
                    return -1;
                  }

                  if (tile._contentState === TILE3D_CONTENT_STATE.UNLOADED) {
                    return -1;
                  }

                  return Math.max(1e7 - tile._priority, 0) || 0;
                };

                if (!this.hasEmptyContent) {
                  _context.next = 3;
                  break;
                }

                return _context.abrupt("return", false);

              case 3:
                if (!this._content) {
                  _context.next = 5;
                  break;
                }

                return _context.abrupt("return", true);

              case 5:
                expired = this.contentExpired;

                if (expired) {
                  this.expireDate = undefined;
                }

                this._contentState = TILE3D_CONTENT_STATE.LOADING;
                _context.next = 10;
                return this.tileset._requestScheduler.scheduleRequest(this, updatePriority);

              case 10:
                cancelled = !_context.sent;

                if (!cancelled) {
                  _context.next = 14;
                  break;
                }

                this._contentState = TILE3D_CONTENT_STATE.UNLOADED;
                return _context.abrupt("return", false);

              case 14:
                _context.prev = 14;
                contentUri = this.uri;
                _context.prev = 16;

                this.tileset._requestScheduler.startRequest(this);

                _context.next = 20;
                return fetchFile(contentUri, this.tileset.options.fetchOptions);

              case 20:
                response = _context.sent;

              case 21:
                _context.prev = 21;

                this.tileset._requestScheduler.endRequest(this);

                return _context.finish(21);

              case 24:
                _context.next = 26;
                return parse(response, [Tile3DLoader, Tileset3DLoader]);

              case 26:
                this._content = _context.sent;

                if (contentUri.indexOf('.json') !== -1) {
                  this._tileset._initializeTileHeaders(this._content, this, path.dirname(this.uri));
                }

                this._contentState = TILE3D_CONTENT_STATE.READY;

                this._contentLoaded();

                return _context.abrupt("return", true);

              case 33:
                _context.prev = 33;
                _context.t0 = _context["catch"](14);
                this._contentState = TILE3D_CONTENT_STATE.FAILED;
                throw _context.t0;

              case 37:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[14, 33], [16,, 21, 24]]);
      }));

      function loadContent() {
        return _loadContent.apply(this, arguments);
      }

      return loadContent;
    }()
  }, {
    key: "unloadContent",
    value: function unloadContent() {
      if (!this.hasRenderContent) {
        return false;
      }

      if (this._content && this._content.destroy) {
        this._content.destroy();
      }

      this._content = null;
      this._contentState = TILE3D_CONTENT_STATE.UNLOADED;
      return true;
    }
  }, {
    key: "updateVisibility",
    value: function updateVisibility(frameState) {
      var tileset = this._tileset;

      if (this._updatedVisibilityFrame === tileset._updatedVisibilityFrame) {
        return;
      }

      var parent = this.parent;
      var parentTransform = parent ? parent.computedTransform : this._tileset.modelMatrix;
      var parentVisibilityPlaneMask = parent ? parent._visibilityPlaneMask : CullingVolume.MASK_INDETERMINATE;

      this._updateTransform(parentTransform);

      this._distanceToCamera = this.distanceToTile(frameState);
      this._screenSpaceError = this.getScreenSpaceError(frameState, false);
      this._visibilityPlaneMask = this.visibility(frameState, parentVisibilityPlaneMask);
      this._visible = this._visibilityPlaneMask !== CullingVolume.MASK_OUTSIDE;
      this._inRequestVolume = this.insideViewerRequestVolume(frameState);
      this._updatedVisibilityFrame = tileset._updatedVisibilityFrame;
    }
  }, {
    key: "updateExpiration",
    value: function updateExpiration() {
      if (defined(this.expireDate) && this.contentReady && !this.hasEmptyContent) {
        var now = Date.now(scratchDate);

        if (Date.lessThan(this.expireDate, now)) {
          this._contentState = TILE3D_CONTENT_STATE.EXPIRED;
          this._expiredContent = this._content;
        }
      }
    }
  }, {
    key: "visibility",
    value: function visibility(frameState, parentVisibilityPlaneMask) {
      var cullingVolume = frameState.cullingVolume;
      var boundingVolume = this.boundingVolume,
          tileset = this.tileset;
      var clippingPlanes = tileset.clippingPlanes,
          clippingPlanesOriginMatrix = tileset.clippingPlanesOriginMatrix;

      if (clippingPlanes && clippingPlanes.enabled) {
        var intersection = clippingPlanes.computeIntersectionWithBoundingVolume(boundingVolume, clippingPlanesOriginMatrix);
        this._isClipped = intersection !== Intersect.INSIDE;

        if (intersection === Intersect.OUTSIDE) {
          return CullingVolume.MASK_OUTSIDE;
        }
      }

      return computeVisibilityWithPlaneMask(cullingVolume, boundingVolume, parentVisibilityPlaneMask);
    }
  }, {
    key: "contentVisibility",
    value: function contentVisibility(frameState) {
      return true;
    }
  }, {
    key: "distanceToTile",
    value: function distanceToTile(frameState) {
      var boundingVolume = this._boundingVolume;
      return Math.sqrt(boundingVolume.distanceSquaredTo(frameState.camera.position));
    }
  }, {
    key: "cameraSpaceZDepth",
    value: function cameraSpaceZDepth(_ref2) {
      var camera = _ref2.camera;
      var boundingVolume = this.boundingVolume;
      scratchToTileCenter.subVectors(boundingVolume.center, camera.position);
      return camera.direction.dot(scratchToTileCenter);
    }
  }, {
    key: "insideViewerRequestVolume",
    value: function insideViewerRequestVolume(frameState) {
      var viewerRequestVolume = this._viewerRequestVolume;
      return !viewerRequestVolume || viewerRequestVolume.distanceToCamera(frameState) === 0.0;
    }
  }, {
    key: "_initializeCache",
    value: function _initializeCache(header) {
      this.cacheNode = undefined;
      var expire = header.expire;
      var expireDuration;
      var expireDate;

      if (expire) {
        expireDuration = expire.duration;

        if (expire.date) {
          expireDate = Date.fromIso8601(expire.date);
        }
      }

      this.expireDuration = expireDuration;
      this.expireDate = expireDate;
    }
  }, {
    key: "_initializeTransforms",
    value: function _initializeTransforms(tileHeader) {
      this.transform = tileHeader.transform ? new Matrix4(tileHeader.transform) : new Matrix4();
      var parent = this.parent;
      var tileset = this._tileset;
      var parentTransform = parent && parent.computedTransform ? parent.computedTransform.clone() : tileset.modelMatrix.clone();
      this.computedTransform = new Matrix4(parentTransform).multiplyRight(this.transform);
      var parentInitialTransform = parent && parent._initialTransform ? parent._initialTransform.clone() : new Matrix4();
      this._initialTransform = new Matrix4(parentInitialTransform).multiplyRight(this.transform);
    }
  }, {
    key: "_initializeBoundingVolumes",
    value: function _initializeBoundingVolumes(tileHeader) {
      this._boundingVolume = createBoundingVolume(tileHeader.boundingVolume, this.computedTransform);
      this._contentBoundingVolume = null;
      this._viewerRequestVolume = null;

      if (tileHeader.content && tileHeader.content.boundingVolume) {
        this._contentBoundingVolume = createBoundingVolume(tileHeader.boundingVolume, this.computedTransform);
      }

      if (tileHeader.viewerRequestVolume) {
        this._viewerRequestVolume = createBoundingVolume(tileHeader.viewerRequestVolume, this.computedTransform);
      }
    }
  }, {
    key: "_initializeContent",
    value: function _initializeContent(tileHeader) {
      this._content = {
        _tileset: this._tileset,
        _tile: this
      };
      this.hasEmptyContent = true;
      this.contentState = TILE3D_CONTENT_STATE.UNLOADED;
      this._expiredContent = undefined;
      this._serverKey = null;
      this.hasTilesetContent = false;

      if (tileHeader.content) {
        this.contentUri = tileHeader.content.uri || tileHeader.content.url;

        if ('url' in tileHeader) {
          console.warn('Tileset 3D: "content.url" property deprecated. Use "content.uri" instead.');
          this.contentUri = tileHeader.url;
        }

        this._content = null;
        this.hasEmptyContent = false;
        this.contentState = TILE3D_CONTENT_STATE.UNLOADED;
        this.fullUri = this._basePath + '/' + this.contentUri;
      }
    }
  }, {
    key: "_initializeRenderingState",
    value: function _initializeRenderingState() {
      this._distanceToCamera = 0;
      this._centerZDepth = 0;
      this._screenSpaceError = 0;
      this._visibilityPlaneMask = CullingVolume.MASK_INDETERMINATE;
      this._visible = false;
      this._inRequestVolume = false;
      this._finalResolution = true;
      this._depth = 0;
      this._stackLength = 0;
      this._selectionDepth = 0;
      this._updatedVisibilityFrame = 0;
      this._touchedFrame = 0;
      this._visitedFrame = 0;
      this._selectedFrame = 0;
      this._requestedFrame = 0;
      this._ancestorWithContent = undefined;
      this._ancestorWithContentAvailable = undefined;
      this._refines = false;
      this._shouldSelect = false;
      this._priority = 0.0;
    }
  }, {
    key: "_getRefine",
    value: function _getRefine(refine) {
      switch (refine) {
        case 'REPLACE':
        case 'replace':
          return TILE3D_REFINEMENT.REPLACE;

        case 'ADD':
        case 'add':
          return TILE3D_REFINEMENT.ADD;

        default:
          return this.parent ? this.parent.refine : TILE3D_REFINEMENT.REPLACE;
      }
    }
  }, {
    key: "_isTileset",
    value: function _isTileset(content) {
      return Boolean(content.asset);
    }
  }, {
    key: "_contentLoaded",
    value: function _contentLoaded() {
      switch (this._content && this._content.type) {
        case 'vctr':
        case 'geom':
          tileset.traverser.disableSkipLevelOfDetail = true;

        default:
      }

      if (this._isTileset(this._content)) {
        this.hasTilesetContent = true;
      }
    }
  }, {
    key: "_updateTransform",
    value: function _updateTransform() {
      var parentTransform = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Matrix4();
      var computedTransform = parentTransform.clone().multiplyRight(this.transform);
      var didTransformChange = !computedTransform.equals(this.computedTransform);

      if (!didTransformChange) {
        return;
      }

      this.computedTransform = computedTransform;
      var header = this._header;
      var content = this._header.content;
      this._boundingVolume = createBoundingVolume(header.boundingVolume, this.computedTransform, this._boundingVolume);

      if (this._contentBoundingVolume) {
        this._contentBoundingVolume = createBoundingVolume(content.boundingVolume, this.computedTransform, this._contentBoundingVolume);
      }

      if (this._viewerRequestVolume) {
        this._viewerRequestVolume = createBoundingVolume(header.viewerRequestVolume, this.computedTransform, this._viewerRequestVolume);
      }
    }
  }, {
    key: "gpuMemoryUsageInBytes",
    get: function get() {
      return this._gpuMemoryUsageInBytes;
    }
  }, {
    key: "tileset",
    get: function get() {
      return this._tileset;
    }
  }, {
    key: "depth",
    get: function get() {
      return this._depth;
    }
  }, {
    key: "selectedFrame",
    get: function get() {
      return this._selectedFrame;
    }
  }, {
    key: "isVisibleAndInRequestVolume",
    get: function get() {
      return this._visible && this._inRequestVolume;
    }
  }, {
    key: "content",
    get: function get() {
      return this._content;
    }
  }, {
    key: "contentReady",
    get: function get() {
      return this._contentState === TILE3D_CONTENT_STATE.READY;
    }
  }, {
    key: "hasRenderContent",
    get: function get() {
      return !this.hasEmptyContent && !this.hasTilesetContent;
    }
  }, {
    key: "contentAvailable",
    get: function get() {
      return this.contentReady && this.hasRenderContent || defined(this._expiredContent) && !this.contentFailed;
    }
  }, {
    key: "hasUnloadedContent",
    get: function get() {
      return this.hasRenderContent && this.contentUnloaded;
    }
  }, {
    key: "contentUnloaded",
    get: function get() {
      return this._contentState === TILE3D_CONTENT_STATE.UNLOADED;
    }
  }, {
    key: "contentExpired",
    get: function get() {
      return this._contentState === TILE3D_CONTENT_STATE.EXPIRED;
    }
  }, {
    key: "contentFailed",
    get: function get() {
      return this._contentState === TILE3D_CONTENT_STATE.FAILED;
    }
  }, {
    key: "url",
    get: function get() {
      return this.tileset.getTileUrl(this.contentUri, this._basePath);
    }
  }, {
    key: "uri",
    get: function get() {
      return this.tileset.getTileUrl(this.contentUri, this._basePath);
    }
  }, {
    key: "boundingVolume",
    get: function get() {
      return this._boundingVolume;
    }
  }, {
    key: "contentBoundingVolume",
    get: function get() {
      return this._contentBoundingVolume || this._boundingVolume;
    }
  }, {
    key: "boundingSphere",
    get: function get() {
      return this._boundingVolume.boundingSphere;
    }
  }, {
    key: "extras",
    get: function get() {
      return this._header.extras;
    }
  }]);

  return Tile3DHeader;
}();

export { Tile3DHeader as default };

function updateContent(tile, tileset, frameState) {
  var content = tile._content;
  var expiredContent = tile._expiredContent;

  if (expiredContent) {
    if (!tile.contentReady) {
      expiredContent.update(tileset, frameState);
      return;
    }

    tile._expiredContent.destroy();

    tile._expiredContent = undefined;
  }

  content.update(tileset, frameState);
}

function updateExpireDate(tile) {
  if (defined(tile.expireDuration)) {
    var expireDurationDate = Date.now(scratchDate);
    Date.addSeconds(expireDurationDate, tile.expireDuration, expireDurationDate);

    if (defined(tile.expireDate)) {
      if (Date.lessThan(tile.expireDate, expireDurationDate)) {
        Date.clone(expireDurationDate, tile.expireDate);
      }
    } else {
      tile.expireDate = Date.clone(expireDurationDate);
    }
  }
}

function createPriorityFunction(tile) {
  return function () {
    return tile._priority;
  };
}
//# sourceMappingURL=tile-3d-header.js.map