import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import DoublyLinkedList from '../utils/doubly-linked-list';

var defined = function defined(x) {
  return x !== undefined;
};

var Tileset3DCache = function () {
  function Tileset3DCache() {
    _classCallCheck(this, Tileset3DCache);

    this._list = new DoublyLinkedList();
    this._sentinel = this._list.add();
    this._trimTiles = false;
  }

  _createClass(Tileset3DCache, [{
    key: "reset",
    value: function reset() {
      this._list.splice(this._list.tail, this._sentinel);
    }
  }, {
    key: "touch",
    value: function touch(tile) {
      var node = tile.cacheNode;

      if (defined(node)) {
        this._list.splice(this._sentinel, node);
      }
    }
  }, {
    key: "add",
    value: function add(tileset, tile, addCallback) {
      if (!defined(tile.cacheNode)) {
        tile.cacheNode = this._list.add(tile);

        if (addCallback) {
          addCallback(tileset, tile);
        }
      }
    }
  }, {
    key: "unloadTile",
    value: function unloadTile(tileset, tile, unloadCallback) {
      var node = tile.cacheNode;

      if (!defined(node)) {
        return;
      }

      this._list.remove(node);

      tile.cacheNode = undefined;

      if (unloadCallback) {
        unloadCallback(tileset, tile);
      }
    }
  }, {
    key: "unloadTiles",
    value: function unloadTiles(tileset, unloadCallback) {
      var trimTiles = this._trimTiles;
      this._trimTiles = false;
      var list = this._list;
      var maximumMemoryUsageInBytes = tileset.maximumMemoryUsage * 1024 * 1024;
      var sentinel = this._sentinel;
      var node = list.head;

      while (node !== sentinel && (tileset.gpuMemoryUsageInBytes > maximumMemoryUsageInBytes || trimTiles)) {
        var tile = node.item;
        node = node.next;
        this.unloadTile(tileset, tile, unloadCallback);
      }
    }
  }, {
    key: "trim",
    value: function trim() {
      this._trimTiles = true;
    }
  }]);

  return Tileset3DCache;
}();

export { Tileset3DCache as default };
//# sourceMappingURL=tileset-3d-cache.js.map