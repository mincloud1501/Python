{"version":3,"sources":["../../../../src/tileset/helpers/bounding-volume.js"],"names":["Vector3","Matrix3","Matrix4","degrees","BoundingSphere","OrientedBoundingBox","Ellipsoid","assert","defined","x","undefined","scratchMatrix","scratchScale","scratchCenter","scratchTransform","createBoundingVolume","boundingVolumeHeader","transform","result","box","createBox","region","west","south","east","north","minHeight","maxHeight","center","centerInCartesian","WGS84","cartographicToCartesian","northWest","northEast","southWest","radius","Math","abs","createSphere","sphere","Error","halfAxes","slice","length","multiplyRight","createBoxFromTransformedRegion","initialTransform","rectangle","Rectangle","unpack","scratchRectangle","minimumHeight","maximumHeight","orientedBoundingBox","fromRectangle","scratchOrientedBoundingBox","multiplyTransformation","inverseTransformation","multiplyByPoint","rotationScale","getRotation","multiply","TileOrientedBoundingBox","update","createRegion","equalsEpsilon","CesiumMath","EPSILON8","rectangleRegion","TileBoundingRegion","scale","getScale","uniformScale","max"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\n/* eslint-disable */\nimport {Vector3, Matrix3, Matrix4, degrees} from 'math.gl';\nimport {BoundingSphere, OrientedBoundingBox} from '@math.gl/culling';\nimport {Ellipsoid} from '@math.gl/geospatial';\nimport assert from '../../utils/assert';\n\n// const scratchProjectedBoundingSphere = new BoundingSphere();\n\nconst defined = x => x !== undefined;\n\nconst scratchMatrix = new Matrix3();\nconst scratchScale = new Vector3();\nconst scratchCenter = new Vector3();\n// const scratchRectangle = new Rectangle();\n// const scratchOrientedBoundingBox = new OrientedBoundingBox();\nconst scratchTransform = new Matrix4();\n\n/**\n * Create a bounding volume from the tile's bounding volume header.\n * @param {Object} boundingVolumeHeader The tile's bounding volume header.\n * @param {Matrix4} transform The transform to apply to the bounding volume.\n * @param {TileBoundingVolume} [result] The object onto which to store the result.\n * @returns {TileBoundingVolume} The modified result parameter or a new TileBoundingVolume instance if none was provided.\n */\nexport function createBoundingVolume(boundingVolumeHeader, transform, result) {\n  assert(boundingVolumeHeader, '3D Tile: boundingVolume must be defined');\n  if (boundingVolumeHeader.box) {\n    return createBox(boundingVolumeHeader.box, transform, result);\n  }\n  if (boundingVolumeHeader.region) {\n    // [west, south, east, north, minimum height, maximum height]\n    // Latitudes and longitudes are in the WGS 84 datum as defined in EPSG 4979 and are in radians.\n    // Heights are in meters above (or below) the WGS 84 ellipsoid.\n    const [west, south, east, north, minHeight, maxHeight] = boundingVolumeHeader.region;\n\n    const center = new Vector3(\n      degrees((west + east) / 2),\n      degrees((north + south) / 2),\n      (minHeight + maxHeight) / 2\n    );\n\n    const centerInCartesian = Ellipsoid.WGS84.cartographicToCartesian(center, scratchCenter);\n\n    const northWest = Ellipsoid.WGS84.cartographicToCartesian([north, west, 0]);\n    const northEast = Ellipsoid.WGS84.cartographicToCartesian([north, east, 0]);\n    const southWest = Ellipsoid.WGS84.cartographicToCartesian([south, west, 0]);\n    const radius =\n      (Math.abs(northEast[0] - northWest[0]) + Math.abs(southWest[1] - northWest[1])) * 8;\n\n    // TODO fix region boundingVolume\n    // for now, create a fake big sphere as the boundingVolume\n    return createSphere(\n      [centerInCartesian[0], centerInCartesian[1], centerInCartesian[2], radius],\n      new Matrix4()\n    );\n  }\n\n  if (boundingVolumeHeader.sphere) {\n    return createSphere(boundingVolumeHeader.sphere, transform, result);\n  }\n\n  throw new Error('3D Tile: boundingVolume must contain a sphere, region, or box');\n}\n\nfunction createBox(box, transform, result) {\n  const center = new Vector3(box[0], box[1], box[2]);\n  let halfAxes = new Matrix3(box.slice(3, box.length));\n\n  transform.transform(center, center);\n\n  halfAxes = new Matrix3(\n    transform[0],\n    transform[1],\n    transform[2],\n    transform[4],\n    transform[5],\n    transform[6],\n    transform[8],\n    transform[9],\n    transform[10]\n  ).multiplyRight(halfAxes);\n\n  if (defined(result)) {\n    result.center = center;\n    result.halfAxes = halfAxes;\n    return result;\n  }\n\n  return new OrientedBoundingBox(center, halfAxes);\n}\n\nfunction createBoxFromTransformedRegion(region, transform, initialTransform, result) {\n  const rectangle = Rectangle.unpack(region, 0, scratchRectangle);\n  const minimumHeight = region[4];\n  const maximumHeight = region[5];\n\n  const orientedBoundingBox = OrientedBoundingBox.fromRectangle(\n    rectangle,\n    minimumHeight,\n    maximumHeight,\n    Ellipsoid.WGS84,\n    scratchOrientedBoundingBox\n  );\n  const center = orientedBoundingBox.center;\n  const halfAxes = orientedBoundingBox.halfAxes;\n\n  // A region bounding volume is not transformed by the transform in the tileset JSON,\n  // but may be transformed by additional transforms applied in Cesium.\n  // This is why the transform is calculated as the difference between the initial transform and the current transform.\n  transform = Matrix4.multiplyTransformation(\n    transform,\n    Matrix4.inverseTransformation(initialTransform, scratchTransform),\n    scratchTransform\n  );\n  center = Matrix4.multiplyByPoint(transform, center, center);\n  const rotationScale = Matrix4.getRotation(transform, scratchMatrix);\n  halfAxes = Matrix3.multiply(rotationScale, halfAxes, halfAxes);\n\n  if (defined(result) && result instanceof TileOrientedBoundingBox) {\n    result.update(center, halfAxes);\n    return result;\n  }\n\n  return new TileOrientedBoundingBox(center, halfAxes);\n}\n\nfunction createRegion(region, transform, initialTransform, result) {\n  if (!Matrix4.equalsEpsilon(transform, initialTransform, CesiumMath.EPSILON8)) {\n    return createBoxFromTransformedRegion(region, transform, initialTransform, result);\n  }\n\n  if (defined(result)) {\n    return result;\n  }\n\n  const rectangleRegion = Rectangle.unpack(region, 0, scratchRectangle);\n\n  return new TileBoundingRegion({\n    rectangle: rectangleRegion,\n    minimumHeight: region[4],\n    maximumHeight: region[5]\n  });\n}\n\nfunction createSphere(sphere, transform, result) {\n  // Find the transformed center\n  const center = new Vector3(sphere[0], sphere[1], sphere[2]);\n  transform.transform(center, center);\n  const scale = transform.getScale(scratchScale);\n\n  const uniformScale = Math.max(Math.max(scale[0], scale[1]), scale[2]);\n  const radius = sphere[3] * uniformScale;\n\n  if (defined(result)) {\n    result.center = center;\n    result.radius = radius;\n    return result;\n  }\n\n  return new BoundingSphere(center, radius);\n}\n"],"file":"bounding-volume.js"}