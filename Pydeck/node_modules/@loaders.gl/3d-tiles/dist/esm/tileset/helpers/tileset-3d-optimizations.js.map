{"version":3,"sources":["../../../../src/tileset/helpers/tileset-3d-optimizations.js"],"names":["TILE3D_OPTIMIZATION_HINT","scratchAxis","Cartesian3","checkChildrenWithinParent","tile","assert","children","length","boundingVolume","TileOrientedBoundingBox","TileBoundingRegion","orientedBoundingBox","_orientedBoundingBox","_optimChildrenWithinParent","USE_OPTIMIZATION","i","child","childBoundingVolume","SKIP_OPTIMIZATION","childOrientedBoundingBox","axis","subtract","center","axisLength","magnitude","divideByScalar","proj1","Math","abs","halfAxes","x","y","z","proj2"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\n// TODO - Evaluates support for the childrenWithinParent optimization.\n// This is used to more tightly cull tilesets if\n// children bounds are fully contained within the parent.\n\n/* eslint-disable */\nimport {TILE3D_OPTIMIZATION_HINT} from '../constants';\n\n/**\n * Utility functions for computing optimization hints for a {@link Cesium3DTileset}.\n *\n * @exports Cesium3DTileOptimizations\n *\n * @private\n */\nconst scratchAxis = new Cartesian3();\n\n/**\n * Evaluates support for the childrenWithinParent optimization. This is used to more tightly cull tilesets if\n * children bounds are fully contained within the parent. Currently, support for the optimization only works for\n * oriented bounding boxes, so both the child and parent tile must be either a {@link TileOrientedBoundingBox} or\n * {@link TileBoundingRegion}. The purpose of this check is to prevent use of a culling optimization when the child\n * bounds exceed those of the parent. If the child bounds are greater, it is more likely that the optimization will\n * waste CPU cycles. Bounding spheres are not supported for the reason that the child bounds can very often be\n * partially outside of the parent bounds.\n *\n * @param {Cesium3DTile} tile The tile to check.\n * @returns {Boolean} Whether the childrenWithinParent optimization is supported.\n */\nexport function checkChildrenWithinParent(tile) {\n  assert(tile);\n\n  const children = tile.children;\n  const length = children.length;\n\n  // Check if the parent has an oriented bounding box.\n  const boundingVolume = tile.boundingVolume;\n  if (\n    boundingVolume instanceof TileOrientedBoundingBox ||\n    boundingVolume instanceof TileBoundingRegion\n  ) {\n    const orientedBoundingBox = boundingVolume._orientedBoundingBox;\n    tile._optimChildrenWithinParent = TILE3D_OPTIMIZATION_HINT.USE_OPTIMIZATION;\n    for (const i = 0; i < length; ++i) {\n      const child = children[i];\n\n      // Check if the child has an oriented bounding box.\n      const childBoundingVolume = child.boundingVolume;\n      if (\n        !(\n          childBoundingVolume instanceof TileOrientedBoundingBox ||\n          childBoundingVolume instanceof TileBoundingRegion\n        )\n      ) {\n        // Do not support if the parent and child both do not have oriented bounding boxes.\n        tile._optimChildrenWithinParent = TILE3D_OPTIMIZATION_HINT.SKIP_OPTIMIZATION;\n        break;\n      }\n\n      const childOrientedBoundingBox = childBoundingVolume._orientedBoundingBox;\n\n      // Compute the axis from the parent to the child.\n      const axis = Cartesian3.subtract(\n        childOrientedBoundingBox.center,\n        orientedBoundingBox.center,\n        scratchAxis\n      );\n      const axisLength = Cartesian3.magnitude(axis);\n      Cartesian3.divideByScalar(axis, axisLength, axis);\n\n      // Project the bounding box of the parent onto the axis. Because the axis is a ray from the parent\n      // to the child, the projection parameterized along the ray will be (+/- proj1).\n      const proj1 =\n        Math.abs(orientedBoundingBox.halfAxes[0] * axis.x) +\n        Math.abs(orientedBoundingBox.halfAxes[1] * axis.y) +\n        Math.abs(orientedBoundingBox.halfAxes[2] * axis.z) +\n        Math.abs(orientedBoundingBox.halfAxes[3] * axis.x) +\n        Math.abs(orientedBoundingBox.halfAxes[4] * axis.y) +\n        Math.abs(orientedBoundingBox.halfAxes[5] * axis.z) +\n        Math.abs(orientedBoundingBox.halfAxes[6] * axis.x) +\n        Math.abs(orientedBoundingBox.halfAxes[7] * axis.y) +\n        Math.abs(orientedBoundingBox.halfAxes[8] * axis.z);\n\n      // Project the bounding box of the child onto the axis. Because the axis is a ray from the parent\n      // to the child, the projection parameterized along the ray will be (+/- proj2) + axis.length.\n      const proj2 =\n        Math.abs(childOrientedBoundingBox.halfAxes[0] * axis.x) +\n        Math.abs(childOrientedBoundingBox.halfAxes[1] * axis.y) +\n        Math.abs(childOrientedBoundingBox.halfAxes[2] * axis.z) +\n        Math.abs(childOrientedBoundingBox.halfAxes[3] * axis.x) +\n        Math.abs(childOrientedBoundingBox.halfAxes[4] * axis.y) +\n        Math.abs(childOrientedBoundingBox.halfAxes[5] * axis.z) +\n        Math.abs(childOrientedBoundingBox.halfAxes[6] * axis.x) +\n        Math.abs(childOrientedBoundingBox.halfAxes[7] * axis.y) +\n        Math.abs(childOrientedBoundingBox.halfAxes[8] * axis.z);\n\n      // If the child extends the parent's bounds, the optimization is not valid and we skip it.\n      if (proj1 <= proj2 + axisLength) {\n        tile._optimChildrenWithinParent = TILE3D_OPTIMIZATION_HINT.SKIP_OPTIMIZATION;\n        break;\n      }\n    }\n  }\n\n  return tile._optimChildrenWithinParent === TILE3D_OPTIMIZATION_HINT.USE_OPTIMIZATION;\n}\n"],"file":"tileset-3d-optimizations.js"}