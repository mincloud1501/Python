{"version":3,"sources":["../../../../src/tileset/helpers/transform-utils.js"],"names":["assert","Ellipsoid","Matrix4","Vector3","calculateTransformProps","tileHeader","tile","rtcCenter","rotateYtoZ","computedTransform","center","_boundingVolume","modelMatrix","translate","rotation","rotateX","Math","PI","multiplyRight","isQuantized","quantizedVolumeOffset","scale","quantizedVolumeScale","cartesianOrigin","cartesianModelMatrix","cartographicOrigin","WGS84","cartesianToCartographic","fromFixedFrameMatrix","eastNorthUpToFixedFrame","toFixedFrameMatrix","invert","cartographicModelMatrix"],"mappings":"AAAA,SAAQA,MAAR,QAAqB,0BAArB;AACA,SAAQC,SAAR,QAAwB,qBAAxB;AACA,SAAQC,OAAR,EAAiBC,OAAjB,QAA+B,SAA/B;AAEA,OAAO,SAASC,uBAAT,CAAiCC,UAAjC,EAA6CC,IAA7C,EAAmD;AACxDN,EAAAA,MAAM,CAACK,UAAD,CAAN;AACAL,EAAAA,MAAM,CAACM,IAAD,CAAN;AAFwD,MAIjDC,SAJiD,GAIxBD,IAJwB,CAIjDC,SAJiD;AAAA,MAItCC,UAJsC,GAIxBF,IAJwB,CAItCE,UAJsC;AAAA,MAMtDC,iBANsD,GAQpDJ,UARoD,CAMtDI,iBANsD;AAAA,MAOpCC,MAPoC,GAQpDL,UARoD,CAOtDM,eAPsD,CAOpCD,MAPoC;AAUxD,MAAIE,WAAW,GAAG,IAAIV,OAAJ,CAAYO,iBAAZ,CAAlB;;AAGA,MAAIF,SAAJ,EAAe;AACbK,IAAAA,WAAW,CAACC,SAAZ,CAAsBN,SAAtB;AACD;;AAID,MAAIC,UAAJ,EAAgB;AACd,QAAMM,QAAQ,GAAG,IAAIZ,OAAJ,GAAca,OAAd,CAAsBC,IAAI,CAACC,EAAL,GAAU,CAAhC,CAAjB;AACAL,IAAAA,WAAW,GAAGA,WAAW,CAACM,aAAZ,CAA0BJ,QAA1B,CAAd;AACD;;AAGD,MAAIR,IAAI,CAACa,WAAT,EAAsB;AACpBP,IAAAA,WAAW,CAACC,SAAZ,CAAsBP,IAAI,CAACc,qBAA3B,EAAkDC,KAAlD,CAAwDf,IAAI,CAACgB,oBAA7D;AACD;;AAGD,MAAMC,eAAe,GAAG,IAAIpB,OAAJ,CAAYO,MAAZ,CAAxB;AAEAJ,EAAAA,IAAI,CAACkB,oBAAL,GAA4BZ,WAA5B;AACAN,EAAAA,IAAI,CAACiB,eAAL,GAAuBA,eAAvB;AAGA,MAAME,kBAAkB,GAAGxB,SAAS,CAACyB,KAAV,CAAgBC,uBAAhB,CACzBJ,eADyB,EAEzB,IAAIpB,OAAJ,EAFyB,CAA3B;AAIA,MAAMyB,oBAAoB,GAAG3B,SAAS,CAACyB,KAAV,CAAgBG,uBAAhB,CAAwCN,eAAxC,CAA7B;AACA,MAAMO,kBAAkB,GAAGF,oBAAoB,CAACG,MAArB,EAA3B;AAEAzB,EAAAA,IAAI,CAAC0B,uBAAL,GAA+BF,kBAAkB,CAACZ,aAAnB,CAAiCN,WAAjC,CAA/B;AACAN,EAAAA,IAAI,CAACmB,kBAAL,GAA0BA,kBAA1B;AAGAnB,EAAAA,IAAI,CAACM,WAAL,GAAmBN,IAAI,CAAC0B,uBAAxB;AACD","sourcesContent":["import {assert} from '@loaders.gl/loader-utils';\nimport {Ellipsoid} from '@math.gl/geospatial';\nimport {Matrix4, Vector3} from 'math.gl';\n\nexport function calculateTransformProps(tileHeader, tile) {\n  assert(tileHeader);\n  assert(tile);\n\n  const {rtcCenter, rotateYtoZ} = tile;\n  const {\n    computedTransform,\n    _boundingVolume: {center}\n  } = tileHeader;\n\n  let modelMatrix = new Matrix4(computedTransform);\n\n  // Translate if appropriate\n  if (rtcCenter) {\n    modelMatrix.translate(rtcCenter);\n  }\n\n  // glTF models need to be rotated from Y to Z up\n  // https://github.com/AnalyticalGraphicsInc/3d-tiles/tree/master/specification#y-up-to-z-up\n  if (rotateYtoZ) {\n    const rotation = new Matrix4().rotateX(Math.PI / 2);\n    modelMatrix = modelMatrix.multiplyRight(rotation);\n  }\n\n  // Scale/offset positions if normalized integers\n  if (tile.isQuantized) {\n    modelMatrix.translate(tile.quantizedVolumeOffset).scale(tile.quantizedVolumeScale);\n  }\n\n  // Option 1: Cartesian matrix and origin\n  const cartesianOrigin = new Vector3(center);\n\n  tile.cartesianModelMatrix = modelMatrix;\n  tile.cartesianOrigin = cartesianOrigin;\n\n  // Option 2: Cartographic matrix and origin\n  const cartographicOrigin = Ellipsoid.WGS84.cartesianToCartographic(\n    cartesianOrigin,\n    new Vector3()\n  );\n  const fromFixedFrameMatrix = Ellipsoid.WGS84.eastNorthUpToFixedFrame(cartesianOrigin);\n  const toFixedFrameMatrix = fromFixedFrameMatrix.invert();\n\n  tile.cartographicModelMatrix = toFixedFrameMatrix.multiplyRight(modelMatrix);\n  tile.cartographicOrigin = cartographicOrigin;\n\n  // Deprecated, drop\n  tile.modelMatrix = tile.cartographicModelMatrix;\n}\n"],"file":"transform-utils.js"}