{"version":3,"sources":["../../../src/utils/doubly-linked-list.js"],"names":["DoublyLinkedListNode","defined","x","undefined","DoublyLinkedList","head","tail","_length","item","node","next","previous","nextNode","remove","oldNodeNext"],"mappings":";;AAGA,OAAOA,oBAAP,MAAiC,kCAAjC;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAAAC,CAAC;AAAA,SAAIA,CAAC,KAAKC,SAAV;AAAA,CAAjB;;IAOqBC,gB;AACnB,8BAAc;AAAA;;AACZ,SAAKC,IAAL,GAAYF,SAAZ;AACA,SAAKG,IAAL,GAAYH,SAAZ;AACA,SAAKI,OAAL,GAAe,CAAf;AACD;;;;wBAWGC,I,EAAM;AACR,UAAMC,IAAI,GAAG,IAAIT,oBAAJ,CAAyBQ,IAAzB,EAA+B,KAAKF,IAApC,EAA0CH,SAA1C,CAAb;;AAEA,UAAIF,OAAO,CAAC,KAAKK,IAAN,CAAX,EAAwB;AACtB,aAAKA,IAAL,CAAUI,IAAV,GAAiBD,IAAjB;AACA,aAAKH,IAAL,GAAYG,IAAZ;AACD,OAHD,MAGO;AACL,aAAKJ,IAAL,GAAYI,IAAZ;AACA,aAAKH,IAAL,GAAYG,IAAZ;AACD;;AAED,QAAE,KAAKF,OAAP;AAEA,aAAOE,IAAP;AACD;;;2BAMMA,I,EAAM;AACX,UAAI,CAACR,OAAO,CAACQ,IAAD,CAAZ,EAAoB;AAClB;AACD;;AAED,UAAIR,OAAO,CAACQ,IAAI,CAACE,QAAN,CAAP,IAA0BV,OAAO,CAACQ,IAAI,CAACC,IAAN,CAArC,EAAkD;AAChDD,QAAAA,IAAI,CAACE,QAAL,CAAcD,IAAd,GAAqBD,IAAI,CAACC,IAA1B;AACAD,QAAAA,IAAI,CAACC,IAAL,CAAUC,QAAV,GAAqBF,IAAI,CAACE,QAA1B;AACD,OAHD,MAGO,IAAIV,OAAO,CAACQ,IAAI,CAACE,QAAN,CAAX,EAA4B;AAEjCF,QAAAA,IAAI,CAACE,QAAL,CAAcD,IAAd,GAAqBP,SAArB;AACA,aAAKG,IAAL,GAAYG,IAAI,CAACE,QAAjB;AACD,OAJM,MAIA,IAAIV,OAAO,CAACQ,IAAI,CAACC,IAAN,CAAX,EAAwB;AAE7BD,QAAAA,IAAI,CAACC,IAAL,CAAUC,QAAV,GAAqBR,SAArB;AACA,aAAKE,IAAL,GAAYI,IAAI,CAACC,IAAjB;AACD,OAJM,MAIA;AAEL,aAAKL,IAAL,GAAYF,SAAZ;AACA,aAAKG,IAAL,GAAYH,SAAZ;AACD;;AAEDM,MAAAA,IAAI,CAACC,IAAL,GAAYP,SAAZ;AACAM,MAAAA,IAAI,CAACE,QAAL,GAAgBR,SAAhB;AAEA,QAAE,KAAKI,OAAP;AACD;;;2BAOME,I,EAAMG,Q,EAAU;AACrB,UAAIH,IAAI,KAAKG,QAAb,EAAuB;AACrB;AACD;;AAGD,WAAKC,MAAL,CAAYD,QAAZ;AAEA,UAAME,WAAW,GAAGL,IAAI,CAACC,IAAzB;AACAD,MAAAA,IAAI,CAACC,IAAL,GAAYE,QAAZ;;AAGA,UAAI,KAAKN,IAAL,KAAcG,IAAlB,EAAwB;AACtB,aAAKH,IAAL,GAAYM,QAAZ;AACD,OAFD,MAEO;AACLE,QAAAA,WAAW,CAACH,QAAZ,GAAuBC,QAAvB;AACD;;AAEDA,MAAAA,QAAQ,CAACF,IAAT,GAAgBI,WAAhB;AACAF,MAAAA,QAAQ,CAACD,QAAT,GAAoBF,IAApB;AACD;;;wBAlFY;AACX,aAAO,KAAKF,OAAZ;AACD;;;;;;SATkBH,gB","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport DoublyLinkedListNode from '../utils/doubly-linked-list-node';\n\nconst defined = x => x !== undefined;\n\n/**\n * Doubly linked list\n *\n * @private\n */\nexport default class DoublyLinkedList {\n  constructor() {\n    this.head = undefined;\n    this.tail = undefined;\n    this._length = 0;\n  }\n\n  get length() {\n    return this._length;\n  }\n\n  /**\n   * Adds the item to the end of the list\n   * @param {*} [item]\n   * @return {DoublyLinkedListNode}\n   */\n  add(item) {\n    const node = new DoublyLinkedListNode(item, this.tail, undefined);\n\n    if (defined(this.tail)) {\n      this.tail.next = node;\n      this.tail = node;\n    } else {\n      this.head = node;\n      this.tail = node;\n    }\n\n    ++this._length;\n\n    return node;\n  }\n\n  /**\n   * Removes the given node from the list\n   * @param {DoublyLinkedListNode} node\n   */\n  remove(node) {\n    if (!defined(node)) {\n      return;\n    }\n\n    if (defined(node.previous) && defined(node.next)) {\n      node.previous.next = node.next;\n      node.next.previous = node.previous;\n    } else if (defined(node.previous)) {\n      // Remove last node\n      node.previous.next = undefined;\n      this.tail = node.previous;\n    } else if (defined(node.next)) {\n      // Remove first node\n      node.next.previous = undefined;\n      this.head = node.next;\n    } else {\n      // Remove last node in the linked list\n      this.head = undefined;\n      this.tail = undefined;\n    }\n\n    node.next = undefined;\n    node.previous = undefined;\n\n    --this._length;\n  }\n\n  /**\n   * Moves nextNode after node\n   * @param {DoublyLinkedListNode} node\n   * @param {DoublyLinkedListNode} nextNode\n   */\n  splice(node, nextNode) {\n    if (node === nextNode) {\n      return;\n    }\n\n    // Remove nextNode, then insert after node\n    this.remove(nextNode);\n\n    const oldNodeNext = node.next;\n    node.next = nextNode;\n\n    // Tail check\n    if (this.tail === node) {\n      this.tail = nextNode;\n    } else {\n      oldNodeNext.previous = nextNode;\n    }\n\n    nextNode.next = oldNodeNext;\n    nextNode.previous = node;\n  }\n}\n"],"file":"doubly-linked-list.js"}