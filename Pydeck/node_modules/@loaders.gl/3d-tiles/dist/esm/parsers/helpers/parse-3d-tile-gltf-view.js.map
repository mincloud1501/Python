{"version":3,"sources":["../../../../src/parsers/helpers/parse-3d-tile-gltf-view.js"],"names":["GLTF_FORMAT","URI","EMBEDDED","parse3DTileGLTFViewSync","tile","arrayBuffer","byteOffset","gltfByteLength","byteLength","Error","subArray","Uint8Array","subarray","arrayCopy","gltfArrayBuffer","buffer","gltfByteOffset","rotateYtoZ","extractGLTF","gltfFormat","options","gltfUrlBytes","textDecoder","TextDecoder","gltfUrl","decode","replace","gltf"],"mappings":"AAaA,OAAO,IAAMA,WAAW,GAAG;AACzBC,EAAAA,GAAG,EAAE,CADoB;AAEzBC,EAAAA,QAAQ,EAAE;AAFe,CAApB;AAKP,OAAO,SAASC,uBAAT,CAAiCC,IAAjC,EAAuCC,WAAvC,EAAoDC,UAApD,EAAgE;AAErE,MAAMC,cAAc,GAAGH,IAAI,CAACE,UAAL,GAAkBF,IAAI,CAACI,UAAvB,GAAoCF,UAA3D;;AACA,MAAIC,cAAc,KAAK,CAAvB,EAA0B;AACxB,UAAM,IAAIE,KAAJ,CAAU,0CAAV,CAAN;AACD;;AAWD,MAAMC,QAAQ,GAAG,IAAIC,UAAJ,CAAeN,WAAf,EAA4BO,QAA5B,CAAqCN,UAArC,EAAiDA,UAAU,GAAGC,cAA9D,CAAjB;AACA,MAAMM,SAAS,GAAG,IAAIF,UAAJ,CAAeD,QAAf,CAAlB;AACAN,EAAAA,IAAI,CAACU,eAAL,GAAuBD,SAAS,CAACE,MAAjC;AACAX,EAAAA,IAAI,CAACY,cAAL,GAAsB,CAAtB;AACAZ,EAAAA,IAAI,CAACG,cAAL,GAAsBA,cAAtB;AAKAH,EAAAA,IAAI,CAACa,UAAL,GAAkB,IAAlB;AAGA,SAAOb,IAAI,CAACE,UAAL,GAAkBF,IAAI,CAACI,UAA9B;AACD;AAED,OAAO,SAASU,WAAT,CAAqBd,IAArB,EAA2Be,UAA3B,EAAuCC,OAAvC,EAAgD;AACrD,UAAQD,UAAR;AACE,SAAKnB,WAAW,CAACC,GAAjB;AAGE,UAAMoB,YAAY,GAAG,IAAIV,UAAJ,CAAeP,IAAI,CAACU,eAApB,EAAqCV,IAAI,CAACY,cAA1C,CAArB;AACA,UAAMM,WAAW,GAAG,IAAIC,WAAJ,EAApB;AACA,UAAMC,OAAO,GAAGF,WAAW,CAACG,MAAZ,CAAmBJ,YAAnB,CAAhB;AACAjB,MAAAA,IAAI,CAACoB,OAAL,GAAeA,OAAO,CAACE,OAAR,CAAgB,UAAhB,EAA4B,EAA5B,CAAf;AACA;;AACF,SAAK1B,WAAW,CAACE,QAAjB;AACEE,MAAAA,IAAI,CAACuB,IAAL,GAAY,EAAZ;AAKA;;AACF;AACE,YAAM,IAAIlB,KAAJ,6BAA+BU,UAA/B,uCAAN;AAjBJ;AAmBD","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\n/* global TextDecoder */\n\n// TODO - should we automatically parse the embedded glTF or leave it to the app?\n// - I.e. some apps might work directly on a GLB, in that case no need for us to decode...\n// - And if we decode, do we still keep the GLB in case it is needed?\n// - Do we add an option to control this?\n// - Also, should we have hard dependency on gltf module or use injection or auto-discovery for gltf parser?\n//\n// import {parseGLTFSync} from '@loaders.gl/gltf';\n\nexport const GLTF_FORMAT = {\n  URI: 0,\n  EMBEDDED: 1\n};\n\nexport function parse3DTileGLTFViewSync(tile, arrayBuffer, byteOffset) {\n  // Assume glTF consumes rest of tile\n  const gltfByteLength = tile.byteOffset + tile.byteLength - byteOffset;\n  if (gltfByteLength === 0) {\n    throw new Error('glTF byte length must be greater than 0.');\n  }\n\n  // TODO - We can avoid copy if already 4-byte aligned...\n  // if (byteOffset % 4 === 0) {\n  //   tile.gltfArrayBuffer = arrayBuffer;\n  //   tile.gltfByteOffset = byteOffset;\n  //   tile.gltfByteLength = gltfByteLength;\n  // } else {\n  // Create a copy of the glb so that it is 4-byte aligned\n  // eslint-disable-next-line\n  // console.warn(`${tile.type}: embedded glb is not aligned to a 4-byte boundary.`);\n  const subArray = new Uint8Array(arrayBuffer).subarray(byteOffset, byteOffset + gltfByteLength);\n  const arrayCopy = new Uint8Array(subArray);\n  tile.gltfArrayBuffer = arrayCopy.buffer;\n  tile.gltfByteOffset = 0;\n  tile.gltfByteLength = gltfByteLength;\n  // }\n\n  // glTF models need to be rotated from Y to Z up\n  // https://github.com/AnalyticalGraphicsInc/3d-tiles/tree/master/specification#y-up-to-z-up\n  tile.rotateYtoZ = true;\n\n  // Entire tile is consumed\n  return tile.byteOffset + tile.byteLength;\n}\n\nexport function extractGLTF(tile, gltfFormat, options) {\n  switch (gltfFormat) {\n    case GLTF_FORMAT.URI:\n      // We need to remove padding from the end of the model URL in case this tile was part of a composite tile.\n      // This removes all white space and null characters from the end of the string.\n      const gltfUrlBytes = new Uint8Array(tile.gltfArrayBuffer, tile.gltfByteOffset);\n      const textDecoder = new TextDecoder();\n      const gltfUrl = textDecoder.decode(gltfUrlBytes);\n      tile.gltfUrl = gltfUrl.replace(/[\\s\\0]+$/, '');\n      break;\n    case GLTF_FORMAT.EMBEDDED:\n      tile.gltf = {};\n      // parseGLTFSync(tile.gltf, tile.gltfArrayBuffer, tile.gltfByteOffset, options);\n      // delete tile.gltfArrayBuffer;\n      // delete tile.gltfByteOffset;\n      // delete tile.gltfByteLength;\n      break;\n    default:\n      throw new Error(`i3dm: glTF format ${gltfFormat}: Must be 0 (uri) or 1 (embedded)`);\n  }\n}\n"],"file":"parse-3d-tile-gltf-view.js"}