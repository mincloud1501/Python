import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import assert from '../utils/assert';
import { _getErrorMessageFromResponse } from '@loaders.gl/core';
var CESIUM_ION_URL = 'https://api.cesium.com/v1/assets';
export function getIonTilesetMetadata(_x, _x2) {
  return _getIonTilesetMetadata.apply(this, arguments);
}

function _getIonTilesetMetadata() {
  _getIonTilesetMetadata = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(accessToken, assetId) {
    var assets, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, item, ionAssetMetadata, type, url;

    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (assetId) {
              _context.next = 23;
              break;
            }

            _context.next = 3;
            return getIonAssets(accessToken);

          case 3:
            assets = _context.sent;
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            _context.prev = 7;

            for (_iterator = assets.items[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              item = _step.value;

              if (item.type === '3DTILES') {
                assetId = item.id;
              }
            }

            _context.next = 15;
            break;

          case 11:
            _context.prev = 11;
            _context.t0 = _context["catch"](7);
            _didIteratorError = true;
            _iteratorError = _context.t0;

          case 15:
            _context.prev = 15;
            _context.prev = 16;

            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }

          case 18:
            _context.prev = 18;

            if (!_didIteratorError) {
              _context.next = 21;
              break;
            }

            throw _iteratorError;

          case 21:
            return _context.finish(18);

          case 22:
            return _context.finish(15);

          case 23:
            _context.next = 25;
            return getIonAssetMetadata(accessToken, assetId);

          case 25:
            ionAssetMetadata = _context.sent;
            type = ionAssetMetadata.type, url = ionAssetMetadata.url;
            assert(type === '3DTILES' && url);
            ionAssetMetadata.headers = {
              Authorization: "Bearer ".concat(ionAssetMetadata.accessToken)
            };
            return _context.abrupt("return", ionAssetMetadata);

          case 30:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[7, 11, 15, 23], [16,, 18, 22]]);
  }));
  return _getIonTilesetMetadata.apply(this, arguments);
}

export function getIonAssets(_x3) {
  return _getIonAssets.apply(this, arguments);
}

function _getIonAssets() {
  _getIonAssets = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(accessToken) {
    var url, headers, response;
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            assert(accessToken);
            url = CESIUM_ION_URL;
            headers = {
              Authorization: "Bearer ".concat(accessToken)
            };
            _context2.next = 5;
            return fetch(url, {
              headers: headers
            });

          case 5:
            response = _context2.sent;

            if (response.ok) {
              _context2.next = 12;
              break;
            }

            _context2.t0 = Error;
            _context2.next = 10;
            return _getErrorMessageFromResponse(response);

          case 10:
            _context2.t1 = _context2.sent;
            throw new _context2.t0(_context2.t1);

          case 12:
            _context2.next = 14;
            return response.json();

          case 14:
            return _context2.abrupt("return", _context2.sent);

          case 15:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _getIonAssets.apply(this, arguments);
}

export function getIonAssetMetadata(_x4, _x5) {
  return _getIonAssetMetadata.apply(this, arguments);
}

function _getIonAssetMetadata() {
  _getIonAssetMetadata = _asyncToGenerator(_regeneratorRuntime.mark(function _callee3(accessToken, assetId) {
    var url, headers, response;
    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            assert(accessToken, assetId);
            url = "".concat(CESIUM_ION_URL, "/").concat(assetId, "/endpoint");
            headers = {
              Authorization: "Bearer ".concat(accessToken)
            };
            _context3.next = 5;
            return fetch(url, {
              headers: headers
            });

          case 5:
            response = _context3.sent;

            if (response.ok) {
              _context3.next = 12;
              break;
            }

            _context3.t0 = Error;
            _context3.next = 10;
            return _getErrorMessageFromResponse(response);

          case 10:
            _context3.t1 = _context3.sent;
            throw new _context3.t0(_context3.t1);

          case 12:
            _context3.next = 14;
            return response.json();

          case 14:
            return _context3.abrupt("return", _context3.sent);

          case 15:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _getIonAssetMetadata.apply(this, arguments);
}
//# sourceMappingURL=ion.js.map