{"version":3,"sources":["../../../src/ion/ion.js"],"names":["assert","_getErrorMessageFromResponse","CESIUM_ION_URL","getIonTilesetMetadata","accessToken","assetId","getIonAssets","assets","items","item","type","id","getIonAssetMetadata","ionAssetMetadata","url","headers","Authorization","fetch","response","ok","Error","json"],"mappings":"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","sourcesContent":["// Minimal support to load tilsets from the Cesium ION services\n/* global fetch */\nimport assert from '../utils/assert';\nimport {_getErrorMessageFromResponse} from '@loaders.gl/core';\n\nconst CESIUM_ION_URL = 'https://api.cesium.com/v1/assets';\n// const CESIUM_ION_URL = 'https://api.cesium.com/v1/assets/2/endpoint';\n\n// Returns `{url, headers, type, attributions}` for an ion tileset\nexport async function getIonTilesetMetadata(accessToken, assetId) {\n  // Step 1, if no asset id, look for first 3DTILES asset associated with this token.\n  if (!assetId) {\n    const assets = await getIonAssets(accessToken);\n    for (const item of assets.items) {\n      if (item.type === '3DTILES') {\n        assetId = item.id;\n      }\n    }\n  }\n\n  // Step 2: Query metdatadata for this asset.\n  const ionAssetMetadata = await getIonAssetMetadata(accessToken, assetId);\n  const {type, url} = ionAssetMetadata;\n  assert(type === '3DTILES' && url);\n\n  // Prepare a headers object for fetch\n  ionAssetMetadata.headers = {\n    Authorization: `Bearer ${ionAssetMetadata.accessToken}`\n  };\n  return ionAssetMetadata;\n}\n\n// Return a list of all assets associated with accessToken\nexport async function getIonAssets(accessToken) {\n  assert(accessToken);\n  const url = CESIUM_ION_URL;\n  const headers = {Authorization: `Bearer ${accessToken}`};\n  const response = await fetch(url, {headers});\n  if (!response.ok) {\n    throw new Error(await _getErrorMessageFromResponse(response));\n  }\n  return await response.json();\n}\n\n// Return metadata for a specific asset assocated with token\nexport async function getIonAssetMetadata(accessToken, assetId) {\n  assert(accessToken, assetId);\n  const url = `${CESIUM_ION_URL}/${assetId}/endpoint`;\n  const headers = {Authorization: `Bearer ${accessToken}`};\n  const response = await fetch(url, {headers});\n  if (!response.ok) {\n    throw new Error(await _getErrorMessageFromResponse(response));\n  }\n  return await response.json();\n}\n"],"file":"ion.js"}