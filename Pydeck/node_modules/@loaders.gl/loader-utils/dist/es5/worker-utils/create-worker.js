"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = createWorker;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _getTransferList = _interopRequireDefault(require("./get-transfer-list"));

function createWorker(loader) {
  if (typeof self === 'undefined') {
    return;
  }

  self.onmessage = function () {
    var _ref = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee(evt) {
      var data, arraybuffer, _data$byteOffset, byteOffset, _data$byteLength, byteLength, _data$options, options, result, transferList;

      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              data = evt.data;
              _context.prev = 1;

              if (isKnownMessage(data, loader.name)) {
                _context.next = 4;
                break;
              }

              return _context.abrupt("return");

            case 4:
              arraybuffer = data.arraybuffer, _data$byteOffset = data.byteOffset, byteOffset = _data$byteOffset === void 0 ? 0 : _data$byteOffset, _data$byteLength = data.byteLength, byteLength = _data$byteLength === void 0 ? 0 : _data$byteLength, _data$options = data.options, options = _data$options === void 0 ? {} : _data$options;
              _context.next = 7;
              return parseData(loader, arraybuffer, byteOffset, byteLength, options);

            case 7:
              result = _context.sent;
              transferList = (0, _getTransferList["default"])(result);
              self.postMessage({
                type: 'done',
                result: result
              }, transferList);
              _context.next = 15;
              break;

            case 12:
              _context.prev = 12;
              _context.t0 = _context["catch"](1);
              self.postMessage({
                type: 'error',
                message: _context.t0.message
              });

            case 15:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[1, 12]]);
    }));

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }();

  var requestId = 0;

  self.parse = function (arraybuffer) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var url = arguments.length > 2 ? arguments[2] : undefined;
    return new Promise(function (resolve, reject) {
      var id = requestId++;

      var onMessage = function onMessage(_ref2) {
        var data = _ref2.data;

        if (!data || data.id !== id) {
          return;
        }

        switch (data.type) {
          case 'process-done':
            self.removeEventListener('message', onMessage);
            resolve(data.result);
            break;

          case 'process-error':
            self.removeEventListener('message', onMessage);
            reject(data.message);
            break;

          default:
        }
      };

      self.addEventListener('message', onMessage);
      self.postMessage({
        type: 'process',
        id: id,
        arraybuffer: arraybuffer,
        options: options,
        url: url
      }, [arraybuffer]);
    });
  };
}

function parseData(_x2, _x3, _x4, _x5, _x6) {
  return _parseData.apply(this, arguments);
}

function _parseData() {
  _parseData = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee2(loader, arraybuffer, byteOffset, byteLength, options) {
    var data, parser, textDecoder;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!(loader.parseSync || loader.parse)) {
              _context2.next = 5;
              break;
            }

            data = arraybuffer;
            parser = loader.parseSync || loader.parse;
            _context2.next = 12;
            break;

          case 5:
            if (!loader.parseTextSync) {
              _context2.next = 11;
              break;
            }

            textDecoder = new TextDecoder();
            data = textDecoder.decode(arraybuffer);
            parser = loader.parseTextSync;
            _context2.next = 12;
            break;

          case 11:
            throw new Error("Could not load data with ".concat(loader.name, " loader"));

          case 12:
            _context2.next = 14;
            return parser(data, options);

          case 14:
            return _context2.abrupt("return", _context2.sent);

          case 15:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _parseData.apply(this, arguments);
}

function isKnownMessage(data, name) {
  return data && data.type === 'process' && data.source === 'loaders.gl';
}
//# sourceMappingURL=create-worker.js.map