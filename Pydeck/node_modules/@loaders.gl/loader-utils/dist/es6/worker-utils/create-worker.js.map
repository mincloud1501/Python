{"version":3,"sources":["../../../src/worker-utils/create-worker.js"],"names":["getTransferList","createWorker","loader","self","onmessage","evt","data","isKnownMessage","name","arraybuffer","byteOffset","byteLength","options","result","parseData","transferList","postMessage","type","error","message","requestId","parse","url","Promise","resolve","reject","id","onMessage","removeEventListener","addEventListener","parser","parseSync","parseTextSync","textDecoder","TextDecoder","decode","Error","source"],"mappings":"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","sourcesContent":["/* eslint-disable no-restricted-globals */\n/* global TextDecoder, self */\nimport getTransferList from './get-transfer-list';\n\n// Set up a WebWorkerGlobalScope to talk with the main thread\nexport default function createWorker(loader) {\n  // TODO - explain when this happens? Just a sanity check? Throw an error or log a warning?\n  if (typeof self === 'undefined') {\n    return;\n  }\n\n  self.onmessage = async evt => {\n    const {data} = evt;\n\n    try {\n      if (!isKnownMessage(data, loader.name)) {\n        return;\n      }\n\n      const {arraybuffer, byteOffset = 0, byteLength = 0, options = {}} = data;\n\n      const result = await parseData(loader, arraybuffer, byteOffset, byteLength, options);\n      const transferList = getTransferList(result);\n      self.postMessage({type: 'done', result}, transferList);\n    } catch (error) {\n      self.postMessage({type: 'error', message: error.message});\n    }\n  };\n\n  let requestId = 0;\n  self.parse = (arraybuffer, options = {}, url) =>\n    new Promise((resolve, reject) => {\n      const id = requestId++;\n\n      const onMessage = ({data}) => {\n        if (!data || data.id !== id) {\n          // not ours\n          return;\n        }\n        switch (data.type) {\n          case 'process-done':\n            self.removeEventListener('message', onMessage);\n            resolve(data.result);\n            break;\n\n          case 'process-error':\n            self.removeEventListener('message', onMessage);\n            reject(data.message);\n            break;\n\n          default:\n          // ignore\n        }\n      };\n      self.addEventListener('message', onMessage);\n      // Ask the main thread to decode data\n      self.postMessage({type: 'process', id, arraybuffer, options, url}, [arraybuffer]);\n    });\n}\n\n// TODO - Support byteOffset and byteLength (enabling parsing of embedded binaries without copies)\n// TODO - Why not support async loader.parse* funcs here?\n// TODO - Why not reuse a common function instead of reimplementing loader.parse* selection logic? Keeping loader small?\n// TODO - Lack of appropriate parser functions can be detected when we create worker, no need to wait until parse\nasync function parseData(loader, arraybuffer, byteOffset, byteLength, options) {\n  let data;\n  let parser;\n  if (loader.parseSync || loader.parse) {\n    data = arraybuffer;\n    parser = loader.parseSync || loader.parse;\n  } else if (loader.parseTextSync) {\n    const textDecoder = new TextDecoder();\n    data = textDecoder.decode(arraybuffer);\n    parser = loader.parseTextSync;\n  } else {\n    throw new Error(`Could not load data with ${loader.name} loader`);\n  }\n\n  return await parser(data, options);\n}\n\n// Filter out noise messages sent to workers\nfunction isKnownMessage(data, name) {\n  return data && data.type === 'process' && data.source === 'loaders.gl';\n}\n\n/*\nfunction checkMessage(evt, name) {\n  switch (evt.data && evt.data.source) {\n    // Ignore known noise event from react-dev-tools bridge, webpack build progress etc...\n    case 'react-devtools-bridge':\n    case 'react-devtools-content-script':\n    case 'react-devtools-detector':\n      return false;\n    default:\n      // fall through\n  }\n\n  switch (evt.data && evt.data.type) {\n    case 'webpackProgress':\n    case 'webpackOk':\n      return false;\n    default:\n      // Enable to debug messages\n      // const message = `${name.toLowerCase()}-worker: ignoring unknown message`;\n      // console.log(message, evt.data, evt); // eslint-disable-line\n      return false;\n  }\n}\n*/\n"],"file":"create-worker.js"}