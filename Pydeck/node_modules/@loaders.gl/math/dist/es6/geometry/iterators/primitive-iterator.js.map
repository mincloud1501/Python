{"version":3,"sources":["../../../../src/geometry/iterators/primitive-iterator.js"],"names":["GL","getPrimitiveModeType","assert","primitiveIterator","indices","attributes","mode","start","end","values","value","undefined","length","info","type","i","POINTS","i1","LINES","i2","LINE_STRIP","LINE_LOOP","TRIANGLES","i3","TRIANGLE_STRIP","TRIANGLE_FAN"],"mappings":"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","sourcesContent":["import {GL} from '../constants';\nimport {getPrimitiveModeType} from '../primitives/modes';\nimport assert from '../../utils/assert';\n\n// Will iterate over each primitive, expanding (dereferencing) indices\n// eslint-disable-next-line complexity\nexport default function* primitiveIterator({indices, attributes, mode, start = 0, end}) {\n  // support indices being an object with a values array\n  if (indices) {\n    indices = indices.values || indices.value || indices;\n  }\n\n  // Autodeduce length from indices\n  if (end === undefined) {\n    if (indices) {\n      end = indices.length;\n    }\n  }\n\n  // iteration info\n  const info = {\n    attributes,\n    type: getPrimitiveModeType(mode)\n  };\n\n  let i = start;\n  while (i < end) {\n    switch (mode) {\n      case GL.POINTS: // draw single points.\n        info.i1 = i;\n        i += 1;\n        break;\n      case GL.LINES: // draw lines. Each set of two vertices is treated as a separate line segment.\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 2;\n        break;\n      case GL.LINE_STRIP: // draw lines. Each vertex connects to the one after it.\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 1;\n        break;\n      case GL.LINE_LOOP: // draw a connected group of line segments from the first vertex to the last\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 1;\n        break;\n      case GL.TRIANGLES: // draw triangles. Each set of three vertices creates a separate triangle.\n        info.i1 = i;\n        info.i2 = i + 1;\n        info.i3 = i + 2;\n        i += 3;\n        break;\n      case GL.TRIANGLE_STRIP: // draw a connected group of triangles.\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 1;\n        break;\n      case GL.TRIANGLE_FAN: // draw a connected group of triangles.\n        info.i1 = 1;\n        info.i2 = i;\n        info.i2 = i + 1;\n        i += 1;\n        break;\n\n      default:\n        assert(false);\n    }\n\n    // if indices are present, lookup actual vertices in indices\n    if (indices) {\n      if ('i1' in info) {\n        info.i1 = indices[info.i1];\n        info.i2 = indices[info.i2];\n        info.i3 = indices[info.i3];\n      }\n    }\n\n    yield info;\n  }\n}\n"],"file":"primitive-iterator.js"}