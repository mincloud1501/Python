{"version":3,"sources":["../../../../src/geometry/iterators/primitive-iterator.js"],"names":["primitiveIterator","GL","getPrimitiveModeType","assert","indices","attributes","mode","start","end","values","value","undefined","length","info","type","i","POINTS","LINES","LINE_STRIP","LINE_LOOP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","i1","i2","i3"],"mappings":"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","sourcesContent":["import {GL} from '../constants';\nimport {getPrimitiveModeType} from '../primitives/modes';\nimport assert from '../../utils/assert';\n\n// Will iterate over each primitive, expanding (dereferencing) indices\n// eslint-disable-next-line complexity\nexport default function* primitiveIterator({indices, attributes, mode, start = 0, end}) {\n  // support indices being an object with a values array\n  if (indices) {\n    indices = indices.values || indices.value || indices;\n  }\n\n  // Autodeduce length from indices\n  if (end === undefined) {\n    if (indices) {\n      end = indices.length;\n    }\n  }\n\n  // iteration info\n  const info = {\n    attributes,\n    type: getPrimitiveModeType(mode)\n  };\n\n  let i = start;\n  while (i < end) {\n    switch (mode) {\n      case GL.POINTS: // draw single points.\n        info.i1 = i;\n        i += 1;\n        break;\n      case GL.LINES: // draw lines. Each set of two vertices is treated as a separate line segment.\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 2;\n        break;\n      case GL.LINE_STRIP: // draw lines. Each vertex connects to the one after it.\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 1;\n        break;\n      case GL.LINE_LOOP: // draw a connected group of line segments from the first vertex to the last\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 1;\n        break;\n      case GL.TRIANGLES: // draw triangles. Each set of three vertices creates a separate triangle.\n        info.i1 = i;\n        info.i2 = i + 1;\n        info.i3 = i + 2;\n        i += 3;\n        break;\n      case GL.TRIANGLE_STRIP: // draw a connected group of triangles.\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 1;\n        break;\n      case GL.TRIANGLE_FAN: // draw a connected group of triangles.\n        info.i1 = 1;\n        info.i2 = i;\n        info.i2 = i + 1;\n        i += 1;\n        break;\n\n      default:\n        assert(false);\n    }\n\n    // if indices are present, lookup actual vertices in indices\n    if (indices) {\n      if ('i1' in info) {\n        info.i1 = indices[info.i1];\n        info.i2 = indices[info.i2];\n        info.i3 = indices[info.i3];\n      }\n    }\n\n    yield info;\n  }\n}\n"],"file":"primitive-iterator.js"}