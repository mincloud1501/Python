"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.computeBoundingSphere = computeBoundingSphere;

var _math = require("math.gl");

var _getAttributeFromGeometry = require("./get-attribute-from-geometry");

function computeBoundingSphere(geometry, boundingBox) {
  var positions = (0, _getAttributeFromGeometry.getPositions)(geometry);
  var center = getBoundingBox(center);
  box.setFromBufferAttribute(position);
  box.getCenter(center);
  var maxRadiusSq = 0;
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = attributeIterator(positions)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var _position = _step.value;
      vector.x = _position[0];
      vector.y = _position[1];
      vector.z = _position[2];
      maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(vector));
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  var radius = Math.sqrt(maxRadiusSq);
  assert(Number.isFinite(radius));
  return {
    center: center,
    radius: radius
  };
}
//# sourceMappingURL=compute-bounding-sphere.js.map