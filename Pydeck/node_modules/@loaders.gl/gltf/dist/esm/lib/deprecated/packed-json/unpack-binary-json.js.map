{"version":3,"sources":["../../../../../src/lib/deprecated/packed-json/unpack-binary-json.js"],"names":["unpackJsonArrays","json","buffers","options","unpackJsonArraysRecursive","topJson","object","buffer","decodeJSONPointer","Array","isArray","map","element","newObject","key","pointer","parseJSONPointer","field","index","console","error","value","indexOf","slice","matches","match","parseInt"],"mappings":";;AAAA,eAAe,SAASA,gBAAT,CAA0BC,IAA1B,EAAgCC,OAAhC,EAAuD;AAAA,MAAdC,OAAc,uEAAJ,EAAI;AACpE,SAAOC,yBAAyB,CAACH,IAAD,EAAOA,IAAP,EAAaC,OAAb,EAAsBC,OAAtB,CAAhC;AACD;;AAGD,SAASC,yBAAT,CAAmCH,IAAnC,EAAyCI,OAAzC,EAAkDH,OAAlD,EAAyE;AAAA,MAAdC,OAAc,uEAAJ,EAAI;AACvE,MAAMG,MAAM,GAAGL,IAAf;AAEA,MAAMM,MAAM,GAAGC,iBAAiB,CAACF,MAAD,EAASJ,OAAT,CAAhC;;AACA,MAAIK,MAAJ,EAAY;AACV,WAAOA,MAAP;AACD;;AAGD,MAAIE,KAAK,CAACC,OAAN,CAAcJ,MAAd,CAAJ,EAA2B;AACzB,WAAOA,MAAM,CAACK,GAAP,CAAW,UAAAC,OAAO;AAAA,aAAIR,yBAAyB,CAACQ,OAAD,EAAUP,OAAV,EAAmBH,OAAnB,EAA4BC,OAA5B,CAA7B;AAAA,KAAlB,CAAP;AACD;;AAGD,MAAIG,MAAM,KAAK,IAAX,IAAmB,QAAOA,MAAP,MAAkB,QAAzC,EAAmD;AACjD,QAAMO,SAAS,GAAG,EAAlB;;AACA,SAAK,IAAMC,GAAX,IAAkBR,MAAlB,EAA0B;AACxBO,MAAAA,SAAS,CAACC,GAAD,CAAT,GAAiBV,yBAAyB,CAACE,MAAM,CAACQ,GAAD,CAAP,EAAcT,OAAd,EAAuBH,OAAvB,EAAgCC,OAAhC,CAA1C;AACD;;AACD,WAAOU,SAAP;AACD;;AAED,SAAOP,MAAP;AACD;;AAED,SAASE,iBAAT,CAA2BF,MAA3B,EAAmCJ,OAAnC,EAA4C;AAC1C,MAAMa,OAAO,GAAGC,gBAAgB,CAACV,MAAD,CAAhC;;AACA,MAAIS,OAAJ,EAAa;AAAA,kCACYA,OADZ;AAAA,QACJE,KADI;AAAA,QACGC,KADH;;AAEX,QAAMX,MAAM,GAAGL,OAAO,CAACe,KAAD,CAAP,IAAkBf,OAAO,CAACe,KAAD,CAAP,CAAeC,KAAf,CAAjC;;AACA,QAAIX,MAAJ,EAAY;AACV,aAAOA,MAAP;AACD;;AACDY,IAAAA,OAAO,CAACC,KAAR,gCAAsCd,MAAtC,iBAAmDW,KAAnD,cAA4DC,KAA5D;AACD;;AACD,SAAO,IAAP;AACD;;AAED,SAASF,gBAAT,CAA0BK,KAA1B,EAAiC;AAC/B,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAE7B,QAAIA,KAAK,CAACC,OAAN,CAAc,KAAd,MAAyB,CAA7B,EAAgC;AAC9B,aAAOD,KAAK,CAACE,KAAN,CAAY,CAAZ,CAAP;AACD;;AAED,QAAIC,OAAO,GAAGH,KAAK,CAACI,KAAN,CAAY,uBAAZ,CAAd;;AACA,QAAID,OAAJ,EAAa;AACX,UAAMN,KAAK,GAAGQ,QAAQ,CAACF,OAAO,CAAC,CAAD,CAAR,EAAa,EAAb,CAAtB;AACA,aAAO,CAACA,OAAO,CAAC,CAAD,CAAR,EAAaN,KAAb,CAAP;AACD;;AAGDM,IAAAA,OAAO,GAAGH,KAAK,CAACI,KAAN,CAAY,gBAAZ,CAAV;;AACA,QAAID,OAAJ,EAAa;AACX,UAAMN,MAAK,GAAGQ,QAAQ,CAACF,OAAO,CAAC,CAAD,CAAR,EAAa,EAAb,CAAtB;;AACA,aAAO,CAAC,WAAD,EAAcN,MAAd,CAAP;AACD;AACF;;AAED,SAAO,IAAP;AACD","sourcesContent":["export default function unpackJsonArrays(json, buffers, options = {}) {\n  return unpackJsonArraysRecursive(json, json, buffers, options);\n}\n\n// Recursively unpacks objects, replacing \"JSON pointers\" with typed arrays\nfunction unpackJsonArraysRecursive(json, topJson, buffers, options = {}) {\n  const object = json;\n\n  const buffer = decodeJSONPointer(object, buffers);\n  if (buffer) {\n    return buffer;\n  }\n\n  // Copy array\n  if (Array.isArray(object)) {\n    return object.map(element => unpackJsonArraysRecursive(element, topJson, buffers, options));\n  }\n\n  // Copy object\n  if (object !== null && typeof object === 'object') {\n    const newObject = {};\n    for (const key in object) {\n      newObject[key] = unpackJsonArraysRecursive(object[key], topJson, buffers, options);\n    }\n    return newObject;\n  }\n\n  return object;\n}\n\nfunction decodeJSONPointer(object, buffers) {\n  const pointer = parseJSONPointer(object);\n  if (pointer) {\n    const [field, index] = pointer;\n    const buffer = buffers[field] && buffers[field][index];\n    if (buffer) {\n      return buffer;\n    }\n    console.error(`Invalid JSON pointer ${object}: #/${field}/${index}`); // eslint-disable-line\n  }\n  return null;\n}\n\nfunction parseJSONPointer(value) {\n  if (typeof value === 'string') {\n    // Remove escape character\n    if (value.indexOf('##/') === 0) {\n      return value.slice(1);\n    }\n\n    let matches = value.match(/#\\/([a-z]+)\\/([0-9]+)/);\n    if (matches) {\n      const index = parseInt(matches[2], 10);\n      return [matches[1], index];\n    }\n\n    // Legacy: `$$$i`\n    matches = value.match(/\\$\\$\\$([0-9]+)/);\n    if (matches) {\n      const index = parseInt(matches[1], 10);\n      return ['accessors', index];\n    }\n  }\n\n  return null;\n}\n"],"file":"unpack-binary-json.js"}