{"version":3,"sources":["../../../../src/lib/deprecated/glb-parser.js"],"names":["assert","parseGLBSync","isGLB","ATTRIBUTE_TYPE_TO_COMPONENTS","ATTRIBUTE_COMPONENT_TYPE_TO_BYTE_SIZE","ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY","unpackBinaryJson","unpackGLTFBuffers","GLBParser","arrayBuffer","options","parseSync","glbArrayBuffer","binaryByteOffset","packedJson","json","byteOffset","binChunkByteOffset","unpackedBuffers","key","glTFBufferView","Uint8Array","byteLength","glTFAccessor","ArrayType","componentType","components","type","bytesPerComponent","length","count","bufferViews","bufferView","glTFImage","typedArray","getBufferView","mimeType","arrayBufferView","blob","Blob","urlCreator","self","URL","webkitURL","imageUrl","createObjectURL","img","Image","src","Promise","resolve","onload"],"mappings":"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","sourcesContent":["/* eslint-disable camelcase, max-statements, no-restricted-globals */\nimport assert from '../utils/assert';\nimport parseGLBSync, {isGLB} from '../parse-glb';\nimport {\n  ATTRIBUTE_TYPE_TO_COMPONENTS,\n  ATTRIBUTE_COMPONENT_TYPE_TO_BYTE_SIZE,\n  ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY\n} from '../gltf-utils/gltf-utils';\nimport unpackBinaryJson from './packed-json/unpack-binary-json';\nimport unpackGLTFBuffers from './packed-json/unpack-gltf-buffers';\n\nexport default class GLBParser {\n  static isGLB(arrayBuffer, options = {}) {\n    const byteOffset = 0;\n    return isGLB(arrayBuffer, byteOffset);\n  }\n\n  // Return the gltf JSON and the original arrayBuffer\n  parse(arrayBuffer, options = {}) {\n    return this.parseSync(arrayBuffer, options);\n  }\n\n  parseSync(arrayBuffer, options = {}) {\n    this.glbArrayBuffer = arrayBuffer;\n\n    this.binaryByteOffset = null;\n    this.packedJson = null;\n    this.json = null;\n\n    // Only parse once\n    if (this.json === null && this.binaryByteOffset === null) {\n      const byteOffset = 0;\n\n      // Populates the supplied object (`this`) with parsed data members.\n      parseGLBSync(this, this.glbArrayBuffer, byteOffset, options);\n\n      // Backwards compat\n      this.binaryByteOffset = this.binChunkByteOffset;\n\n      // Unpack binary JSON\n      this.packedJson = this.json;\n\n      const unpackedBuffers = unpackGLTFBuffers(\n        this.glbArrayBuffer,\n        this.json,\n        this.binaryByteOffset\n      );\n      this.json = unpackBinaryJson(this.json, unpackedBuffers);\n\n      this.unpackedBuffers = unpackedBuffers;\n    }\n\n    return this;\n  }\n\n  // Returns application JSON data stored in `key`\n  getApplicationData(key) {\n    return this.json[key];\n  }\n\n  // Returns JSON envelope\n  getJSON() {\n    return this.json;\n  }\n\n  // Return binary chunk\n  getArrayBuffer() {\n    return this.glbArrayBuffer;\n  }\n\n  // Return index into binary chunk\n  getBinaryByteOffset() {\n    return this.binaryByteOffset;\n  }\n\n  // Unpacks a bufferview into a new Uint8Array that is a view into the binary chunk\n  getBufferView(glTFBufferView) {\n    const byteOffset = (glTFBufferView.byteOffset || 0) + this.binaryByteOffset;\n    return new Uint8Array(this.glbArrayBuffer, byteOffset, glTFBufferView.byteLength);\n  }\n\n  // Unpacks a glTF accessor into a new typed array that is a view into the binary chunk\n  getBuffer(glTFAccessor) {\n    // Decode the glTF accessor format\n    const ArrayType = ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY[glTFAccessor.componentType];\n    const components = ATTRIBUTE_TYPE_TO_COMPONENTS[glTFAccessor.type];\n    const bytesPerComponent = ATTRIBUTE_COMPONENT_TYPE_TO_BYTE_SIZE[glTFAccessor.componentType];\n    const length = glTFAccessor.count * components;\n    const byteLength = glTFAccessor.count * components * bytesPerComponent;\n\n    // Get the boundaries of the binary sub-chunk for this bufferView\n    const glTFBufferView = this.json.bufferViews[glTFAccessor.bufferView];\n    assert(byteLength >= 0 && glTFAccessor.byteOffset + byteLength <= glTFBufferView.byteLength);\n\n    const byteOffset = glTFBufferView.byteOffset + this.binaryByteOffset + glTFAccessor.byteOffset;\n    return new ArrayType(this.glbArrayBuffer, byteOffset, length);\n  }\n\n  // Unpacks an image into an HTML image\n  getImageData(glTFImage) {\n    return {\n      typedArray: this.getBufferView(glTFImage.bufferView),\n      mimeType: glTFImage.mimeType || 'image/jpeg'\n    };\n  }\n\n  getImage(glTFImage) {\n    /* global self, Blob, Image */\n    const arrayBufferView = this.getBufferView(glTFImage.bufferView);\n    const mimeType = glTFImage.mimeType || 'image/jpeg';\n    const blob = new Blob([arrayBufferView], {type: mimeType});\n    const urlCreator = self.URL || self.webkitURL;\n    const imageUrl = urlCreator.createObjectURL(blob);\n    const img = new Image();\n    img.src = imageUrl;\n    return img;\n  }\n\n  getImageAsync(glTFImage) {\n    /* global self, Blob, Image */\n    return new Promise(resolve => {\n      const arrayBufferView = this.getBufferView(glTFImage.bufferView);\n      const mimeType = glTFImage.mimeType || 'image/jpeg';\n      const blob = new Blob([arrayBufferView], {type: mimeType});\n      const urlCreator = self.URL || self.webkitURL;\n      const imageUrl = urlCreator.createObjectURL(blob);\n      const img = new Image();\n      img.onload = () => resolve(img);\n      img.src = imageUrl;\n    });\n  }\n}\n"],"file":"glb-parser.js"}