import _regeneratorRuntime from "@babel/runtime/regenerator";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import assert from './utils/assert';
import { getFullUri } from './gltf-utils/gltf-utils';
import { decodeExtensions, decodeExtensionsSync } from './extensions/extensions';
import parseGLBSync, { isGLB } from './parse-glb';
import postProcessGLTF from './post-process-gltf';
var DEFAULT_OPTIONS = {
  fetchLinkedResources: true,
  fetchImages: false,
  createImages: false,
  decompress: false,
  postProcess: false,
  log: console
};
export function isGLTF(arrayBuffer) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var dataView = new DataView(arrayBuffer);
  var byteOffset = 0;
  return isGLB(dataView, byteOffset);
}
export function parseGLTF(_x, _x2) {
  return _parseGLTF.apply(this, arguments);
}

function _parseGLTF() {
  _parseGLTF = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(gltf, arrayBufferOrString) {
    var byteOffset,
        options,
        context,
        promises,
        _promise,
        promise,
        _args = arguments;

    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            byteOffset = _args.length > 2 && _args[2] !== undefined ? _args[2] : 0;
            options = _args.length > 3 ? _args[3] : undefined;
            context = _args.length > 4 ? _args[4] : undefined;
            options = _objectSpread({}, DEFAULT_OPTIONS, {}, options.gltf);
            parseGLTFContainerSync(gltf, arrayBufferOrString, byteOffset, options);
            promises = [];

            if (options.fetchImages) {
              _promise = fetchImages(gltf, options, context);
              promises.push(_promise);
            }

            if (!options.fetchLinkedResources) {
              _context.next = 10;
              break;
            }

            _context.next = 10;
            return fetchBuffers(gltf, options, context);

          case 10:
            promise = decodeExtensions(gltf, options, context);
            promises.push(promise);
            _context.next = 14;
            return Promise.all(promises);

          case 14:
            return _context.abrupt("return", options.postProcess ? postProcessGLTF(gltf, options) : gltf);

          case 15:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _parseGLTF.apply(this, arguments);
}

export function parseGLTFSync(gltf, arrayBufferOrString) {
  var byteOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var options = arguments.length > 3 ? arguments[3] : undefined;
  var context = arguments.length > 4 ? arguments[4] : undefined;
  options = _objectSpread({}, DEFAULT_OPTIONS, {}, options);
  parseGLTFContainerSync(gltf, arrayBufferOrString, byteOffset, options);

  if (options.fetchLinkedResources) {
    fetchBuffersSync(gltf, options);
  }

  if (options.decodeExtensions) {
    decodeExtensionsSync(gltf, options);
  }

  return options.postProcess ? postProcessGLTF(gltf, options) : gltf;
}

function parseGLTFContainerSync(gltf, data, byteOffset, options) {
  if (options.uri) {
    gltf.baseUri = options.uri;
  }

  if (data instanceof ArrayBuffer && !isGLB(data, byteOffset, options)) {
    var textDecoder = new TextDecoder();
    data = textDecoder.decode(data);
  }

  if (typeof data === 'string') {
    gltf.json = JSON.parse(data);
  } else if (data instanceof ArrayBuffer) {
    gltf._glb = {};
    byteOffset = parseGLBSync(gltf._glb, data, byteOffset, options);
    gltf.json = gltf._glb.json;
  } else {
    gltf.json = data;
  }

  var buffers = gltf.json.buffers || [];
  gltf.buffers = new Array(buffers.length).fill({});

  if (gltf._glb && gltf._glb.hasBinChunk) {
    gltf.buffers[0] = {
      arrayBuffer: gltf._glb.binChunks[0].arrayBuffer,
      byteOffset: gltf._glb.binChunks[0].byteOffset,
      byteLength: gltf._glb.binChunks[0].byteLength
    };
    gltf.json.buffers[0].data = gltf.buffers[0].arrayBuffer;
    gltf.json.buffers[0].byteOffset = gltf.buffers[0].byteOffset;
  }

  var images = gltf.json.images || [];
  gltf.images = new Array(images.length).fill({});
}

function fetchBuffers(_x3, _x4, _x5) {
  return _fetchBuffers.apply(this, arguments);
}

function _fetchBuffers() {
  _fetchBuffers = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(gltf, options, context) {
    var i, buffer, fetch, uri, response, arrayBuffer;
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            i = 0;

          case 1:
            if (!(i < gltf.json.buffers.length)) {
              _context2.next = 21;
              break;
            }

            buffer = gltf.json.buffers[i];

            if (!buffer.uri) {
              _context2.next = 18;
              break;
            }

            if (options.uri) {
              _context2.next = 7;
              break;
            }

            console.warn('options.uri must be set to decode embedded glTF buffers');
            return _context2.abrupt("return");

          case 7:
            fetch = context.fetch;
            assert(fetch);
            uri = getFullUri(buffer.uri, options.uri);
            _context2.next = 12;
            return fetch(uri);

          case 12:
            response = _context2.sent;
            _context2.next = 15;
            return response.arrayBuffer();

          case 15:
            arrayBuffer = _context2.sent;
            gltf.buffers[i] = {
              arrayBuffer: arrayBuffer,
              byteOffset: 0,
              byteLength: arrayBuffer.byteLength
            };
            delete buffer.uri;

          case 18:
            ++i;
            _context2.next = 1;
            break;

          case 21:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _fetchBuffers.apply(this, arguments);
}

function fetchBuffersSync(gltf, options) {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = (gltf.json.buffers || [])[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var buffer = _step.value;

      if (buffer.uri) {
        throw new Error('parseGLTFSync: Cannot decode uri buffers');
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
}

function fetchImages(_x6, _x7, _x8) {
  return _fetchImages.apply(this, arguments);
}

function _fetchImages() {
  _fetchImages = _asyncToGenerator(_regeneratorRuntime.mark(function _callee3(gltf, options, context) {
    var images, promises, i, image;
    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            images = gltf.json.images || [];
            promises = [];

            for (i = 0; i < images.length; ++i) {
              image = images[i];

              if ('uri' in image) {
                promises.push(fetchAndParseLinkedImage(gltf, image, i, options));
              }
            }

            _context3.next = 5;
            return Promise.all(promises);

          case 5:
            return _context3.abrupt("return", _context3.sent);

          case 6:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _fetchImages.apply(this, arguments);
}

function fetchAndParseLinkedImage(_x9, _x10, _x11, _x12, _x13) {
  return _fetchAndParseLinkedImage.apply(this, arguments);
}

function _fetchAndParseLinkedImage() {
  _fetchAndParseLinkedImage = _asyncToGenerator(_regeneratorRuntime.mark(function _callee4(gltf, image, i, options, context) {
    var uri;
    return _regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            uri = getFullUri(image.uri, options.uri);
            _context4.next = 3;
            return new Promise(function (resolve, reject) {
              var img = new Image();
              img.crossOrigin = 'anonymous';

              img.onload = function () {
                return resolve(img);
              };

              img.onerror = function (error) {
                return reject(error);
              };

              img.src = uri;
            });

          case 3:
            gltf.images[i] = _context4.sent;

          case 4:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _fetchAndParseLinkedImage.apply(this, arguments);
}
//# sourceMappingURL=parse-gltf.js.map