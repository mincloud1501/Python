{"version":3,"sources":["../../../src/lib/gltf-scenegraph.js"],"names":["getImageMIMEType","padTo4Bytes","copyToArray","assert","getAccessorArrayTypeAndLength","getAccessorTypeFromSize","getComponentTypeFromArray","GLTFScenegraph","gltf","json","version","buffers","key","data","extras","extensionName","isExtension","getUsedExtensions","find","name","extensions","isRequired","getRequiredExtensions","getExtension","extensionsRequired","extensionsUsed","object","index","getObject","array","Error","bufferView","getBufferView","bufferIndex","buffer","binChunk","byteOffset","Uint8Array","arrayBuffer","byteLength","accessor","getAccessor","getBuffer","ArrayType","length","image","registerUsedExtension","addExtension","registerRequiredExtension","ext","push","_removeStringFromArray","attributes","indices","mode","accessors","_addAttributes","glTFMesh","primitives","meshes","accessorIndices","imageData","mimeType","bufferViewIndex","addBufferView","glTFImage","images","Number","isFinite","sourceBuffers","glTFBufferView","bufferViews","glTFAccessor","type","size","componentType","count","sourceBuffer","accessorDefaults","Math","round","addAccessor","Object","assign","totalByteLength","ArrayBuffer","targetArray","dstByteOffset","i","string","found","indexOf","splice"],"mappings":";;;AAAA,SAAQA,gBAAR,QAA+B,oBAA/B;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,0BAAvC;AACA,OAAOC,MAAP,MAAmB,gBAAnB;AACA,SACEC,6BADF,EAEEC,uBAFF,EAGEC,yBAHF,QAIO,yBAJP;;IAOqBC,c;AACnB,0BAAYC,IAAZ,EAAkB;AAAA;;AAGhB,QAAIA,IAAI,YAAYD,cAApB,EAAoC;AAClC,aAAOC,IAAP;AACD;;AAED,QAAI,CAACA,IAAL,EAAW;AACTA,MAAAA,IAAI,GAAG;AACLC,QAAAA,IAAI,EAAE;AACJC,UAAAA,OAAO,EAAE,CADL;AAEJC,UAAAA,OAAO,EAAE;AAFL,SADD;AAKLA,QAAAA,OAAO,EAAE;AALJ,OAAP;AAOD;;AAGD,SAAKH,IAAL,GAAYA,IAAZ;AACAL,IAAAA,MAAM,CAAC,KAAKK,IAAL,CAAUC,IAAX,CAAN;AACD;;;;uCAQkBG,G,EAAK;AAEtB,UAAMC,IAAI,GAAG,KAAKJ,IAAL,CAAUG,GAAV,CAAb;AACA,aAAOC,IAAP;AACD;;;iCAEYD,G,EAAK;AAEhB,UAAME,MAAM,GAAG,KAAKL,IAAL,CAAUK,MAAV,IAAoB,EAAnC;AACA,aAAOA,MAAM,CAACF,GAAD,CAAb;AACD;;;iCAEYG,a,EAAe;AAC1B,UAAMC,WAAW,GAAG,KAAKC,iBAAL,GAAyBC,IAAzB,CAA8B,UAAAC,IAAI;AAAA,eAAIA,IAAI,KAAKJ,aAAb;AAAA,OAAlC,CAApB;AACA,UAAMK,UAAU,GAAG,KAAKX,IAAL,CAAUW,UAAV,IAAwB,EAA3C;AACA,aAAOJ,WAAW,GAAGI,UAAU,CAACL,aAAD,CAAV,IAA6B,IAAhC,GAAuC,IAAzD;AACD;;;yCAEoBA,a,EAAe;AAClC,UAAMM,UAAU,GAAG,KAAKC,qBAAL,GAA6BJ,IAA7B,CAAkC,UAAAC,IAAI;AAAA,eAAIA,IAAI,KAAKJ,aAAb;AAAA,OAAtC,CAAnB;AACA,aAAOM,UAAU,GAAG,KAAKE,YAAL,CAAkBR,aAAlB,CAAH,GAAsC,IAAvD;AACD;;;4CAEuB;AACtB,aAAO,KAAKN,IAAL,CAAUe,kBAAV,IAAgC,EAAvC;AACD;;;wCAEmB;AAClB,aAAO,KAAKf,IAAL,CAAUgB,cAAV,IAA4B,EAAnC;AACD;;;uCAEkBC,M,EAAQX,a,EAAe;AACxC,UAAMK,UAAU,GAAGM,MAAM,CAACN,UAAP,IAAqB,EAAxC;AACA,aAAOA,UAAU,CAACL,aAAD,CAAjB;AACD;;;6BAEQY,K,EAAO;AACd,aAAO,KAAKC,SAAL,CAAe,QAAf,EAAyBD,KAAzB,CAAP;AACD;;;4BAEOA,K,EAAO;AACb,aAAO,KAAKC,SAAL,CAAe,OAAf,EAAwBD,KAAxB,CAAP;AACD;;;4BAEOA,K,EAAO;AACb,aAAO,KAAKC,SAAL,CAAe,OAAf,EAAwBD,KAAxB,CAAP;AACD;;;4BAEOA,K,EAAO;AACb,aAAO,KAAKC,SAAL,CAAe,QAAf,EAAyBD,KAAzB,CAAP;AACD;;;gCAEWA,K,EAAO;AACjB,aAAO,KAAKC,SAAL,CAAe,WAAf,EAA4BD,KAA5B,CAAP;AACD;;;gCAEWA,K,EAAO;AACjB,aAAO,KAAKC,SAAL,CAAe,WAAf,EAA4BD,KAA5B,CAAP;AACD;;;8BAESA,K,EAAO;AACf,aAAO,IAAP;AACD;;;+BAEUA,K,EAAO;AAChB,aAAO,KAAKC,SAAL,CAAe,UAAf,EAA2BD,KAA3B,CAAP;AACD;;;+BAEUA,K,EAAO;AAChB,aAAO,KAAKC,SAAL,CAAe,UAAf,EAA2BD,KAA3B,CAAP;AACD;;;6BAEQA,K,EAAO;AACd,aAAO,KAAKC,SAAL,CAAe,QAAf,EAAyBD,KAAzB,CAAP;AACD;;;kCAEaA,K,EAAO;AACnB,aAAO,KAAKC,SAAL,CAAe,aAAf,EAA8BD,KAA9B,CAAP;AACD;;;8BAESA,K,EAAO;AACf,aAAO,KAAKC,SAAL,CAAe,SAAf,EAA0BD,KAA1B,CAAP;AACD;;;8BAESE,K,EAAOF,K,EAAO;AAEtB,UAAI,QAAOA,KAAP,MAAiB,QAArB,EAA+B;AAC7B,eAAOA,KAAP;AACD;;AACD,UAAMD,MAAM,GAAG,KAAKjB,IAAL,CAAUoB,KAAV,KAAoB,KAAKpB,IAAL,CAAUoB,KAAV,EAAiBF,KAAjB,CAAnC;;AACA,UAAI,CAACD,MAAL,EAAa;AACX,cAAM,IAAII,KAAJ,2CAA6CD,KAA7C,cAAsDF,KAAtD,OAAN;AACD;;AACD,aAAOD,MAAP;AACD;;;+CAI0BK,U,EAAY;AACrCA,MAAAA,UAAU,GAAG,KAAKC,aAAL,CAAmBD,UAAnB,CAAb;AACA,UAAME,WAAW,GAAGF,UAAU,CAACG,MAA/B;AAIA,UAAMC,QAAQ,GAAG,KAAK3B,IAAL,CAAUG,OAAV,CAAkBsB,WAAlB,CAAjB;AACA9B,MAAAA,MAAM,CAACgC,QAAD,CAAN;AAEA,UAAMC,UAAU,GAAGL,UAAU,CAACK,UAAX,IAAyB,IAAID,QAAQ,CAACC,UAAzD;AACA,aAAO,IAAIC,UAAJ,CAAeF,QAAQ,CAACG,WAAxB,EAAqCF,UAArC,EAAiDL,UAAU,CAACQ,UAA5D,CAAP;AACD;;;6CAIwBC,Q,EAAU;AACjCA,MAAAA,QAAQ,GAAG,KAAKC,WAAL,CAAiBD,QAAjB,CAAX;AACA,UAAMT,UAAU,GAAG,KAAKW,SAAL,CAAeF,QAAQ,CAACT,UAAxB,CAAnB;AACA,UAAMG,MAAM,GAAG,KAAKQ,SAAL,CAAeX,UAAU,CAACG,MAA1B,CAAf;AACA,UAAMI,WAAW,GAAGJ,MAAM,CAACrB,IAA3B;;AAJiC,kCAOLT,6BAA6B,CAACoC,QAAD,EAAWT,UAAX,CAPxB;AAAA,UAO1BY,SAP0B,yBAO1BA,SAP0B;AAAA,UAOfC,MAPe,yBAOfA,MAPe;;AAQjC,UAAMR,UAAU,GAAGL,UAAU,CAACK,UAAX,GAAwBI,QAAQ,CAACJ,UAApD;AACA,aAAO,IAAIO,SAAJ,CAAcL,WAAd,EAA2BF,UAA3B,EAAuCQ,MAAvC,CAAP;AACD;;;8CAIyBC,K,EAAO;AAC/BA,MAAAA,KAAK,GAAG,KAAKJ,WAAL,CAAiBI,KAAjB,CAAR;AACA,UAAMd,UAAU,GAAG,KAAKW,SAAL,CAAeG,KAAK,CAACd,UAArB,CAAnB;AACA,UAAMG,MAAM,GAAG,KAAKQ,SAAL,CAAeX,UAAU,CAACG,MAA1B,CAAf;AACA,UAAMI,WAAW,GAAGJ,MAAM,CAACrB,IAA3B;AAEA,UAAMuB,UAAU,GAAGL,UAAU,CAACK,UAAX,IAAyB,CAA5C;AACA,aAAO,IAAIC,UAAJ,CAAeC,WAAf,EAA4BF,UAA5B,EAAwCL,UAAU,CAACQ,UAAnD,CAAP;AACD;;;uCAKkB3B,G,EAAKC,I,EAAM;AAC5B,WAAKJ,IAAL,CAAUG,GAAV,IAAiBC,IAAjB;AACA,aAAO,IAAP;AACD;;;iCAGYD,G,EAAKC,I,EAAM;AACtB,WAAKJ,IAAL,CAAUK,MAAV,GAAmB,KAAKL,IAAL,CAAUK,MAAV,IAAoB,EAAvC;AACA,WAAKL,IAAL,CAAUK,MAAV,CAAiBF,GAAjB,IAAwBC,IAAxB;AACA,aAAO,IAAP;AACD;;;iCAGYE,a,EAAeF,I,EAAM;AAChCV,MAAAA,MAAM,CAACU,IAAD,CAAN;AACA,WAAKJ,IAAL,CAAUW,UAAV,GAAuB,KAAKX,IAAL,CAAUW,UAAV,IAAwB,EAA/C;AACA,WAAKX,IAAL,CAAUW,UAAV,CAAqBL,aAArB,IAAsCF,IAAtC;AACA,WAAKiC,qBAAL,CAA2B/B,aAA3B;AACA,aAAO,IAAP;AACD;;;yCAGoBA,a,EAAeF,I,EAAM;AACxCV,MAAAA,MAAM,CAACU,IAAD,CAAN;AACA,WAAKkC,YAAL,CAAkBhC,aAAlB,EAAiCF,IAAjC;AACA,WAAKmC,yBAAL,CAA+BjC,aAA/B;AACA,aAAO,IAAP;AACD;;;0CAGqBA,a,EAAe;AACnC,WAAKN,IAAL,CAAUgB,cAAV,GAA2B,KAAKhB,IAAL,CAAUgB,cAAV,IAA4B,EAAvD;;AACA,UAAI,CAAC,KAAKhB,IAAL,CAAUgB,cAAV,CAAyBP,IAAzB,CAA8B,UAAA+B,GAAG;AAAA,eAAIA,GAAG,KAAKlC,aAAZ;AAAA,OAAjC,CAAL,EAAkE;AAChE,aAAKN,IAAL,CAAUgB,cAAV,CAAyByB,IAAzB,CAA8BnC,aAA9B;AACD;AACF;;;8CAGyBA,a,EAAe;AACvC,WAAK+B,qBAAL,CAA2B/B,aAA3B;AACA,WAAKN,IAAL,CAAUe,kBAAV,GAA+B,KAAKf,IAAL,CAAUe,kBAAV,IAAgC,EAA/D;;AACA,UAAI,CAAC,KAAKf,IAAL,CAAUe,kBAAV,CAA6BN,IAA7B,CAAkC,UAAA+B,GAAG;AAAA,eAAIA,GAAG,KAAKlC,aAAZ;AAAA,OAArC,CAAL,EAAsE;AACpE,aAAKN,IAAL,CAAUe,kBAAV,CAA6B0B,IAA7B,CAAkCnC,aAAlC;AACD;AACF;;;oCAGeA,a,EAAe;AAC7B,UAAI,KAAKN,IAAL,CAAUe,kBAAd,EAAkC;AAChC,aAAK2B,sBAAL,CAA4B,KAAK1C,IAAL,CAAUe,kBAAtC,EAA0DT,aAA1D;AACD;;AACD,UAAI,KAAKN,IAAL,CAAUgB,cAAd,EAA8B;AAC5B,aAAK0B,sBAAL,CAA4B,KAAK1C,IAAL,CAAUgB,cAAtC,EAAsDV,aAAtD;AACD;;AACD,UAAI,KAAKN,IAAL,CAAUW,UAAd,EAA0B;AACxB,eAAO,KAAKX,IAAL,CAAUW,UAAV,CAAqBL,aAArB,CAAP;AACD;AACF;;;uCAEkBW,M,EAAQX,a,EAAeF,I,EAAM;AAC9C,UAAMO,UAAU,GAAGM,MAAM,CAACN,UAAP,IAAqB,EAAxC;AACAA,MAAAA,UAAU,CAACL,aAAD,CAAV,GAA4BF,IAA5B;AAED;;;4BAEOuC,U,EAAYC,O,EAAmB;AAAA,UAAVC,IAAU,uEAAH,CAAG;;AACrC,UAAMC,SAAS,GAAG,KAAKC,cAAL,CAAoBJ,UAApB,CAAlB;;AAEA,UAAMK,QAAQ,GAAG;AACfC,QAAAA,UAAU,EAAE,CACV;AACEN,UAAAA,UAAU,EAAEG,SADd;AAEEF,UAAAA,OAAO,EAAPA,OAFF;AAGEC,UAAAA,IAAI,EAAJA;AAHF,SADU;AADG,OAAjB;AAUA,WAAK7C,IAAL,CAAUkD,MAAV,GAAmB,KAAKlD,IAAL,CAAUkD,MAAV,IAAoB,EAAvC;AACA,WAAKlD,IAAL,CAAUkD,MAAV,CAAiBT,IAAjB,CAAsBO,QAAtB;AACA,aAAO,KAAKhD,IAAL,CAAUkD,MAAV,CAAiBf,MAAjB,GAA0B,CAAjC;AACD;;;kCAEaQ,U,EAAY;AACxB,UAAMQ,eAAe,GAAG,KAAKJ,cAAL,CAAoBJ,UAApB,CAAxB;;AAEA,UAAMK,QAAQ,GAAG;AACfC,QAAAA,UAAU,EAAE,CACV;AACEN,UAAAA,UAAU,EAAEQ,eADd;AAEEN,UAAAA,IAAI,EAAE;AAFR,SADU;AADG,OAAjB;AASA,WAAK7C,IAAL,CAAUkD,MAAV,GAAmB,KAAKlD,IAAL,CAAUkD,MAAV,IAAoB,EAAvC;AACA,WAAKlD,IAAL,CAAUkD,MAAV,CAAiBT,IAAjB,CAAsBO,QAAtB;AACA,aAAO,KAAKhD,IAAL,CAAUkD,MAAV,CAAiBf,MAAjB,GAA0B,CAAjC;AACD;;;6BAKQiB,S,EAAWC,Q,EAAU;AAI5BA,MAAAA,QAAQ,GAAGA,QAAQ,IAAI9D,gBAAgB,CAAC6D,SAAD,CAAvC;AAEA,UAAME,eAAe,GAAG,KAAKC,aAAL,CAAmBH,SAAnB,CAAxB;AAEA,UAAMI,SAAS,GAAG;AAChBlC,QAAAA,UAAU,EAAEgC,eADI;AAEhBD,QAAAA,QAAQ,EAARA;AAFgB,OAAlB;AAKA,WAAKrD,IAAL,CAAUyD,MAAV,GAAmB,KAAKzD,IAAL,CAAUyD,MAAV,IAAoB,EAAvC;AACA,WAAKzD,IAAL,CAAUyD,MAAV,CAAiBhB,IAAjB,CAAsBe,SAAtB;AACA,aAAO,KAAKxD,IAAL,CAAUyD,MAAV,CAAiBtB,MAAjB,GAA0B,CAAjC;AACD;;;kCAGaV,M,EAAQ;AACpB,UAAMK,UAAU,GAAGL,MAAM,CAACK,UAA1B;AACApC,MAAAA,MAAM,CAACgE,MAAM,CAACC,QAAP,CAAgB7B,UAAhB,CAAD,CAAN;AAGA,WAAK8B,aAAL,GAAqB,KAAKA,aAAL,IAAsB,EAA3C;AACA,WAAKA,aAAL,CAAmBnB,IAAnB,CAAwBhB,MAAxB;AAEA,UAAMoC,cAAc,GAAG;AACrBpC,QAAAA,MAAM,EAAE,CADa;AAGrBE,QAAAA,UAAU,EAAE,KAAKG,UAHI;AAIrBA,QAAAA,UAAU,EAAVA;AAJqB,OAAvB;AASA,WAAKA,UAAL,IAAmBtC,WAAW,CAACsC,UAAD,CAA9B;AAGA,WAAK9B,IAAL,CAAU8D,WAAV,GAAwB,KAAK9D,IAAL,CAAU8D,WAAV,IAAyB,EAAjD;AACA,WAAK9D,IAAL,CAAU8D,WAAV,CAAsBrB,IAAtB,CAA2BoB,cAA3B;AACA,aAAO,KAAK7D,IAAL,CAAU8D,WAAV,CAAsB3B,MAAtB,GAA+B,CAAtC;AACD;;;gCAGWmB,e,EAAiBvB,Q,EAAU;AACrC,UAAMgC,YAAY,GAAG;AACnBzC,QAAAA,UAAU,EAAEgC,eADO;AAEnBU,QAAAA,IAAI,EAAEpE,uBAAuB,CAACmC,QAAQ,CAACkC,IAAV,CAFV;AAGnBC,QAAAA,aAAa,EAAEnC,QAAQ,CAACmC,aAHL;AAInBC,QAAAA,KAAK,EAAEpC,QAAQ,CAACoC;AAJG,OAArB;AAOA,WAAKnE,IAAL,CAAU8C,SAAV,GAAsB,KAAK9C,IAAL,CAAU8C,SAAV,IAAuB,EAA7C;AACA,WAAK9C,IAAL,CAAU8C,SAAV,CAAoBL,IAApB,CAAyBsB,YAAzB;AACA,aAAO,KAAK/D,IAAL,CAAU8C,SAAV,CAAoBX,MAApB,GAA6B,CAApC;AACD;;;oCAKeiC,Y,EAAoC;AAAA,UAAtBrC,QAAsB,uEAAX;AAACkC,QAAAA,IAAI,EAAE;AAAP,OAAW;AAClD,UAAMX,eAAe,GAAG,KAAKC,aAAL,CAAmBa,YAAnB,CAAxB;AAEA,UAAMC,gBAAgB,GAAG;AACvBJ,QAAAA,IAAI,EAAElC,QAAQ,CAACkC,IADQ;AAEvBC,QAAAA,aAAa,EAAErE,yBAAyB,CAACuE,YAAD,CAFjB;AAGvBD,QAAAA,KAAK,EAAEG,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACjC,MAAb,GAAsBJ,QAAQ,CAACkC,IAA1C;AAHgB,OAAzB;AAMA,aAAO,KAAKO,WAAL,CAAiBlB,eAAjB,EAAkCmB,MAAM,CAACC,MAAP,CAAcL,gBAAd,EAAgCtC,QAAhC,CAAlC,CAAP;AACD;;;wCAGmB;AAElB,UAAI,KAAKF,WAAT,EAAsB;AACpB;AACD;;AAGD,UAAM8C,eAAe,GAAG,KAAK7C,UAA7B;AACA,UAAMD,WAAW,GAAG,IAAI+C,WAAJ,CAAgBD,eAAhB,CAApB;AACA,UAAME,WAAW,GAAG,IAAIjD,UAAJ,CAAeC,WAAf,CAApB;AAGA,UAAIiD,aAAa,GAAG,CAApB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKnB,aAAL,CAAmBzB,MAAvC,EAA+C4C,CAAC,EAAhD,EAAoD;AAClD,YAAMX,YAAY,GAAG,KAAKR,aAAL,CAAmBmB,CAAnB,CAArB;AACAD,QAAAA,aAAa,GAAGrF,WAAW,CAAC2E,YAAD,EAAeS,WAAf,EAA4BC,aAA5B,CAA3B;AACD;;AAGD,WAAK9E,IAAL,CAAUE,OAAV,CAAkB,CAAlB,EAAqB4B,UAArB,GAAkC6C,eAAlC;AAGA,WAAK9C,WAAL,GAAmBA,WAAnB;AAGA,WAAK+B,aAAL,GAAqB,EAArB;AACD;;;2CAIsBxC,K,EAAO4D,M,EAAQ;AACpC,UAAIC,KAAK,GAAG,IAAZ;;AACA,aAAOA,KAAP,EAAc;AACZ,YAAM/D,KAAK,GAAGE,KAAK,CAAC8D,OAAN,CAAcF,MAAd,CAAd;;AACA,YAAI9D,KAAK,GAAG,CAAC,CAAb,EAAgB;AACdE,UAAAA,KAAK,CAAC+D,MAAN,CAAajE,KAAb,EAAoB,CAApB;AACD,SAFD,MAEO;AACL+D,UAAAA,KAAK,GAAG,KAAR;AACD;AACF;AACF;;;wBAzWU;AACT,aAAO,KAAKlF,IAAL,CAAUC,IAAjB;AACD;;;;;;SA3BkBF,c","sourcesContent":["import {getImageMIMEType} from '@loaders.gl/images';\nimport {padTo4Bytes, copyToArray} from '@loaders.gl/loader-utils';\nimport assert from './utils/assert';\nimport {\n  getAccessorArrayTypeAndLength,\n  getAccessorTypeFromSize,\n  getComponentTypeFromArray\n} from './gltf-utils/gltf-utils';\n\n// Class for structured access to GLTF data\nexport default class GLTFScenegraph {\n  constructor(gltf) {\n    // Signature: new GLTFScenegraph(data : GLTFScenegraph)\n    // Allow utilities to create a GLTFScenegraph object from gltf data without checking\n    if (gltf instanceof GLTFScenegraph) {\n      return gltf;\n    }\n\n    if (!gltf) {\n      gltf = {\n        json: {\n          version: 2,\n          buffers: []\n        },\n        buffers: []\n      };\n    }\n\n    // TODO - this is too sloppy, define inputs more clearly\n    this.gltf = gltf;\n    assert(this.gltf.json);\n  }\n\n  // Accessors\n\n  get json() {\n    return this.gltf.json;\n  }\n\n  getApplicationData(key) {\n    // TODO - Data is already unpacked by GLBParser\n    const data = this.json[key];\n    return data;\n  }\n\n  getExtraData(key) {\n    // TODO - Data is already unpacked by GLBParser\n    const extras = this.json.extras || {};\n    return extras[key];\n  }\n\n  getExtension(extensionName) {\n    const isExtension = this.getUsedExtensions().find(name => name === extensionName);\n    const extensions = this.json.extensions || {};\n    return isExtension ? extensions[extensionName] || true : null;\n  }\n\n  getRequiredExtension(extensionName) {\n    const isRequired = this.getRequiredExtensions().find(name => name === extensionName);\n    return isRequired ? this.getExtension(extensionName) : null;\n  }\n\n  getRequiredExtensions() {\n    return this.json.extensionsRequired || [];\n  }\n\n  getUsedExtensions() {\n    return this.json.extensionsUsed || [];\n  }\n\n  getObjectExtension(object, extensionName) {\n    const extensions = object.extensions || {};\n    return extensions[extensionName];\n  }\n\n  getScene(index) {\n    return this.getObject('scenes', index);\n  }\n\n  getNode(index) {\n    return this.getObject('nodes', index);\n  }\n\n  getSkin(index) {\n    return this.getObject('skins', index);\n  }\n\n  getMesh(index) {\n    return this.getObject('meshes', index);\n  }\n\n  getMaterial(index) {\n    return this.getObject('materials', index);\n  }\n\n  getAccessor(index) {\n    return this.getObject('accessors', index);\n  }\n\n  getCamera(index) {\n    return null; // TODO: fix this\n  }\n\n  getTexture(index) {\n    return this.getObject('textures', index);\n  }\n\n  getSampler(index) {\n    return this.getObject('samplers', index);\n  }\n\n  getImage(index) {\n    return this.getObject('images', index);\n  }\n\n  getBufferView(index) {\n    return this.getObject('bufferViews', index);\n  }\n\n  getBuffer(index) {\n    return this.getObject('buffers', index);\n  }\n\n  getObject(array, index) {\n    // check if already resolved\n    if (typeof index === 'object') {\n      return index;\n    }\n    const object = this.json[array] && this.json[array][index];\n    if (!object) {\n      throw new Error(`glTF file error: Could not find ${array}[${index}]`); // eslint-disable-line\n    }\n    return object;\n  }\n\n  // accepts buffer view index or buffer view object\n  // returns a `Uint8Array`\n  getTypedArrayForBufferView(bufferView) {\n    bufferView = this.getBufferView(bufferView);\n    const bufferIndex = bufferView.buffer;\n\n    // Get hold of the arrayBuffer\n    // const buffer = this.getBuffer(bufferIndex);\n    const binChunk = this.gltf.buffers[bufferIndex];\n    assert(binChunk);\n\n    const byteOffset = bufferView.byteOffset || 0 + binChunk.byteOffset;\n    return new Uint8Array(binChunk.arrayBuffer, byteOffset, bufferView.byteLength);\n  }\n\n  // accepts accessor index or accessor object\n  // returns a typed array with type that matches the types\n  getTypedArrayForAccessor(accessor) {\n    accessor = this.getAccessor(accessor);\n    const bufferView = this.getBuffer(accessor.bufferView);\n    const buffer = this.getBuffer(bufferView.buffer);\n    const arrayBuffer = buffer.data;\n\n    // Create a new typed array as a view into the combined buffer\n    const {ArrayType, length} = getAccessorArrayTypeAndLength(accessor, bufferView);\n    const byteOffset = bufferView.byteOffset + accessor.byteOffset;\n    return new ArrayType(arrayBuffer, byteOffset, length);\n  }\n\n  // accepts accessor index or accessor object\n  // returns a `Uint8Array`\n  getTypedArrayForImageData(image) {\n    image = this.getAccessor(image);\n    const bufferView = this.getBuffer(image.bufferView);\n    const buffer = this.getBuffer(bufferView.buffer);\n    const arrayBuffer = buffer.data;\n\n    const byteOffset = bufferView.byteOffset || 0;\n    return new Uint8Array(arrayBuffer, byteOffset, bufferView.byteLength);\n  }\n\n  // MODIFERS\n\n  // Add an extra application-defined key to the top-level data structure\n  addApplicationData(key, data) {\n    this.json[key] = data;\n    return this;\n  }\n\n  // `extras` - Standard GLTF field for storing application specific data\n  addExtraData(key, data) {\n    this.json.extras = this.json.extras || {};\n    this.json.extras[key] = data;\n    return this;\n  }\n\n  // Add to standard GLTF top level extension object, mark as used\n  addExtension(extensionName, data) {\n    assert(data);\n    this.json.extensions = this.json.extensions || {};\n    this.json.extensions[extensionName] = data;\n    this.registerUsedExtension(extensionName);\n    return this;\n  }\n\n  // Standard GLTF top level extension object, mark as used and required\n  addRequiredExtension(extensionName, data) {\n    assert(data);\n    this.addExtension(extensionName, data);\n    this.registerRequiredExtension(extensionName);\n    return this;\n  }\n\n  // Add extensionName to list of used extensions\n  registerUsedExtension(extensionName) {\n    this.json.extensionsUsed = this.json.extensionsUsed || [];\n    if (!this.json.extensionsUsed.find(ext => ext === extensionName)) {\n      this.json.extensionsUsed.push(extensionName);\n    }\n  }\n\n  // Add extensionName to list of required extensions\n  registerRequiredExtension(extensionName) {\n    this.registerUsedExtension(extensionName);\n    this.json.extensionsRequired = this.json.extensionsRequired || [];\n    if (!this.json.extensionsRequired.find(ext => ext === extensionName)) {\n      this.json.extensionsRequired.push(extensionName);\n    }\n  }\n\n  // Removes an extension from the top-level list\n  removeExtension(extensionName) {\n    if (this.json.extensionsRequired) {\n      this._removeStringFromArray(this.json.extensionsRequired, extensionName);\n    }\n    if (this.json.extensionsUsed) {\n      this._removeStringFromArray(this.json.extensionsUsed, extensionName);\n    }\n    if (this.json.extensions) {\n      delete this.json.extensions[extensionName];\n    }\n  }\n\n  setObjectExtension(object, extensionName, data) {\n    const extensions = object.extensions || {};\n    extensions[extensionName] = data;\n    // TODO - add to usedExtensions...\n  }\n\n  addMesh(attributes, indices, mode = 4) {\n    const accessors = this._addAttributes(attributes);\n\n    const glTFMesh = {\n      primitives: [\n        {\n          attributes: accessors,\n          indices,\n          mode\n        }\n      ]\n    };\n\n    this.json.meshes = this.json.meshes || [];\n    this.json.meshes.push(glTFMesh);\n    return this.json.meshes.length - 1;\n  }\n\n  addPointCloud(attributes) {\n    const accessorIndices = this._addAttributes(attributes);\n\n    const glTFMesh = {\n      primitives: [\n        {\n          attributes: accessorIndices,\n          mode: 0 // GL.POINTS\n        }\n      ]\n    };\n\n    this.json.meshes = this.json.meshes || [];\n    this.json.meshes.push(glTFMesh);\n    return this.json.meshes.length - 1;\n  }\n\n  // Adds a binary image. Builds glTF \"JSON metadata\" and saves buffer reference\n  // Buffer will be copied into BIN chunk during \"pack\"\n  // Currently encodes as glTF image\n  addImage(imageData, mimeType) {\n    // If image is referencing a bufferView instead of URI, mimeType must be defined:\n    //   https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#images\n    //   \"a reference to a bufferView; in that case mimeType must be defined.\"\n    mimeType = mimeType || getImageMIMEType(imageData);\n\n    const bufferViewIndex = this.addBufferView(imageData);\n\n    const glTFImage = {\n      bufferView: bufferViewIndex,\n      mimeType\n    };\n\n    this.json.images = this.json.images || [];\n    this.json.images.push(glTFImage);\n    return this.json.images.length - 1;\n  }\n\n  // Add one untyped source buffer, create a matching glTF `bufferView`, and return its index\n  addBufferView(buffer) {\n    const byteLength = buffer.byteLength;\n    assert(Number.isFinite(byteLength));\n\n    // Add this buffer to the list of buffers to be written to the body.\n    this.sourceBuffers = this.sourceBuffers || [];\n    this.sourceBuffers.push(buffer);\n\n    const glTFBufferView = {\n      buffer: 0,\n      // Write offset from the start of the binary body\n      byteOffset: this.byteLength,\n      byteLength\n    };\n\n    // We've now added the contents to the body, so update the total length\n    // Every sub-chunk needs to be 4-byte align ed\n    this.byteLength += padTo4Bytes(byteLength);\n\n    // Add a bufferView indicating start and length of this binary sub-chunk\n    this.json.bufferViews = this.json.bufferViews || [];\n    this.json.bufferViews.push(glTFBufferView);\n    return this.json.bufferViews.length - 1;\n  }\n\n  // Adds an accessor to a bufferView\n  addAccessor(bufferViewIndex, accessor) {\n    const glTFAccessor = {\n      bufferView: bufferViewIndex,\n      type: getAccessorTypeFromSize(accessor.size),\n      componentType: accessor.componentType,\n      count: accessor.count\n    };\n\n    this.json.accessors = this.json.accessors || [];\n    this.json.accessors.push(glTFAccessor);\n    return this.json.accessors.length - 1;\n  }\n\n  // Add a binary buffer. Builds glTF \"JSON metadata\" and saves buffer reference\n  // Buffer will be copied into BIN chunk during \"pack\"\n  // Currently encodes buffers as glTF accessors, but this could be optimized\n  addBinaryBuffer(sourceBuffer, accessor = {size: 3}) {\n    const bufferViewIndex = this.addBufferView(sourceBuffer);\n\n    const accessorDefaults = {\n      size: accessor.size,\n      componentType: getComponentTypeFromArray(sourceBuffer),\n      count: Math.round(sourceBuffer.length / accessor.size)\n    };\n\n    return this.addAccessor(bufferViewIndex, Object.assign(accessorDefaults, accessor));\n  }\n\n  // Pack the binary chunk\n  createBinaryChunk() {\n    // Already packed\n    if (this.arrayBuffer) {\n      return;\n    }\n\n    // Allocate total array\n    const totalByteLength = this.byteLength;\n    const arrayBuffer = new ArrayBuffer(totalByteLength);\n    const targetArray = new Uint8Array(arrayBuffer);\n\n    // Copy each array into\n    let dstByteOffset = 0;\n    for (let i = 0; i < this.sourceBuffers.length; i++) {\n      const sourceBuffer = this.sourceBuffers[i];\n      dstByteOffset = copyToArray(sourceBuffer, targetArray, dstByteOffset);\n    }\n\n    // Update the glTF BIN CHUNK byte length\n    this.json.buffers[0].byteLength = totalByteLength;\n\n    // Save generated arrayBuffer\n    this.arrayBuffer = arrayBuffer;\n\n    // Clear out sourceBuffers\n    this.sourceBuffers = [];\n  }\n\n  // PRIVATE\n\n  _removeStringFromArray(array, string) {\n    let found = true;\n    while (found) {\n      const index = array.indexOf(string);\n      if (index > -1) {\n        array.splice(index, 1);\n      } else {\n        found = false;\n      }\n    }\n  }\n}\n"],"file":"gltf-scenegraph.js"}