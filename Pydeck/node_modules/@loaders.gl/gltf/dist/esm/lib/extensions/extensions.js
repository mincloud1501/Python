import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import KHR_draco_mesh_compression from './KHR_draco_mesh_compression';
import KHR_lights_punctual from './KHR_lights_punctual';
export var EXTENSIONS = {
  KHR_draco_mesh_compression: KHR_draco_mesh_compression,
  KHR_lights_punctual: KHR_lights_punctual
};
export function decodeExtensions(_x, _x2) {
  return _decodeExtensions.apply(this, arguments);
}

function _decodeExtensions() {
  _decodeExtensions = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(gltf, options) {
    var extensionName, disableExtension, extension;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.t0 = _regeneratorRuntime.keys(EXTENSIONS);

          case 1:
            if ((_context.t1 = _context.t0()).done) {
              _context.next = 10;
              break;
            }

            extensionName = _context.t1.value;
            disableExtension = extensionName in options && !options[extensionName];

            if (disableExtension) {
              _context.next = 8;
              break;
            }

            extension = EXTENSIONS[extensionName];
            _context.next = 8;
            return extension.decode(gltf, options);

          case 8:
            _context.next = 1;
            break;

          case 10:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _decodeExtensions.apply(this, arguments);
}

export function decodeExtensionsSync(gltf, options) {
  for (var extensionName in EXTENSIONS) {
    var disableExtension = extensionName in options && !options[extensionName];

    if (!disableExtension) {
      var extension = EXTENSIONS[extensionName];
      extension.decodeSync(gltf, options);
    }
  }
}
//# sourceMappingURL=extensions.js.map