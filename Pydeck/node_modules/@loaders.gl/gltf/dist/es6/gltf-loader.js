import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { parseGLTFSync, parseGLTF } from './lib/parse-gltf';
import GLTFParser from './lib/deprecated/gltf-parser';
const defaultOptions = {
  gltf: {
    parserVersion: 1
  },
  uri: ''
};
export default {
  name: 'glTF',
  extensions: ['gltf', 'glb'],
  mimeType: 'model/gltf+json',
  text: true,
  binary: true,
  test: 'glTF',
  parse,
  parseSync,
  defaultOptions
};
export async function parse(arrayBuffer, options = {}, context) {
  options = _objectSpread({}, defaultOptions, {}, options);

  if (options.gltf.parserVersion !== 2 && options.useGLTFParser !== false) {
    const gltfParser = new GLTFParser();
    return gltfParser.parse(arrayBuffer, options);
  }

  const {
    byteOffset = 0
  } = options;
  const gltf = {};
  return await parseGLTF(gltf, arrayBuffer, byteOffset, options, context);
}
export function parseSync(arrayBuffer, options = {}, context) {
  options = _objectSpread({}, defaultOptions, {}, options);

  if (options.gltf.parserVersion !== 2 && options.useGLTFParser !== false) {
    return new GLTFParser().parseSync(arrayBuffer, options);
  }

  const {
    byteOffset = 0
  } = options;
  const gltf = {};
  return parseGLTFSync(gltf, arrayBuffer, byteOffset, options, context);
}
//# sourceMappingURL=gltf-loader.js.map