{"version":3,"sources":["../../../../src/lib/deprecated/glb-parser.js"],"names":["assert","parseGLBSync","isGLB","ATTRIBUTE_TYPE_TO_COMPONENTS","ATTRIBUTE_COMPONENT_TYPE_TO_BYTE_SIZE","ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY","unpackBinaryJson","unpackGLTFBuffers","GLBParser","arrayBuffer","options","byteOffset","parse","parseSync","glbArrayBuffer","binaryByteOffset","packedJson","json","binChunkByteOffset","unpackedBuffers","getApplicationData","key","getJSON","getArrayBuffer","getBinaryByteOffset","getBufferView","glTFBufferView","Uint8Array","byteLength","getBuffer","glTFAccessor","ArrayType","componentType","components","type","bytesPerComponent","length","count","bufferViews","bufferView","getImageData","glTFImage","typedArray","mimeType","getImage","arrayBufferView","blob","Blob","urlCreator","self","URL","webkitURL","imageUrl","createObjectURL","img","Image","src","getImageAsync","Promise","resolve","onload"],"mappings":"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","sourcesContent":["/* eslint-disable camelcase, max-statements, no-restricted-globals */\nimport assert from '../utils/assert';\nimport parseGLBSync, {isGLB} from '../parse-glb';\nimport {\n  ATTRIBUTE_TYPE_TO_COMPONENTS,\n  ATTRIBUTE_COMPONENT_TYPE_TO_BYTE_SIZE,\n  ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY\n} from '../gltf-utils/gltf-utils';\nimport unpackBinaryJson from './packed-json/unpack-binary-json';\nimport unpackGLTFBuffers from './packed-json/unpack-gltf-buffers';\n\nexport default class GLBParser {\n  static isGLB(arrayBuffer, options = {}) {\n    const byteOffset = 0;\n    return isGLB(arrayBuffer, byteOffset);\n  }\n\n  // Return the gltf JSON and the original arrayBuffer\n  parse(arrayBuffer, options = {}) {\n    return this.parseSync(arrayBuffer, options);\n  }\n\n  parseSync(arrayBuffer, options = {}) {\n    this.glbArrayBuffer = arrayBuffer;\n\n    this.binaryByteOffset = null;\n    this.packedJson = null;\n    this.json = null;\n\n    // Only parse once\n    if (this.json === null && this.binaryByteOffset === null) {\n      const byteOffset = 0;\n\n      // Populates the supplied object (`this`) with parsed data members.\n      parseGLBSync(this, this.glbArrayBuffer, byteOffset, options);\n\n      // Backwards compat\n      this.binaryByteOffset = this.binChunkByteOffset;\n\n      // Unpack binary JSON\n      this.packedJson = this.json;\n\n      const unpackedBuffers = unpackGLTFBuffers(\n        this.glbArrayBuffer,\n        this.json,\n        this.binaryByteOffset\n      );\n      this.json = unpackBinaryJson(this.json, unpackedBuffers);\n\n      this.unpackedBuffers = unpackedBuffers;\n    }\n\n    return this;\n  }\n\n  // Returns application JSON data stored in `key`\n  getApplicationData(key) {\n    return this.json[key];\n  }\n\n  // Returns JSON envelope\n  getJSON() {\n    return this.json;\n  }\n\n  // Return binary chunk\n  getArrayBuffer() {\n    return this.glbArrayBuffer;\n  }\n\n  // Return index into binary chunk\n  getBinaryByteOffset() {\n    return this.binaryByteOffset;\n  }\n\n  // Unpacks a bufferview into a new Uint8Array that is a view into the binary chunk\n  getBufferView(glTFBufferView) {\n    const byteOffset = (glTFBufferView.byteOffset || 0) + this.binaryByteOffset;\n    return new Uint8Array(this.glbArrayBuffer, byteOffset, glTFBufferView.byteLength);\n  }\n\n  // Unpacks a glTF accessor into a new typed array that is a view into the binary chunk\n  getBuffer(glTFAccessor) {\n    // Decode the glTF accessor format\n    const ArrayType = ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY[glTFAccessor.componentType];\n    const components = ATTRIBUTE_TYPE_TO_COMPONENTS[glTFAccessor.type];\n    const bytesPerComponent = ATTRIBUTE_COMPONENT_TYPE_TO_BYTE_SIZE[glTFAccessor.componentType];\n    const length = glTFAccessor.count * components;\n    const byteLength = glTFAccessor.count * components * bytesPerComponent;\n\n    // Get the boundaries of the binary sub-chunk for this bufferView\n    const glTFBufferView = this.json.bufferViews[glTFAccessor.bufferView];\n    assert(byteLength >= 0 && glTFAccessor.byteOffset + byteLength <= glTFBufferView.byteLength);\n\n    const byteOffset = glTFBufferView.byteOffset + this.binaryByteOffset + glTFAccessor.byteOffset;\n    return new ArrayType(this.glbArrayBuffer, byteOffset, length);\n  }\n\n  // Unpacks an image into an HTML image\n  getImageData(glTFImage) {\n    return {\n      typedArray: this.getBufferView(glTFImage.bufferView),\n      mimeType: glTFImage.mimeType || 'image/jpeg'\n    };\n  }\n\n  getImage(glTFImage) {\n    /* global self, Blob, Image */\n    const arrayBufferView = this.getBufferView(glTFImage.bufferView);\n    const mimeType = glTFImage.mimeType || 'image/jpeg';\n    const blob = new Blob([arrayBufferView], {type: mimeType});\n    const urlCreator = self.URL || self.webkitURL;\n    const imageUrl = urlCreator.createObjectURL(blob);\n    const img = new Image();\n    img.src = imageUrl;\n    return img;\n  }\n\n  getImageAsync(glTFImage) {\n    /* global self, Blob, Image */\n    return new Promise(resolve => {\n      const arrayBufferView = this.getBufferView(glTFImage.bufferView);\n      const mimeType = glTFImage.mimeType || 'image/jpeg';\n      const blob = new Blob([arrayBufferView], {type: mimeType});\n      const urlCreator = self.URL || self.webkitURL;\n      const imageUrl = urlCreator.createObjectURL(blob);\n      const img = new Image();\n      img.onload = () => resolve(img);\n      img.src = imageUrl;\n    });\n  }\n}\n"],"file":"glb-parser.js"}