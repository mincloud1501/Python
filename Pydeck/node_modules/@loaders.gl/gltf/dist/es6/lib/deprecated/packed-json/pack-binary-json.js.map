{"version":3,"sources":["../../../../../src/lib/deprecated/packed-json/pack-binary-json.js"],"names":["flattenToTypedArray","packBinaryJson","json","glbBuilder","options","flattenArrays","object","indexOf","Array","isArray","typedArray","map","element","ArrayBuffer","isView","isImage","imageIndex","addImage","bufferIndex","addBuffer","newObject","key"],"mappings":"AAAA,SAAQA,mBAAR,QAAkC,0BAAlC;AAKA,eAAe,SAASC,cAAT,CAAwBC,IAAxB,EAA8BC,UAA9B,EAA0CC,OAAO,GAAG,EAApD,EAAwD;AACrE,QAAM;AAACC,IAAAA,aAAa,GAAG;AAAjB,MAA0BD,OAAhC;AACA,MAAIE,MAAM,GAAGJ,IAAb;;AAGA,MAAI,OAAOI,MAAP,KAAkB,QAAlB,IAA8BA,MAAM,CAACC,OAAP,CAAe,IAAf,MAAyB,CAA3D,EAA8D;AAC5D,sBAAWD,MAAX;AACD;;AAED,MAAIE,KAAK,CAACC,OAAN,CAAcH,MAAd,CAAJ,EAA2B;AAEzB,UAAMI,UAAU,GAAGL,aAAa,IAAIL,mBAAmB,CAACM,MAAD,CAAvD;;AACA,QAAII,UAAJ,EAAgB;AACdJ,MAAAA,MAAM,GAAGI,UAAT;AACD,KAFD,MAEO;AACL,aAAOJ,MAAM,CAACK,GAAP,CAAWC,OAAO,IAAIX,cAAc,CAACW,OAAD,EAAUT,UAAV,EAAsBC,OAAtB,CAApC,CAAP;AACD;AACF;;AAGD,MAAIS,WAAW,CAACC,MAAZ,CAAmBR,MAAnB,KAA8BH,UAAlC,EAA8C;AAC5C,QAAIA,UAAU,CAACY,OAAX,CAAmBT,MAAnB,CAAJ,EAAgC;AAC9B,YAAMU,UAAU,GAAGb,UAAU,CAACc,QAAX,CAAoBX,MAApB,CAAnB;AACA,gCAAmBU,UAAnB;AACD;;AAGD,UAAME,WAAW,GAAGf,UAAU,CAACgB,SAAX,CAAqBb,MAArB,CAApB;AACA,iCAAsBY,WAAtB;AACD;;AAED,MAAIZ,MAAM,KAAK,IAAX,IAAmB,OAAOA,MAAP,KAAkB,QAAzC,EAAmD;AACjD,UAAMc,SAAS,GAAG,EAAlB;;AACA,SAAK,MAAMC,GAAX,IAAkBf,MAAlB,EAA0B;AACxBc,MAAAA,SAAS,CAACC,GAAD,CAAT,GAAiBpB,cAAc,CAACK,MAAM,CAACe,GAAD,CAAP,EAAclB,UAAd,EAA0BC,OAA1B,CAA/B;AACD;;AACD,WAAOgB,SAAP;AACD;;AAED,SAAOd,MAAP;AACD","sourcesContent":["import {flattenToTypedArray} from './flatten-to-typed-array';\n\n// Recursively packs (replaces) binary objects\n// Replaces \"typed arrays\" with \"JSON pointers\" to binary chunks tracked by glbBuilder\n// eslint-disable-next-line complexity\nexport default function packBinaryJson(json, glbBuilder, options = {}) {\n  const {flattenArrays = false} = options;\n  let object = json;\n\n  // Check if string has same syntax as our \"JSON pointers\", if so \"escape it\".\n  if (typeof object === 'string' && object.indexOf('#/') === 0) {\n    return `#${object}`;\n  }\n\n  if (Array.isArray(object)) {\n    // TODO - handle numeric arrays, flatten them etc.\n    const typedArray = flattenArrays && flattenToTypedArray(object);\n    if (typedArray) {\n      object = typedArray;\n    } else {\n      return object.map(element => packBinaryJson(element, glbBuilder, options));\n    }\n  }\n\n  // Typed arrays, pack them as binary\n  if (ArrayBuffer.isView(object) && glbBuilder) {\n    if (glbBuilder.isImage(object)) {\n      const imageIndex = glbBuilder.addImage(object);\n      return `#/images/${imageIndex}`;\n    }\n\n    // if not an image, pack as accessor\n    const bufferIndex = glbBuilder.addBuffer(object);\n    return `#/accessors/${bufferIndex}`;\n  }\n\n  if (object !== null && typeof object === 'object') {\n    const newObject = {};\n    for (const key in object) {\n      newObject[key] = packBinaryJson(object[key], glbBuilder, options);\n    }\n    return newObject;\n  }\n\n  return object;\n}\n"],"file":"pack-binary-json.js"}