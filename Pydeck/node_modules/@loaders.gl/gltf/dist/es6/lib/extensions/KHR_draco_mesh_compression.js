import GLTFScenegraph from '../gltf-scenegraph';
import { KHR_DRACO_MESH_COMPRESSION } from '../gltf-constants';
import { getGLTFAccessors, getGLTFAccessor } from '../gltf-utils/gltf-attribute-utils';
import { parse } from '@loaders.gl/core';
export default class KHR_draco_mesh_compression {
  static get name() {
    return KHR_DRACO_MESH_COMPRESSION;
  }

  static async decode(gltfData, options = {}) {
    if (!options.decompress) {
      return;
    }

    const scenegraph = new GLTFScenegraph(gltfData);
    const promises = [];

    for (const primitive of meshPrimitiveIterator(scenegraph)) {
      if (scenegraph.getObjectExtension(primitive, KHR_DRACO_MESH_COMPRESSION)) {
        promises.push(decompressPrimitive(primitive, scenegraph, options));
      }
    }

    await Promise.all(promises);
    scenegraph.removeExtension(KHR_DRACO_MESH_COMPRESSION);
  }

  static decodeSync(gltfData, options) {
    if (!options.decompress) {
      return;
    }

    const scenegraph = new GLTFScenegraph(gltfData);

    if (scenegraph.getRequiredExtension(KHR_DRACO_MESH_COMPRESSION)) {
      throw new Error('Cannot synchronously decode Draco');
    }
  }

  static encode(gltfData, options = {}) {
    const scenegraph = new GLTFScenegraph(gltfData);

    for (const mesh of scenegraph.json.meshes || []) {
      compressMesh(mesh, options);
      scenegraph.addRequiredExtension(KHR_DRACO_MESH_COMPRESSION);
    }
  }

}

async function decompressPrimitive(primitive, scenegraph, options) {
  const compressedPrimitive = scenegraph.getObjectExtension(primitive, KHR_DRACO_MESH_COMPRESSION);
  const buffer = scenegraph.getTypedArrayForBufferView(compressedPrimitive.bufferView);
  const subArray = new Uint8Array(buffer.buffer).subarray(buffer.byteOffset);
  const bufferCopy = new Uint8Array(subArray);
  const decodedData = await parse(bufferCopy);
  primitive.attributes = getGLTFAccessors(decodedData.attributes);

  if (decodedData.indices) {
    primitive.indices = getGLTFAccessor(decodedData.indices);
  }

  checkPrimitive(primitive);
}

function compressMesh(attributes, indices, mode = 4, options = {}) {
  if (!options.DracoWriter || !options.DracoLoader) {
    throw new Error('DracoWriter/DracoLoader not available');
  }

  const compressedData = options.DracoWriter.encodeSync({
    attributes
  });
  const decodedData = options.DracoLoader.parseSync({
    attributes
  });

  const fauxAccessors = options._addFauxAttributes(decodedData.attributes);

  const bufferViewIndex = options.addBufferView(compressedData);
  const glTFMesh = {
    primitives: [{
      attributes: fauxAccessors,
      mode,
      extensions: {
        [KHR_DRACO_MESH_COMPRESSION]: {
          bufferView: bufferViewIndex,
          attributes: fauxAccessors
        }
      }
    }]
  };
  return glTFMesh;
}

function checkPrimitive(primitive) {
  if (!primitive.attributes && Object.keys(primitive.attributes).length > 0) {
    throw new Error('Empty glTF primitive detected: Draco decompression failure?');
  }
}

function* meshPrimitiveIterator(scenegraph) {
  for (const mesh of scenegraph.json.meshes || []) {
    for (const primitive of mesh.primitives) {
      yield primitive;
    }
  }
}
//# sourceMappingURL=KHR_draco_mesh_compression.js.map