{"version":3,"sources":["../../../../src/lib/extensions/KHR_draco_mesh_compression.js"],"names":["GLTFScenegraph","KHR_DRACO_MESH_COMPRESSION","getGLTFAccessors","getGLTFAccessor","parse","KHR_draco_mesh_compression","name","decode","gltfData","options","decompress","scenegraph","promises","primitive","meshPrimitiveIterator","getObjectExtension","push","decompressPrimitive","Promise","all","removeExtension","decodeSync","getRequiredExtension","Error","encode","mesh","json","meshes","compressMesh","addRequiredExtension","compressedPrimitive","buffer","getTypedArrayForBufferView","bufferView","subArray","Uint8Array","subarray","byteOffset","bufferCopy","decodedData","attributes","indices","checkPrimitive","mode","DracoWriter","DracoLoader","compressedData","encodeSync","parseSync","fauxAccessors","_addFauxAttributes","bufferViewIndex","addBufferView","glTFMesh","primitives","extensions","Object","keys","length"],"mappings":"AAIA,OAAOA,cAAP,MAA2B,oBAA3B;AACA,SAAQC,0BAAR,QAAyC,mBAAzC;AACA,SAAQC,gBAAR,EAA0BC,eAA1B,QAAgD,oCAAhD;AACA,SAAQC,KAAR,QAAoB,kBAApB;AAEA,eAAe,MAAMC,0BAAN,CAAiC;AAC9C,aAAWC,IAAX,GAAkB;AAChB,WAAOL,0BAAP;AACD;;AAGD,eAAaM,MAAb,CAAoBC,QAApB,EAA8BC,OAAO,GAAG,EAAxC,EAA4C;AAC1C,QAAI,CAACA,OAAO,CAACC,UAAb,EAAyB;AACvB;AACD;;AAED,UAAMC,UAAU,GAAG,IAAIX,cAAJ,CAAmBQ,QAAnB,CAAnB;AACA,UAAMI,QAAQ,GAAG,EAAjB;;AACA,SAAK,MAAMC,SAAX,IAAwBC,qBAAqB,CAACH,UAAD,CAA7C,EAA2D;AACzD,UAAIA,UAAU,CAACI,kBAAX,CAA8BF,SAA9B,EAAyCZ,0BAAzC,CAAJ,EAA0E;AACxEW,QAAAA,QAAQ,CAACI,IAAT,CAAcC,mBAAmB,CAACJ,SAAD,EAAYF,UAAZ,EAAwBF,OAAxB,CAAjC;AACD;AACF;;AAGD,UAAMS,OAAO,CAACC,GAAR,CAAYP,QAAZ,CAAN;AAGAD,IAAAA,UAAU,CAACS,eAAX,CAA2BnB,0BAA3B;AACD;;AAED,SAAOoB,UAAP,CAAkBb,QAAlB,EAA4BC,OAA5B,EAAqC;AACnC,QAAI,CAACA,OAAO,CAACC,UAAb,EAAyB;AACvB;AACD;;AACD,UAAMC,UAAU,GAAG,IAAIX,cAAJ,CAAmBQ,QAAnB,CAAnB;;AACA,QAAIG,UAAU,CAACW,oBAAX,CAAgCrB,0BAAhC,CAAJ,EAAiE;AAC/D,YAAM,IAAIsB,KAAJ,CAAU,mCAAV,CAAN;AACD;AAEF;;AAED,SAAOC,MAAP,CAAchB,QAAd,EAAwBC,OAAO,GAAG,EAAlC,EAAsC;AACpC,UAAME,UAAU,GAAG,IAAIX,cAAJ,CAAmBQ,QAAnB,CAAnB;;AAEA,SAAK,MAAMiB,IAAX,IAAmBd,UAAU,CAACe,IAAX,CAAgBC,MAAhB,IAA0B,EAA7C,EAAiD;AAE/CC,MAAAA,YAAY,CAACH,IAAD,EAAOhB,OAAP,CAAZ;AAEAE,MAAAA,UAAU,CAACkB,oBAAX,CAAgC5B,0BAAhC;AACD;AACF;;AA9C6C;;AAyDhD,eAAegB,mBAAf,CAAmCJ,SAAnC,EAA8CF,UAA9C,EAA0DF,OAA1D,EAAmE;AACjE,QAAMqB,mBAAmB,GAAGnB,UAAU,CAACI,kBAAX,CAA8BF,SAA9B,EAAyCZ,0BAAzC,CAA5B;AAGA,QAAM8B,MAAM,GAAGpB,UAAU,CAACqB,0BAAX,CAAsCF,mBAAmB,CAACG,UAA1D,CAAf;AAGA,QAAMC,QAAQ,GAAG,IAAIC,UAAJ,CAAeJ,MAAM,CAACA,MAAtB,EAA8BK,QAA9B,CAAuCL,MAAM,CAACM,UAA9C,CAAjB;AACA,QAAMC,UAAU,GAAG,IAAIH,UAAJ,CAAeD,QAAf,CAAnB;AAEA,QAAMK,WAAW,GAAG,MAAMnC,KAAK,CAACkC,UAAD,CAA/B;AAEAzB,EAAAA,SAAS,CAAC2B,UAAV,GAAuBtC,gBAAgB,CAACqC,WAAW,CAACC,UAAb,CAAvC;;AACA,MAAID,WAAW,CAACE,OAAhB,EAAyB;AACvB5B,IAAAA,SAAS,CAAC4B,OAAV,GAAoBtC,eAAe,CAACoC,WAAW,CAACE,OAAb,CAAnC;AACD;;AAKDC,EAAAA,cAAc,CAAC7B,SAAD,CAAd;AACD;;AAID,SAASe,YAAT,CAAsBY,UAAtB,EAAkCC,OAAlC,EAA2CE,IAAI,GAAG,CAAlD,EAAqDlC,OAAO,GAAG,EAA/D,EAAmE;AACjE,MAAI,CAACA,OAAO,CAACmC,WAAT,IAAwB,CAACnC,OAAO,CAACoC,WAArC,EAAkD;AAChD,UAAM,IAAItB,KAAJ,CAAU,uCAAV,CAAN;AACD;;AAGD,QAAMuB,cAAc,GAAGrC,OAAO,CAACmC,WAAR,CAAoBG,UAApB,CAA+B;AAACP,IAAAA;AAAD,GAA/B,CAAvB;AAOA,QAAMD,WAAW,GAAG9B,OAAO,CAACoC,WAAR,CAAoBG,SAApB,CAA8B;AAACR,IAAAA;AAAD,GAA9B,CAApB;;AACA,QAAMS,aAAa,GAAGxC,OAAO,CAACyC,kBAAR,CAA2BX,WAAW,CAACC,UAAvC,CAAtB;;AAEA,QAAMW,eAAe,GAAG1C,OAAO,CAAC2C,aAAR,CAAsBN,cAAtB,CAAxB;AAEA,QAAMO,QAAQ,GAAG;AACfC,IAAAA,UAAU,EAAE,CACV;AACEd,MAAAA,UAAU,EAAES,aADd;AAEEN,MAAAA,IAFF;AAGEY,MAAAA,UAAU,EAAE;AACV,SAACtD,0BAAD,GAA8B;AAC5BgC,UAAAA,UAAU,EAAEkB,eADgB;AAE5BX,UAAAA,UAAU,EAAES;AAFgB;AADpB;AAHd,KADU;AADG,GAAjB;AAeA,SAAOI,QAAP;AACD;;AAED,SAASX,cAAT,CAAwB7B,SAAxB,EAAmC;AACjC,MAAI,CAACA,SAAS,CAAC2B,UAAX,IAAyBgB,MAAM,CAACC,IAAP,CAAY5C,SAAS,CAAC2B,UAAtB,EAAkCkB,MAAlC,GAA2C,CAAxE,EAA2E;AACzE,UAAM,IAAInC,KAAJ,CAAU,6DAAV,CAAN;AACD;AACF;;AAED,UAAUT,qBAAV,CAAgCH,UAAhC,EAA4C;AAC1C,OAAK,MAAMc,IAAX,IAAmBd,UAAU,CAACe,IAAX,CAAgBC,MAAhB,IAA0B,EAA7C,EAAiD;AAC/C,SAAK,MAAMd,SAAX,IAAwBY,IAAI,CAAC6B,UAA7B,EAAyC;AACvC,YAAMzC,SAAN;AACD;AACF;AACF","sourcesContent":["// https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_draco_mesh_compression\n// Only TRIANGLES: 0x0004 and TRIANGLE_STRIP: 0x0005 are supported\n\n/* eslint-disable camelcase */\nimport GLTFScenegraph from '../gltf-scenegraph';\nimport {KHR_DRACO_MESH_COMPRESSION} from '../gltf-constants';\nimport {getGLTFAccessors, getGLTFAccessor} from '../gltf-utils/gltf-attribute-utils';\nimport {parse} from '@loaders.gl/core';\n\nexport default class KHR_draco_mesh_compression {\n  static get name() {\n    return KHR_DRACO_MESH_COMPRESSION;\n  }\n\n  // Note: We have a \"soft dependency\" on Draco to avoid bundling it when not needed\n  static async decode(gltfData, options = {}) {\n    if (!options.decompress) {\n      return;\n    }\n\n    const scenegraph = new GLTFScenegraph(gltfData);\n    const promises = [];\n    for (const primitive of meshPrimitiveIterator(scenegraph)) {\n      if (scenegraph.getObjectExtension(primitive, KHR_DRACO_MESH_COMPRESSION)) {\n        promises.push(decompressPrimitive(primitive, scenegraph, options));\n      }\n    }\n\n    // Decompress meshes in parallel\n    await Promise.all(promises);\n\n    // We have now decompressed all primitives, so remove the top-level extensions\n    scenegraph.removeExtension(KHR_DRACO_MESH_COMPRESSION);\n  }\n\n  static decodeSync(gltfData, options) {\n    if (!options.decompress) {\n      return;\n    }\n    const scenegraph = new GLTFScenegraph(gltfData);\n    if (scenegraph.getRequiredExtension(KHR_DRACO_MESH_COMPRESSION)) {\n      throw new Error('Cannot synchronously decode Draco');\n    }\n    // TODO - we can support sync decoding, let's just keep code/bundle size in check...\n  }\n\n  static encode(gltfData, options = {}) {\n    const scenegraph = new GLTFScenegraph(gltfData);\n\n    for (const mesh of scenegraph.json.meshes || []) {\n      // eslint-disable-next-line camelcase\n      compressMesh(mesh, options);\n      // NOTE: Only add the extension if something was actually compressed\n      scenegraph.addRequiredExtension(KHR_DRACO_MESH_COMPRESSION);\n    }\n  }\n}\n\n// PRIVATE\n\n// Unpacks one mesh primitive and removes the extension from the primitive\n// DracoDecoder needs to be imported and registered by app\n// Returns: Promise that resolves when all pending draco decoder jobs for this mesh complete\n\n// TODO - Implement fallback behavior per KHR_DRACO_MESH_COMPRESSION spec\n\nasync function decompressPrimitive(primitive, scenegraph, options) {\n  const compressedPrimitive = scenegraph.getObjectExtension(primitive, KHR_DRACO_MESH_COMPRESSION);\n\n  // eslint-disable-next-line\n  const buffer = scenegraph.getTypedArrayForBufferView(compressedPrimitive.bufferView);\n\n  // TODO - parse does not yet deal well with byte offsets embedded in typed arrays. Copy buffer\n  const subArray = new Uint8Array(buffer.buffer).subarray(buffer.byteOffset); // , buffer.byteLength);\n  const bufferCopy = new Uint8Array(subArray);\n\n  const decodedData = await parse(bufferCopy);\n\n  primitive.attributes = getGLTFAccessors(decodedData.attributes);\n  if (decodedData.indices) {\n    primitive.indices = getGLTFAccessor(decodedData.indices);\n  }\n\n  // Extension has been processed, delete it\n  // delete primitive.extensions[KHR_DRACO_MESH_COMPRESSION];\n\n  checkPrimitive(primitive);\n}\n\n// eslint-disable-next-line max-len\n// Only TRIANGLES: 0x0004 and TRIANGLE_STRIP: 0x0005 are supported\nfunction compressMesh(attributes, indices, mode = 4, options = {}) {\n  if (!options.DracoWriter || !options.DracoLoader) {\n    throw new Error('DracoWriter/DracoLoader not available');\n  }\n\n  // TODO - use registered DracoWriter...\n  const compressedData = options.DracoWriter.encodeSync({attributes});\n\n  // Draco compression may change the order and number of vertices in a mesh.\n  // To satisfy the requirement that accessors properties be correct for both\n  // compressed and uncompressed data, generators should create uncompressed\n  // attributes and indices using data that has been decompressed from the Draco buffer,\n  // rather than the original source data.\n  const decodedData = options.DracoLoader.parseSync({attributes});\n  const fauxAccessors = options._addFauxAttributes(decodedData.attributes);\n\n  const bufferViewIndex = options.addBufferView(compressedData);\n\n  const glTFMesh = {\n    primitives: [\n      {\n        attributes: fauxAccessors, // TODO - verify with spec\n        mode, // GL.POINTS\n        extensions: {\n          [KHR_DRACO_MESH_COMPRESSION]: {\n            bufferView: bufferViewIndex,\n            attributes: fauxAccessors // TODO - verify with spec\n          }\n        }\n      }\n    ]\n  };\n\n  return glTFMesh;\n}\n\nfunction checkPrimitive(primitive) {\n  if (!primitive.attributes && Object.keys(primitive.attributes).length > 0) {\n    throw new Error('Empty glTF primitive detected: Draco decompression failure?');\n  }\n}\n\nfunction* meshPrimitiveIterator(scenegraph) {\n  for (const mesh of scenegraph.json.meshes || []) {\n    for (const primitive of mesh.primitives) {\n      yield primitive;\n    }\n  }\n}\n"],"file":"KHR_draco_mesh_compression.js"}