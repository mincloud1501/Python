import GLTFScenegraph from '../gltf-scenegraph';
import { KHR_LIGHTS_PUNCTUAL } from '../gltf-constants';
import assert from '../utils/assert';
export default class KHR_lights_punctual {
  static get name() {
    return KHR_LIGHTS_PUNCTUAL;
  }

  static decode(gltfData, options) {
    const gltfScenegraph = new GLTFScenegraph(gltfData);
    const extension = gltfScenegraph.getExtension(KHR_LIGHTS_PUNCTUAL);

    if (extension) {
      gltfScenegraph.json.lights = extension.lights;
      gltfScenegraph.removeExtension(KHR_LIGHTS_PUNCTUAL);
    }

    for (const node of gltfScenegraph.nodes || []) {
      const nodeExtension = node.extensions && node.extensions.KHR_lights_punctual;

      if (nodeExtension) {
        node.light = gltfScenegraph._get('lights', nodeExtension.light);
        delete node.extensions.KHR_lights_punctual;
      }
    }
  }

  static encode(gltfData, options) {
    const gltfScenegraph = new GLTFScenegraph(gltfData);
    const {
      json
    } = gltfScenegraph;

    if (json.lights) {
      const extension = gltfScenegraph.addExtensions(KHR_LIGHTS_PUNCTUAL);
      assert(!extension.lights);
      extension.lights = json.lights;
      delete json.lights;
    }

    if (gltfScenegraph.json.lights) {
      for (const light of gltfScenegraph.json.lights) {
        const node = light.node;
        gltfScenegraph.addObjectExtension(node, KHR_LIGHTS_PUNCTUAL, light);
      }

      delete gltfScenegraph.json.lights;
    }
  }

}
//# sourceMappingURL=KHR_lights_punctual.js.map