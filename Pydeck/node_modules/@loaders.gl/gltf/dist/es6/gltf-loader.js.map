{"version":3,"sources":["../../src/gltf-loader.js"],"names":["parseGLTFSync","parseGLTF","GLTFParser","defaultOptions","gltf","parserVersion","uri","name","extensions","mimeType","text","binary","test","parse","parseSync","arrayBuffer","options","context","useGLTFParser","gltfParser","byteOffset"],"mappings":";;;;;;AAEA,SAAQA,aAAR,EAAuBC,SAAvB,QAAuC,kBAAvC;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AAEA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,aAAa,EAAE;AADX,GADe;AAIrBC,EAAAA,GAAG,EAAE;AAJgB,CAAvB;AAOA,eAAe;AACbC,EAAAA,IAAI,EAAE,MADO;AAEbC,EAAAA,UAAU,EAAE,CAAC,MAAD,EAAS,KAAT,CAFC;AAIbC,EAAAA,QAAQ,EAAE,iBAJG;AAKbC,EAAAA,IAAI,EAAE,IALO;AAMbC,EAAAA,MAAM,EAAE,IANK;AAObC,EAAAA,IAAI,EAAE,MAPO;AAQbC,EAAAA,KARa;AASbC,EAAAA,SATa;AAUbX,EAAAA;AAVa,CAAf;AAaA,OAAO,eAAeU,KAAf,CAAqBE,WAArB,EAAkCC,OAAO,GAAG,EAA5C,EAAgDC,OAAhD,EAAyD;AAE9DD,EAAAA,OAAO,qBAAOb,cAAP,MAA0Ba,OAA1B,CAAP;;AAGA,MAAIA,OAAO,CAACZ,IAAR,CAAaC,aAAb,KAA+B,CAA/B,IAAoCW,OAAO,CAACE,aAAR,KAA0B,KAAlE,EAAyE;AACvE,UAAMC,UAAU,GAAG,IAAIjB,UAAJ,EAAnB;AACA,WAAOiB,UAAU,CAACN,KAAX,CAAiBE,WAAjB,EAA8BC,OAA9B,CAAP;AACD;;AAED,QAAM;AAACI,IAAAA,UAAU,GAAG;AAAd,MAAmBJ,OAAzB;AACA,QAAMZ,IAAI,GAAG,EAAb;AACA,SAAO,MAAMH,SAAS,CAACG,IAAD,EAAOW,WAAP,EAAoBK,UAApB,EAAgCJ,OAAhC,EAAyCC,OAAzC,CAAtB;AACD;AAED,OAAO,SAASH,SAAT,CAAmBC,WAAnB,EAAgCC,OAAO,GAAG,EAA1C,EAA8CC,OAA9C,EAAuD;AAE5DD,EAAAA,OAAO,qBAAOb,cAAP,MAA0Ba,OAA1B,CAAP;;AAGA,MAAIA,OAAO,CAACZ,IAAR,CAAaC,aAAb,KAA+B,CAA/B,IAAoCW,OAAO,CAACE,aAAR,KAA0B,KAAlE,EAAyE;AACvE,WAAO,IAAIhB,UAAJ,GAAiBY,SAAjB,CAA2BC,WAA3B,EAAwCC,OAAxC,CAAP;AACD;;AAGD,QAAM;AAACI,IAAAA,UAAU,GAAG;AAAd,MAAmBJ,OAAzB;AACA,QAAMZ,IAAI,GAAG,EAAb;AACA,SAAOJ,aAAa,CAACI,IAAD,EAAOW,WAAP,EAAoBK,UAApB,EAAgCJ,OAAhC,EAAyCC,OAAzC,CAApB;AACD","sourcesContent":["// Binary container format for glTF\n\nimport {parseGLTFSync, parseGLTF} from './lib/parse-gltf';\nimport GLTFParser from './lib/deprecated/gltf-parser';\n\nconst defaultOptions = {\n  gltf: {\n    parserVersion: 1 // the new parser that will be the only option in V2.\n  },\n  uri: '' // base URI\n};\n\nexport default {\n  name: 'glTF',\n  extensions: ['gltf', 'glb'],\n  // mimeType: 'model/gltf-binary',\n  mimeType: 'model/gltf+json',\n  text: true,\n  binary: true,\n  test: 'glTF',\n  parse,\n  parseSync, // Less features when parsing synchronously\n  defaultOptions\n};\n\nexport async function parse(arrayBuffer, options = {}, context) {\n  // Apps like to call the parse method directly so apply default options here\n  options = {...defaultOptions, ...options};\n\n  // Deprecated v1 Parser: Returns `GLTFParser` instance, instead of \"pure\" js object\n  if (options.gltf.parserVersion !== 2 && options.useGLTFParser !== false) {\n    const gltfParser = new GLTFParser();\n    return gltfParser.parse(arrayBuffer, options);\n  }\n\n  const {byteOffset = 0} = options;\n  const gltf = {};\n  return await parseGLTF(gltf, arrayBuffer, byteOffset, options, context);\n}\n\nexport function parseSync(arrayBuffer, options = {}, context) {\n  // Apps like to call the parse method directly so apply default options here\n  options = {...defaultOptions, ...options};\n\n  // Deprecated: Return GLTFParser instance\n  if (options.gltf.parserVersion !== 2 && options.useGLTFParser !== false) {\n    return new GLTFParser().parseSync(arrayBuffer, options);\n  }\n\n  // Return pure javascript object\n  const {byteOffset = 0} = options;\n  const gltf = {};\n  return parseGLTFSync(gltf, arrayBuffer, byteOffset, options, context);\n}\n"],"file":"gltf-loader.js"}