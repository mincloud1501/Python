{"version":3,"sources":["../../../../src/lib/deprecated/gltf-parser.js"],"names":["DEFAULT_OPTIONS","fetchLinkedResources","fetch","fetchFile","decompress","DracoLoader","postProcess","createImages","log","console","GLTFParser","gltf","options","Object","assign","parseSync","_loadLinkedAssets","_decompressMeshes","postProcessor","GLTFPostProcessorOld","glbParser","ArrayBuffer","GLBParser","isGLB","textDecoder","TextDecoder","decode","JSON","parse","json","key","data","extras","extensionName","isExtension","getUsedExtensions","find","name","extensions","isRequired","getRequiredExtensions","getExtension","extensionsRequired","extensionsUsed","index","_get","array","object","warn","Promise","all","buffers","map","buffer","_loadBuffer","uri","window","response","arrayBuffer","meshes","mesh","primitives","primitive","_decompressKhronosDracoPrimitive","_decompressUberDracoPrimitive","attributes","keys","length","Error","_removeExtension","KHR_DRACO_MESH_COMPRESSION","UBER_POINT_CLOUD_EXTENSION","compressedMesh","_getBufferViewArray","bufferView","decodedData","indices","mode","bufferViewIndex","bufferViews","getBufferView","byteOffset","Uint8Array","byteLength","_removeStringFromArray","string","found","indexOf","splice"],"mappings":"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","sourcesContent":["import {TextDecoder, fetchFile} from '@loaders.gl/core';\nimport {getFullUri} from '../gltf-utils/gltf-utils';\nimport {getGLTFAccessors, getGLTFAccessor} from '../gltf-utils/gltf-attribute-utils';\nimport {KHR_DRACO_MESH_COMPRESSION, UBER_POINT_CLOUD_EXTENSION} from '../gltf-constants';\nimport GLBParser from './glb-parser';\nimport GLTFPostProcessorOld from './gltf-post-processor-old';\n\nconst DEFAULT_OPTIONS = {\n  fetchLinkedResources: true, // Fetch any linked .BIN buffers, decode base64\n  fetch: fetchFile,\n  decompress: false, // Decompress Draco compressed meshes (if DracoLoader available)\n  DracoLoader: null,\n  postProcess: true,\n  createImages: false, // Create image objects\n  log: console // eslint-disable-line\n};\n\nexport default class GLTFParser {\n  async parse(gltf, options = {}) {\n    options = Object.assign({}, DEFAULT_OPTIONS, options);\n\n    // Postpone decompressing/postprocessing to make sure we load any linked files first\n    // TODO - is this really needed?\n    this.parseSync(gltf, {...options, postProcess: false, decompress: false});\n\n    // Load linked buffers asynchronously and decodes base64 buffers in parallel\n    if (options.fetchLinkedResources) {\n      await this._loadLinkedAssets(options);\n    }\n\n    if (options.decompress) {\n      this._decompressMeshes(options);\n    }\n\n    if (options.postProcess) {\n      const postProcessor = new GLTFPostProcessorOld();\n      postProcessor.postProcess(this.gltf, this.glbParser, options);\n    }\n\n    return this.gltf;\n  }\n\n  // NOTE: The sync parser cannot handle linked assets or base64 encoded resources\n  // gtlf - input can be arrayBuffer (GLB or UTF8 encoded JSON), string (JSON), or parsed JSON.\n  parseSync(gltf, options = {}) {\n    options = Object.assign({}, DEFAULT_OPTIONS, options);\n\n    // If binary is not starting with magic bytes, convert to string\n    if (gltf instanceof ArrayBuffer && !GLBParser.isGLB(gltf, options)) {\n      const textDecoder = new TextDecoder();\n      gltf = textDecoder.decode(gltf);\n    }\n\n    // If string, try to parse as JSON\n    if (typeof gltf === 'string') {\n      gltf = JSON.parse(gltf);\n    }\n\n    if (gltf instanceof ArrayBuffer) {\n      // Extract JSON from the GLB container\n      this.glbParser = new GLBParser();\n      this.gltf = this.glbParser.parseSync(gltf).json;\n      this.json = this.gltf;\n    } else {\n      this.glbParser = null;\n      this.gltf = gltf;\n      this.json = gltf;\n    }\n\n    // TODO: we could handle base64 encoded files in the non-async path\n    // await this._loadBuffersSync(options);\n\n    // TODO: we could synchronously decode base64 encoded URIs in the non-async path\n    // await this._loadLinkedAssetsSync(options);\n\n    if (options.decompress) {\n      this._decompressMeshes(options);\n    }\n\n    if (options.postProcess) {\n      const postProcessor = new GLTFPostProcessorOld();\n      postProcessor.postProcess(this.gltf, this.glbParser, options);\n    }\n\n    return this.gltf;\n  }\n\n  // Accessors\n\n  getApplicationData(key) {\n    // TODO - Data is already unpacked by GLBParser\n    const data = this.json[key];\n    return data;\n  }\n\n  getExtraData(key) {\n    // TODO - Data is already unpacked by GLBParser\n    const extras = this.json.extras || {};\n    return extras[key];\n  }\n\n  getExtension(extensionName) {\n    const isExtension = this.getUsedExtensions().find(name => name === extensionName);\n    const extensions = this.json.extensions || {};\n    return isExtension ? extensions[extensionName] || true : null;\n  }\n\n  getRequiredExtension(extensionName) {\n    const isRequired = this.getRequiredExtensions().find(name => name === extensionName);\n    return isRequired ? this.getExtension(extensionName) : null;\n  }\n\n  getRequiredExtensions() {\n    return this.json.extensionsRequired || [];\n  }\n\n  getUsedExtensions() {\n    return this.json.extensionsUsed || [];\n  }\n\n  getScene(index) {\n    return this._get('scenes', index);\n  }\n\n  getNode(index) {\n    return this._get('nodes', index);\n  }\n\n  getSkin(index) {\n    return this._get('skins', index);\n  }\n\n  getMesh(index) {\n    return this._get('meshes', index);\n  }\n\n  getMaterial(index) {\n    return this._get('materials', index);\n  }\n\n  getAccessor(index) {\n    return this._get('accessors', index);\n  }\n\n  getCamera(index) {\n    return null; // TODO: fix this\n  }\n\n  getTexture(index) {\n    return this._get('textures', index);\n  }\n\n  getSampler(index) {\n    return this._get('samplers', index);\n  }\n\n  getImage(index) {\n    return this._get('images', index);\n  }\n\n  getBufferView(index) {\n    return this._get('bufferViews', index);\n  }\n\n  getBuffer(index) {\n    return this._get('buffers', index);\n  }\n\n  // PARSING HELPERS\n\n  _get(array, index) {\n    // check if already resolved\n    if (typeof index === 'object') {\n      return index;\n    }\n    const object = this.gltf[array] && this.gltf[array][index];\n    if (!object) {\n      console.warn(`glTF file error: Could not find ${array}[${index}]`); // eslint-disable-line\n    }\n    return object;\n  }\n\n  // PARSING HELPERS\n\n  // Load linked assets\n  async _loadLinkedAssets(options) {\n    return await Promise.all(this.gltf.buffers.map(buffer => this._loadBuffer(buffer, options)));\n  }\n\n  async _loadBuffer(buffer, options) {\n    // NOTE: options.uri is not correctly passed, however this class is deprecated...\n    if (buffer.uri && options.uri) {\n      const fetch = options.fetch || window.fetch;\n      const uri = getFullUri(buffer.uri, options.uri);\n      const response = await fetch(uri);\n      const arrayBuffer = await response.arrayBuffer();\n      buffer.data = arrayBuffer;\n      buffer.uri = null;\n    }\n  }\n\n  // POST PROCESSING\n\n  _decompressMeshes(options) {\n    // We have a \"soft dependency\" on Draco to avoid bundling it when not needed\n    // DracoEncoder needs to be imported and supplied by app\n    if (!options.DracoLoader || !options.decompress) {\n      return;\n    }\n\n    for (const mesh of this.gltf.meshes || []) {\n      // Decompress all the primitives in a mesh\n      for (const primitive of mesh.primitives) {\n        this._decompressKhronosDracoPrimitive(primitive, options);\n        this._decompressUberDracoPrimitive(primitive, options);\n        if (!primitive.attributes || Object.keys(primitive.attributes).length === 0) {\n          throw new Error('Empty glTF primitive: decompression failure?');\n        }\n      }\n    }\n\n    // We have now decompressed all primitives, we can remove the top-level extensions\n    this._removeExtension(KHR_DRACO_MESH_COMPRESSION);\n    this._removeExtension(UBER_POINT_CLOUD_EXTENSION);\n  }\n\n  // Unpacks one mesh primitive and removes the extension from the primitive\n  // TODO - Implement fallback behavior per KHR_DRACO_MESH_COMPRESSION spec\n  // TODO - Decompression could be threaded: Use DracoWorkerLoader?\n  //\n  // eslint-disable-next-line max-len\n  // https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_draco_mesh_compression\n  _decompressKhronosDracoPrimitive(primitive, options) {\n    const compressedMesh = primitive.extensions && primitive.extensions[KHR_DRACO_MESH_COMPRESSION];\n    if (!compressedMesh) {\n      return;\n    }\n\n    // Extension will be processed, delete it\n    delete primitive.extensions[KHR_DRACO_MESH_COMPRESSION];\n\n    const buffer = this._getBufferViewArray(compressedMesh.bufferView);\n    const decodedData = options.DracoLoader.parseSync(buffer);\n    primitive.attributes = getGLTFAccessors(decodedData.attributes);\n    if (decodedData.indices) {\n      primitive.indices = getGLTFAccessor(decodedData.indices);\n    }\n  }\n\n  // Unpacks one mesh primitive and removes the extension from the primitive\n  _decompressUberDracoPrimitive(primitive, options) {\n    const compressedMesh = primitive.extensions && primitive.extensions[UBER_POINT_CLOUD_EXTENSION];\n    if (!compressedMesh) {\n      return;\n    }\n\n    if (primitive.mode !== 0) {\n      throw new Error(UBER_POINT_CLOUD_EXTENSION);\n    }\n\n    // Extension will be processed, delete it\n    delete primitive.extensions[UBER_POINT_CLOUD_EXTENSION];\n\n    const buffer = this._getBufferViewArray(compressedMesh.bufferView);\n    const decodedData = options.DracoLoader.parseSync(buffer);\n    primitive.attributes = decodedData.attributes;\n  }\n\n  _getBufferViewArray(bufferViewIndex) {\n    const bufferView = this.gltf.bufferViews[bufferViewIndex];\n    if (this.glbParser) {\n      return this.glbParser.getBufferView(bufferView);\n    }\n\n    const buffer = this.gltf.buffers[bufferView.buffer].data;\n    const byteOffset = bufferView.byteOffset || 0;\n    return new Uint8Array(buffer, byteOffset, bufferView.byteLength);\n  }\n\n  // Removes an extension from the top-level list\n  _removeExtension(extensionName) {\n    if (this.json.extensionsRequired) {\n      this._removeStringFromArray(this.json.extensionsRequired, extensionName);\n    }\n    if (this.json.extensionsUsed) {\n      this._removeStringFromArray(this.json.extensionsUsed, extensionName);\n    }\n    if (this.json.extensions) {\n      delete this.json.extensions[extensionName];\n    }\n  }\n\n  _removeStringFromArray(array, string) {\n    let found = true;\n    while (found) {\n      const index = array.indexOf(string);\n      if (index > -1) {\n        array.splice(index, 1);\n      } else {\n        found = false;\n      }\n    }\n  }\n}\n"],"file":"gltf-parser.js"}