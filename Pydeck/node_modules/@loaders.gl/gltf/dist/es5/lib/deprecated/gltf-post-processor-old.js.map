{"version":3,"sources":["../../../../src/lib/deprecated/gltf-post-processor-old.js"],"names":["COMPONENTS","SCALAR","VEC2","VEC3","VEC4","MAT2","MAT3","MAT4","BYTES","GL_SAMPLER","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","REPEAT","LINEAR","NEAREST_MIPMAP_LINEAR","SAMPLER_PARAMETER_GLTF_TO_GL","magFilter","minFilter","wrapS","wrapT","DEFAULT_SAMPLER","TEXTURE_WRAP_","getBytesFromComponentType","componentType","getSizeFromAccessorType","type","GLTFPostProcessorOld","gltf","glbParser","options","_resolveToTree","bufferViews","forEach","bufView","i","_resolveBufferView","images","image","_resolveImage","samplers","sampler","_resolveSampler","textures","texture","_resolveTexture","accessors","accessor","_resolveAccessor","materials","material","_resolveMaterial","meshes","mesh","_resolveMesh","nodes","node","_resolveNode","skins","skin","_resolveSkin","scenes","scene","_resolveScene","undefined","_process_extension_KHR_lights_punctual","index","_get","array","object","console","warn","id","map","getNode","children","child","getMesh","camera","getCamera","getSkin","inverseBindMatrices","getAccessor","primitives","primitive","attribute","attributes","indices","getMaterial","normalTexture","getTexture","occlusionTexture","emissiveTexture","pbrMetallicRoughness","mr","baseColorTexture","metallicRoughnessTexture","bufferView","getBufferView","bytesPerComponent","components","bytesPerElement","getSampler","source","getImage","parameters","key","glEnum","_enumSamplerParameter","createImages","getImageAsync","uri","Promise","resolve","img","Image","crossOrigin","onload","src","buffer","getBuffer","data","byteOffset","Uint8Array","byteLength","perspective","orthographic","extension","extensions","KHR_lights_punctual","lights","_removeExtension","nodeExtension","light","extensionName","extensionsRequired","_removeStringFromArray","extensionsUsed","string","found","indexOf","splice"],"mappings":"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","sourcesContent":["import {getFullUri} from '../gltf-utils/gltf-utils';\n\n// This is a post processor for loaded glTF files\n// The goal is to make the loaded data easier to use in WebGL applications\n//\n// Functions:\n// * Resolve indexed arrays structure of glTF into a linked tree.\n// * Translate stringified enum keys and values into WebGL constants.\n// * Load images (optional)\n\n// ENUM LOOKUP\n\nconst COMPONENTS = {\n  SCALAR: 1,\n  VEC2: 2,\n  VEC3: 3,\n  VEC4: 4,\n  MAT2: 4,\n  MAT3: 9,\n  MAT4: 16\n};\n\nconst BYTES = {\n  5120: 1, // BYTE\n  5121: 1, // UNSIGNED_BYTE\n  5122: 2, // SHORT\n  5123: 2, // UNSIGNED_SHORT\n  5125: 4, // UNSIGNED_INT\n  5126: 4 // FLOAT\n};\n\nconst GL_SAMPLER = {\n  // Sampler parameters\n  TEXTURE_MAG_FILTER: 0x2800,\n  TEXTURE_MIN_FILTER: 0x2801,\n  TEXTURE_WRAP_S: 0x2802,\n  TEXTURE_WRAP_T: 0x2803,\n\n  // Sampler default values\n  REPEAT: 0x2901,\n  LINEAR: 0x2601,\n  NEAREST_MIPMAP_LINEAR: 0x2702\n};\n\nconst SAMPLER_PARAMETER_GLTF_TO_GL = {\n  magFilter: GL_SAMPLER.TEXTURE_MAG_FILTER,\n  minFilter: GL_SAMPLER.TEXTURE_MIN_FILTER,\n  wrapS: GL_SAMPLER.TEXTURE_WRAP_S,\n  wrapT: GL_SAMPLER.TEXTURE_WRAP_T\n};\n\n// When undefined, a sampler with repeat wrapping and auto filtering should be used.\n// https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#texture\nconst DEFAULT_SAMPLER = {\n  [GL_SAMPLER.TEXTURE_MAG_FILTER]: GL_SAMPLER.LINEAR,\n  [GL_SAMPLER.TEXTURE_MIN_FILTER]: GL_SAMPLER.NEAREST_MIPMAP_LINEAR,\n  [GL_SAMPLER.TEXTURE_WRAP_S]: GL_SAMPLER.REPEAT,\n  [GL_SAMPLER.TEXTURE_WRAP_]: GL_SAMPLER.REPEAT\n};\n\nfunction getBytesFromComponentType(componentType) {\n  return BYTES[componentType];\n}\n\nfunction getSizeFromAccessorType(type) {\n  return COMPONENTS[type];\n}\n\nexport default class GLTFPostProcessorOld {\n  postProcess(gltf, glbParser, options = {}) {\n    this.gltf = gltf;\n    this.glbParser = glbParser;\n\n    this._resolveToTree(options);\n    return this.gltf;\n  }\n\n  // Convert indexed glTF structure into tree structure\n  // PREPARATION STEP: CROSS-LINK INDEX RESOLUTION, ENUM LOOKUP, CONVENIENCE CALCULATIONS\n  /* eslint-disable complexity */\n  _resolveToTree(options = {}) {\n    const {gltf} = this;\n\n    (gltf.bufferViews || []).forEach((bufView, i) => this._resolveBufferView(bufView, i));\n\n    (gltf.images || []).forEach((image, i) => this._resolveImage(image, i, options));\n    (gltf.samplers || []).forEach((sampler, i) => this._resolveSampler(sampler, i));\n    (gltf.textures || []).forEach((texture, i) => this._resolveTexture(texture, i));\n\n    (gltf.accessors || []).forEach((accessor, i) => this._resolveAccessor(accessor, i));\n    (gltf.materials || []).forEach((material, i) => this._resolveMaterial(material, i));\n    (gltf.meshes || []).forEach((mesh, i) => this._resolveMesh(mesh, i));\n\n    (gltf.nodes || []).forEach((node, i) => this._resolveNode(node, i));\n\n    (gltf.skins || []).forEach((skin, i) => this._resolveSkin(skin, i));\n\n    (gltf.scenes || []).forEach((scene, i) => this._resolveScene(scene, i));\n\n    if (gltf.scene !== undefined) {\n      gltf.scene = gltf.scenes[this.gltf.scene];\n    }\n\n    // EXTENSIONS\n    this._process_extension_KHR_lights_punctual();\n\n    return gltf;\n  }\n  /* eslint-enable complexity */\n\n  getScene(index) {\n    return this._get('scenes', index);\n  }\n\n  getNode(index) {\n    return this._get('nodes', index);\n  }\n\n  getSkin(index) {\n    return this._get('skins', index);\n  }\n\n  getMesh(index) {\n    return this._get('meshes', index);\n  }\n\n  getMaterial(index) {\n    return this._get('materials', index);\n  }\n\n  getAccessor(index) {\n    return this._get('accessors', index);\n  }\n\n  getCamera(index) {\n    return null; // TODO: fix this\n  }\n\n  getTexture(index) {\n    return this._get('textures', index);\n  }\n\n  getSampler(index) {\n    return this._get('samplers', index);\n  }\n\n  getImage(index) {\n    return this._get('images', index);\n  }\n\n  getBufferView(index) {\n    return this._get('bufferViews', index);\n  }\n\n  getBuffer(index) {\n    return this._get('buffers', index);\n  }\n\n  _get(array, index) {\n    // check if already resolved\n    if (typeof index === 'object') {\n      return index;\n    }\n    const object = this.gltf[array] && this.gltf[array][index];\n    if (!object) {\n      console.warn(`glTF file error: Could not find ${array}[${index}]`); // eslint-disable-line\n    }\n    return object;\n  }\n\n  // PARSING HELPERS\n\n  _resolveScene(scene, index) {\n    scene.id = `scene-${index}`;\n    scene.nodes = (scene.nodes || []).map(node => this.getNode(node));\n  }\n\n  _resolveNode(node, index) {\n    node.id = `node-${index}`;\n    node.children = (node.children || []).map(child => this.getNode(child));\n    if (node.mesh !== undefined) {\n      node.mesh = this.getMesh(node.mesh);\n    }\n    if (node.camera !== undefined) {\n      node.camera = this.getCamera(node.camera);\n    }\n    if (node.skin !== undefined) {\n      node.skin = this.getSkin(node.skin);\n    }\n  }\n\n  _resolveSkin(skin, index) {\n    skin.id = `skin-${index}`;\n    skin.inverseBindMatrices = this.getAccessor(skin.inverseBindMatrices);\n  }\n\n  _resolveMesh(mesh, index) {\n    mesh.id = `mesh-${index}`;\n    for (const primitive of mesh.primitives) {\n      for (const attribute in primitive.attributes) {\n        primitive.attributes[attribute] = this.getAccessor(primitive.attributes[attribute]);\n      }\n      if (primitive.indices !== undefined) {\n        primitive.indices = this.getAccessor(primitive.indices);\n      }\n      if (primitive.material !== undefined) {\n        primitive.material = this.getMaterial(primitive.material);\n      }\n    }\n  }\n\n  _resolveMaterial(material, index) {\n    material.id = `material-${index}`;\n    if (material.normalTexture) {\n      material.normalTexture.texture = this.getTexture(material.normalTexture.index);\n    }\n    if (material.occlusionTexture) {\n      material.occlusionTexture.texture = this.getTexture(material.occlusionTexture.index);\n    }\n    if (material.emissiveTexture) {\n      material.emissiveTexture.texture = this.getTexture(material.emissiveTexture.index);\n    }\n\n    if (material.pbrMetallicRoughness) {\n      const mr = material.pbrMetallicRoughness;\n      if (mr.baseColorTexture) {\n        mr.baseColorTexture.texture = this.getTexture(mr.baseColorTexture.index);\n      }\n      if (mr.metallicRoughnessTexture) {\n        mr.metallicRoughnessTexture.texture = this.getTexture(mr.metallicRoughnessTexture.index);\n      }\n    }\n  }\n\n  _resolveAccessor(accessor, index) {\n    accessor.id = `accessor-${index}`;\n    if (accessor.bufferView !== undefined) {\n      // Draco encoded meshes don't have bufferView\n      accessor.bufferView = this.getBufferView(accessor.bufferView);\n    }\n\n    // Look up enums\n    accessor.bytesPerComponent = getBytesFromComponentType(accessor);\n    accessor.components = getSizeFromAccessorType(accessor);\n    accessor.bytesPerElement = accessor.bytesPerComponent * accessor.components;\n  }\n\n  _resolveTexture(texture, index) {\n    texture.id = `texture-${index}`;\n    texture.sampler = 'sampler' in texture ? this.getSampler(texture.sampler) : DEFAULT_SAMPLER;\n    texture.source = this.getImage(texture.source);\n  }\n\n  _resolveSampler(sampler, index) {\n    sampler.id = `sampler-${index}`;\n    // Map textual parameters to GL parameter values\n    sampler.parameters = {};\n    for (const key in sampler) {\n      const glEnum = this._enumSamplerParameter(key);\n      if (glEnum !== undefined) {\n        sampler.parameters[glEnum] = sampler[key];\n      }\n    }\n  }\n\n  _enumSamplerParameter(key) {\n    return SAMPLER_PARAMETER_GLTF_TO_GL[key];\n  }\n\n  _resolveImage(image, index, options) {\n    image.id = `image-${index}`;\n    if (image.bufferView !== undefined) {\n      image.bufferView = this.getBufferView(image.bufferView);\n    }\n\n    // TODO - Handle non-binary-chunk images, data URIs, URLs etc\n    // TODO - Image creation could be done on getImage instead of during load\n    const {createImages = true} = options;\n    if (createImages) {\n      image.image = this.glbParser.getImage(image);\n    } else {\n      image.getImageAsync = () => {\n        if (this.glbParser) {\n          return this.glbParser.getImageAsync(image);\n        } else if (image.uri) {\n          // TODO: Maybe just return the URL?\n          // TODO: Maybe use loaders.gl/core loadImage?\n          return new Promise(resolve => {\n            /* global Image */\n            const img = new Image();\n            img.crossOrigin = 'anonymous';\n            img.onload = () => resolve(img);\n            img.src = getFullUri(image.uri, options.uri);\n          });\n        }\n\n        // cannot get image\n        return null;\n      };\n    }\n  }\n\n  _resolveBufferView(bufferView, index) {\n    bufferView.id = `bufferView-${index}`;\n    bufferView.buffer = this.getBuffer(bufferView.buffer);\n\n    if (this.glbParser) {\n      bufferView.data = this.glbParser.getBufferView(bufferView);\n    } else {\n      const byteOffset = bufferView.byteOffset || 0;\n      bufferView.data = new Uint8Array(bufferView.buffer.data, byteOffset, bufferView.byteLength);\n    }\n  }\n\n  _resolveCamera(camera) {\n    // TODO - create 4x4 matrices\n    if (camera.perspective) {\n      // camera.matrix = createPerspectiveMatrix(camera.perspective);\n    }\n    if (camera.orthographic) {\n      // camera.matrix = createOrthographicMatrix(camera.orthographic);\n    }\n  }\n\n  // EXTENSIONS\n\n  // eslint-disable-next-line camelcase\n  _process_extension_KHR_lights_punctual() {\n    const {gltf} = this;\n\n    // Move the light array out of the extension and remove the extension\n    const extension = gltf.extensions && gltf.extensions.KHR_lights_punctual;\n    if (extension) {\n      gltf.lights = extension.lights;\n    }\n\n    this._removeExtension('KHR_lights_punctual');\n\n    // Any nodes that have the extension, add lights field pointing to light object\n    // and remove the extension\n    for (const node of gltf.nodes || []) {\n      const nodeExtension = node.extensions && node.extensions.KHR_lights_punctual;\n      if (nodeExtension) {\n        node.light = this._get('lights', nodeExtension.light);\n        delete node.extensions.KHR_lights_punctual;\n      }\n    }\n\n    delete gltf.lights;\n  }\n\n  // Removes an extension from the top-level list\n  _removeExtension(extensionName) {\n    if (this.gltf.extensionsRequired) {\n      this._removeStringFromArray(this.gltf.extensionsRequired, extensionName);\n    }\n    if (this.gltf.extensionsUsed) {\n      this._removeStringFromArray(this.gltf.extensionsUsed, extensionName);\n    }\n    if (this.gltf.extensions) {\n      delete this.gltf.extensions[extensionName];\n    }\n  }\n\n  _removeStringFromArray(array, string) {\n    let found = true;\n    while (found) {\n      const index = array.indexOf(string);\n      if (index > -1) {\n        array.splice(index, 1);\n      } else {\n        found = false;\n      }\n    }\n  }\n}\n"],"file":"gltf-post-processor-old.js"}