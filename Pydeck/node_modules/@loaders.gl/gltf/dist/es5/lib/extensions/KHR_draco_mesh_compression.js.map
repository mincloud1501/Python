{"version":3,"sources":["../../../../src/lib/extensions/KHR_draco_mesh_compression.js"],"names":["meshPrimitiveIterator","KHR_draco_mesh_compression","gltfData","options","decompress","scenegraph","GLTFScenegraph","promises","primitive","getObjectExtension","KHR_DRACO_MESH_COMPRESSION","push","decompressPrimitive","Promise","all","removeExtension","getRequiredExtension","Error","json","meshes","mesh","compressMesh","addRequiredExtension","compressedPrimitive","buffer","getTypedArrayForBufferView","bufferView","subArray","Uint8Array","subarray","byteOffset","bufferCopy","decodedData","attributes","indices","checkPrimitive","mode","DracoWriter","DracoLoader","compressedData","encodeSync","parseSync","fauxAccessors","_addFauxAttributes","bufferViewIndex","addBufferView","glTFMesh","primitives","extensions","Object","keys","length"],"mappings":"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","sourcesContent":["// https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_draco_mesh_compression\n// Only TRIANGLES: 0x0004 and TRIANGLE_STRIP: 0x0005 are supported\n\n/* eslint-disable camelcase */\nimport GLTFScenegraph from '../gltf-scenegraph';\nimport {KHR_DRACO_MESH_COMPRESSION} from '../gltf-constants';\nimport {getGLTFAccessors, getGLTFAccessor} from '../gltf-utils/gltf-attribute-utils';\nimport {parse} from '@loaders.gl/core';\n\nexport default class KHR_draco_mesh_compression {\n  static get name() {\n    return KHR_DRACO_MESH_COMPRESSION;\n  }\n\n  // Note: We have a \"soft dependency\" on Draco to avoid bundling it when not needed\n  static async decode(gltfData, options = {}) {\n    if (!options.decompress) {\n      return;\n    }\n\n    const scenegraph = new GLTFScenegraph(gltfData);\n    const promises = [];\n    for (const primitive of meshPrimitiveIterator(scenegraph)) {\n      if (scenegraph.getObjectExtension(primitive, KHR_DRACO_MESH_COMPRESSION)) {\n        promises.push(decompressPrimitive(primitive, scenegraph, options));\n      }\n    }\n\n    // Decompress meshes in parallel\n    await Promise.all(promises);\n\n    // We have now decompressed all primitives, so remove the top-level extensions\n    scenegraph.removeExtension(KHR_DRACO_MESH_COMPRESSION);\n  }\n\n  static decodeSync(gltfData, options) {\n    if (!options.decompress) {\n      return;\n    }\n    const scenegraph = new GLTFScenegraph(gltfData);\n    if (scenegraph.getRequiredExtension(KHR_DRACO_MESH_COMPRESSION)) {\n      throw new Error('Cannot synchronously decode Draco');\n    }\n    // TODO - we can support sync decoding, let's just keep code/bundle size in check...\n  }\n\n  static encode(gltfData, options = {}) {\n    const scenegraph = new GLTFScenegraph(gltfData);\n\n    for (const mesh of scenegraph.json.meshes || []) {\n      // eslint-disable-next-line camelcase\n      compressMesh(mesh, options);\n      // NOTE: Only add the extension if something was actually compressed\n      scenegraph.addRequiredExtension(KHR_DRACO_MESH_COMPRESSION);\n    }\n  }\n}\n\n// PRIVATE\n\n// Unpacks one mesh primitive and removes the extension from the primitive\n// DracoDecoder needs to be imported and registered by app\n// Returns: Promise that resolves when all pending draco decoder jobs for this mesh complete\n\n// TODO - Implement fallback behavior per KHR_DRACO_MESH_COMPRESSION spec\n\nasync function decompressPrimitive(primitive, scenegraph, options) {\n  const compressedPrimitive = scenegraph.getObjectExtension(primitive, KHR_DRACO_MESH_COMPRESSION);\n\n  // eslint-disable-next-line\n  const buffer = scenegraph.getTypedArrayForBufferView(compressedPrimitive.bufferView);\n\n  // TODO - parse does not yet deal well with byte offsets embedded in typed arrays. Copy buffer\n  const subArray = new Uint8Array(buffer.buffer).subarray(buffer.byteOffset); // , buffer.byteLength);\n  const bufferCopy = new Uint8Array(subArray);\n\n  const decodedData = await parse(bufferCopy);\n\n  primitive.attributes = getGLTFAccessors(decodedData.attributes);\n  if (decodedData.indices) {\n    primitive.indices = getGLTFAccessor(decodedData.indices);\n  }\n\n  // Extension has been processed, delete it\n  // delete primitive.extensions[KHR_DRACO_MESH_COMPRESSION];\n\n  checkPrimitive(primitive);\n}\n\n// eslint-disable-next-line max-len\n// Only TRIANGLES: 0x0004 and TRIANGLE_STRIP: 0x0005 are supported\nfunction compressMesh(attributes, indices, mode = 4, options = {}) {\n  if (!options.DracoWriter || !options.DracoLoader) {\n    throw new Error('DracoWriter/DracoLoader not available');\n  }\n\n  // TODO - use registered DracoWriter...\n  const compressedData = options.DracoWriter.encodeSync({attributes});\n\n  // Draco compression may change the order and number of vertices in a mesh.\n  // To satisfy the requirement that accessors properties be correct for both\n  // compressed and uncompressed data, generators should create uncompressed\n  // attributes and indices using data that has been decompressed from the Draco buffer,\n  // rather than the original source data.\n  const decodedData = options.DracoLoader.parseSync({attributes});\n  const fauxAccessors = options._addFauxAttributes(decodedData.attributes);\n\n  const bufferViewIndex = options.addBufferView(compressedData);\n\n  const glTFMesh = {\n    primitives: [\n      {\n        attributes: fauxAccessors, // TODO - verify with spec\n        mode, // GL.POINTS\n        extensions: {\n          [KHR_DRACO_MESH_COMPRESSION]: {\n            bufferView: bufferViewIndex,\n            attributes: fauxAccessors // TODO - verify with spec\n          }\n        }\n      }\n    ]\n  };\n\n  return glTFMesh;\n}\n\nfunction checkPrimitive(primitive) {\n  if (!primitive.attributes && Object.keys(primitive.attributes).length > 0) {\n    throw new Error('Empty glTF primitive detected: Draco decompression failure?');\n  }\n}\n\nfunction* meshPrimitiveIterator(scenegraph) {\n  for (const mesh of scenegraph.json.meshes || []) {\n    for (const primitive of mesh.primitives) {\n      yield primitive;\n    }\n  }\n}\n"],"file":"KHR_draco_mesh_compression.js"}