{"version":3,"sources":["../../../../src/lib/extensions/extensions.js"],"names":["EXTENSIONS","KHR_draco_mesh_compression","KHR_lights_punctual","decodeExtensions","gltf","options","extensionName","disableExtension","extension","decode","decodeExtensionsSync","decodeSync"],"mappings":";;;;;;;;;;;;;;;AACA;;AACA;;AAGO,IAAMA,UAAU,GAAG;AACxBC,EAAAA,0BAA0B,EAA1BA,sCADwB;AAExBC,EAAAA,mBAAmB,EAAnBA;AAFwB,CAAnB;;;SAKeC,gB;;;;;sFAAf,iBAAgCC,IAAhC,EAAsCC,OAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uDACuBL,UADvB;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACMM,YAAAA,aADN;AAEGC,YAAAA,gBAFH,GAEsBD,aAAa,IAAID,OAAjB,IAA4B,CAACA,OAAO,CAACC,aAAD,CAF1D;;AAAA,gBAGEC,gBAHF;AAAA;AAAA;AAAA;;AAIKC,YAAAA,SAJL,GAIiBR,UAAU,CAACM,aAAD,CAJ3B;AAAA;AAAA,mBAOKE,SAAS,CAACC,MAAV,CAAiBL,IAAjB,EAAuBC,OAAvB,CAPL;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAaA,SAASK,oBAAT,CAA8BN,IAA9B,EAAoCC,OAApC,EAA6C;AAClD,OAAK,IAAMC,aAAX,IAA4BN,UAA5B,EAAwC;AACtC,QAAMO,gBAAgB,GAAGD,aAAa,IAAID,OAAjB,IAA4B,CAACA,OAAO,CAACC,aAAD,CAA7D;;AACA,QAAI,CAACC,gBAAL,EAAuB;AACrB,UAAMC,SAAS,GAAGR,UAAU,CAACM,aAAD,CAA5B;AACAE,MAAAA,SAAS,CAACG,UAAV,CAAqBP,IAArB,EAA2BC,OAA3B;AACD;AACF;AACF","sourcesContent":["/* eslint-disable camelcase */\nimport KHR_draco_mesh_compression from './KHR_draco_mesh_compression';\nimport KHR_lights_punctual from './KHR_lights_punctual';\n// import UBER_POINT_CLOUD_COMPRESSION from './KHR_draco_mesh_compression';\n\nexport const EXTENSIONS = {\n  KHR_draco_mesh_compression,\n  KHR_lights_punctual\n};\n\nexport async function decodeExtensions(gltf, options) {\n  for (const extensionName in EXTENSIONS) {\n    const disableExtension = extensionName in options && !options[extensionName];\n    if (!disableExtension) {\n      const extension = EXTENSIONS[extensionName];\n      // Note: We decode extensions sequentially, this might not be necessary\n      // Currently we only have glTF, but when we add Basis we may revisit\n      await extension.decode(gltf, options);\n      // TODO - warn if extension cannot be decoded synchronously?\n    }\n  }\n}\n\nexport function decodeExtensionsSync(gltf, options) {\n  for (const extensionName in EXTENSIONS) {\n    const disableExtension = extensionName in options && !options[extensionName];\n    if (!disableExtension) {\n      const extension = EXTENSIONS[extensionName];\n      extension.decodeSync(gltf, options);\n    }\n  }\n}\n"],"file":"extensions.js"}