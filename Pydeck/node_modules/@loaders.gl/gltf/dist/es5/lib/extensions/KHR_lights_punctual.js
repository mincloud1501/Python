"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _gltfScenegraph = _interopRequireDefault(require("../gltf-scenegraph"));

var _gltfConstants = require("../gltf-constants");

var _assert = _interopRequireDefault(require("../utils/assert"));

var KHR_lights_punctual = function () {
  function KHR_lights_punctual() {
    (0, _classCallCheck2["default"])(this, KHR_lights_punctual);
  }

  (0, _createClass2["default"])(KHR_lights_punctual, null, [{
    key: "decode",
    value: function decode(gltfData, options) {
      var gltfScenegraph = new _gltfScenegraph["default"](gltfData);
      var extension = gltfScenegraph.getExtension(_gltfConstants.KHR_LIGHTS_PUNCTUAL);

      if (extension) {
        gltfScenegraph.json.lights = extension.lights;
        gltfScenegraph.removeExtension(_gltfConstants.KHR_LIGHTS_PUNCTUAL);
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = (gltfScenegraph.nodes || [])[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var node = _step.value;
          var nodeExtension = node.extensions && node.extensions.KHR_lights_punctual;

          if (nodeExtension) {
            node.light = gltfScenegraph._get('lights', nodeExtension.light);
            delete node.extensions.KHR_lights_punctual;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
  }, {
    key: "encode",
    value: function encode(gltfData, options) {
      var gltfScenegraph = new _gltfScenegraph["default"](gltfData);
      var json = gltfScenegraph.json;

      if (json.lights) {
        var extension = gltfScenegraph.addExtensions(_gltfConstants.KHR_LIGHTS_PUNCTUAL);
        (0, _assert["default"])(!extension.lights);
        extension.lights = json.lights;
        delete json.lights;
      }

      if (gltfScenegraph.json.lights) {
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = gltfScenegraph.json.lights[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var light = _step2.value;
            var node = light.node;
            gltfScenegraph.addObjectExtension(node, _gltfConstants.KHR_LIGHTS_PUNCTUAL, light);
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
              _iterator2["return"]();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        delete gltfScenegraph.json.lights;
      }
    }
  }, {
    key: "name",
    get: function get() {
      return _gltfConstants.KHR_LIGHTS_PUNCTUAL;
    }
  }]);
  return KHR_lights_punctual;
}();

exports["default"] = KHR_lights_punctual;
//# sourceMappingURL=KHR_lights_punctual.js.map