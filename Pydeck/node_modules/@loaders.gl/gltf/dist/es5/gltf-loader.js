"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parse = parse;
exports.parseSync = parseSync;
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _parseGltf = require("./lib/parse-gltf");

var _gltfParser = _interopRequireDefault(require("./lib/deprecated/gltf-parser"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var defaultOptions = {
  gltf: {
    parserVersion: 1
  },
  uri: ''
};
var _default = {
  name: 'glTF',
  extensions: ['gltf', 'glb'],
  mimeType: 'model/gltf+json',
  text: true,
  binary: true,
  test: 'glTF',
  parse: parse,
  parseSync: parseSync,
  defaultOptions: defaultOptions
};
exports["default"] = _default;

function parse(_x) {
  return _parse.apply(this, arguments);
}

function _parse() {
  _parse = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee(arrayBuffer) {
    var options,
        context,
        gltfParser,
        _options2,
        _options2$byteOffset,
        byteOffset,
        gltf,
        _args = arguments;

    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
            context = _args.length > 2 ? _args[2] : undefined;
            options = _objectSpread({}, defaultOptions, {}, options);

            if (!(options.gltf.parserVersion !== 2 && options.useGLTFParser !== false)) {
              _context.next = 6;
              break;
            }

            gltfParser = new _gltfParser["default"]();
            return _context.abrupt("return", gltfParser.parse(arrayBuffer, options));

          case 6:
            _options2 = options, _options2$byteOffset = _options2.byteOffset, byteOffset = _options2$byteOffset === void 0 ? 0 : _options2$byteOffset;
            gltf = {};
            _context.next = 10;
            return (0, _parseGltf.parseGLTF)(gltf, arrayBuffer, byteOffset, options, context);

          case 10:
            return _context.abrupt("return", _context.sent);

          case 11:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _parse.apply(this, arguments);
}

function parseSync(arrayBuffer) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var context = arguments.length > 2 ? arguments[2] : undefined;
  options = _objectSpread({}, defaultOptions, {}, options);

  if (options.gltf.parserVersion !== 2 && options.useGLTFParser !== false) {
    return new _gltfParser["default"]().parseSync(arrayBuffer, options);
  }

  var _options = options,
      _options$byteOffset = _options.byteOffset,
      byteOffset = _options$byteOffset === void 0 ? 0 : _options$byteOffset;
  var gltf = {};
  return (0, _parseGltf.parseGLTFSync)(gltf, arrayBuffer, byteOffset, options, context);
}
//# sourceMappingURL=gltf-loader.js.map