"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _toArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toArray"));

var _require = require('@loaders.gl/gltf'),
    GLBParser = _require.GLBParser,
    GLTFParser = _require.GLTFParser;

var _require2 = require('@loaders.gl/core'),
    toArrayBuffer = _require2.toArrayBuffer;

var fs = require('fs');

var MAX_LENGTH = 76;

function printHelp() {
  console.log('glbdump: no glb files specified...');
  console.log('glbdump --json Pretty prints the JSON chunk...');
  console.log('glbdump --gltf Parses as glTF and pretty prints all scenes...');
  process.exit(0);
}

var options;

function main() {
  var _process$argv = (0, _toArray2["default"])(process.argv),
      args = _process$argv.slice(2);

  if (args.length === 0) {
    printHelp();
  }

  options = parseOptions(args);
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = args[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var filename = _step.value;

      if (filename.indexOf('--') !== 0) {
        dumpFile(filename);
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
}

main();

function dumpFile(filename) {
  console.log("\nGLB dump of ".concat(filename, ":"));
  var binary = fs.readFileSync(filename);
  var arrayBuffer = toArrayBuffer(binary);
  var data = new GLBParser().parseSync(arrayBuffer, {
    ignoreMagic: true
  }).getJSON();

  if (options.dumpGLTF) {
    dumpGLTFScenes(data);
  } else {
    dumpGLBSegments(data);
  }

  if (options.dumpJSON) {
    console.log(JSON.stringify(data, null, 2));
  }
}

function dumpGLBSegments(data) {
  for (var key in data) {
    var array = data[key];

    if (Array.isArray(array)) {
      logArray(key, array);
    } else if (array && (0, _typeof2["default"])(array) === 'object') {
      logObject(key, array);
    }
  }
}

var prevHeading = null;

function printHeading(heading) {
  if (heading !== prevHeading) {
    console.log(heading.toUpperCase());
    prevHeading = heading;
  }
}

function logArray(key, array) {
  array.forEach(function (object, i) {
    printHeading(key);
    console.log(" ".concat(i, ": ").concat(JSON.stringify(object).slice(0, MAX_LENGTH), "..."));
  });
}

function logObject(field, object) {
  Object.keys(object).forEach(function (key, i) {
    printHeading(field);
    console.log(" ".concat(i, ": ").concat(JSON.stringify(object[key]).slice(0, MAX_LENGTH), "..."));
  });
}

function dumpGLTFScenes(data) {
  var gltfParser = new GLTFParser();
  var gltf = gltfParser.parseSync(data);

  if (gltf.asset) {
    console.log(JSON.stringify(gltf.asset, null, 2));
  }

  var scenes = gltf.scenes || [];
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = scenes[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var scene = _step2.value;
      console.log(JSON.stringify(scene, null, 2));
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
        _iterator2["return"]();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }
}

function parseOptions(args) {
  var opts = {
    dumpJSON: false
  };
  var _iteratorNormalCompletion3 = true;
  var _didIteratorError3 = false;
  var _iteratorError3 = undefined;

  try {
    for (var _iterator3 = args[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
      var arg = _step3.value;

      if (arg.indexOf('--') === 0) {
        switch (arg) {
          case '--json':
            opts.dumpJSON = true;
            break;

          case '--gltf':
            opts.dumpGLTF = true;
            break;

          case '--help':
            printHelp();
            break;

          default:
            console.warn("Unknown option ".concat(arg));
        }
      }
    }
  } catch (err) {
    _didIteratorError3 = true;
    _iteratorError3 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
        _iterator3["return"]();
      }
    } finally {
      if (_didIteratorError3) {
        throw _iteratorError3;
      }
    }
  }

  return opts;
}