{"version":3,"sources":["../../src/type-utils.js"],"names":["Vector3","isArray","toRadians","toDegrees","config","WGS84_CONSTANTS","noop","x","scratchVector","fromCartographic","cartographic","vector","map","longitude","latitude","height","y","z","fromCartographicToRadians","cartographicRadians","fromCartographicToDegrees","toCartographic","toCartographicFromRadians","toCartographicFromDegrees","isWGS84","from","oneOverRadiiSquared","centerToleranceSquared","x2","y2","z2","Math","abs"],"mappings":"AAGA,SAAQA,OAAR,EAAiBC,OAAjB,EAA0BC,SAA1B,EAAqCC,SAArC,EAAgDC,MAAhD,QAA6D,SAA7D;AACA,SAAQC,eAAR,QAA8B,aAA9B;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAAAC,CAAC;AAAA,SAAIA,CAAJ;AAAA,CAAd;;AAEA,IAAMC,aAAa,GAAG,IAAIR,OAAJ,EAAtB;AAEA,OAAO,SAASS,gBAAT,CAA0BC,YAA1B,EAAwCC,MAAxC,EAA4D;AAAA,MAAZC,GAAY,uEAANN,IAAM;;AACjE,MAAIL,OAAO,CAACS,YAAD,CAAX,EAA2B;AACzBC,IAAAA,MAAM,CAAC,CAAD,CAAN,GAAYC,GAAG,CAACF,YAAY,CAAC,CAAD,CAAb,CAAf;AACAC,IAAAA,MAAM,CAAC,CAAD,CAAN,GAAYC,GAAG,CAACF,YAAY,CAAC,CAAD,CAAb,CAAf;AACAC,IAAAA,MAAM,CAAC,CAAD,CAAN,GAAYD,YAAY,CAAC,CAAD,CAAxB;AACD,GAJD,MAIO,IAAI,eAAeA,YAAnB,EAAiC;AACtCC,IAAAA,MAAM,CAAC,CAAD,CAAN,GAAYC,GAAG,CAACF,YAAY,CAACG,SAAd,CAAf;AACAF,IAAAA,MAAM,CAAC,CAAD,CAAN,GAAYC,GAAG,CAACF,YAAY,CAACI,QAAd,CAAf;AACAH,IAAAA,MAAM,CAAC,CAAD,CAAN,GAAYD,YAAY,CAACK,MAAzB;AACD,GAJM,MAIA;AACLJ,IAAAA,MAAM,CAAC,CAAD,CAAN,GAAYC,GAAG,CAACF,YAAY,CAACH,CAAd,CAAf;AACAI,IAAAA,MAAM,CAAC,CAAD,CAAN,GAAYC,GAAG,CAACF,YAAY,CAACM,CAAd,CAAf;AACAL,IAAAA,MAAM,CAAC,CAAD,CAAN,GAAYD,YAAY,CAACO,CAAzB;AACD;;AACD,SAAON,MAAP;AACD;AAED,OAAO,SAASO,yBAAT,CAAmCR,YAAnC,EAAyE;AAAA,MAAxBC,MAAwB,uEAAfH,aAAe;AAC9E,SAAOC,gBAAgB,CAACC,YAAD,EAAeC,MAAf,EAAuBP,MAAM,CAACe,mBAAP,GAA6Bb,IAA7B,GAAoCJ,SAA3D,CAAvB;AACD;AAED,OAAO,SAASkB,yBAAT,CAAmCV,YAAnC,EAAyE;AAAA,MAAxBC,MAAwB,uEAAfH,aAAe;AAC9E,SAAOC,gBAAgB,CAACC,YAAD,EAAeC,MAAf,EAAuBP,MAAM,CAACe,mBAAP,GAA6BhB,SAA7B,GAAyCG,IAAhE,CAAvB;AACD;AAED,OAAO,SAASe,cAAT,CAAwBV,MAAxB,EAAgCD,YAAhC,EAA0D;AAAA,MAAZE,GAAY,uEAANN,IAAM;;AAC/D,MAAIL,OAAO,CAACS,YAAD,CAAX,EAA2B;AACzBA,IAAAA,YAAY,CAAC,CAAD,CAAZ,GAAkBE,GAAG,CAACD,MAAM,CAAC,CAAD,CAAP,CAArB;AACAD,IAAAA,YAAY,CAAC,CAAD,CAAZ,GAAkBE,GAAG,CAACD,MAAM,CAAC,CAAD,CAAP,CAArB;AACAD,IAAAA,YAAY,CAAC,CAAD,CAAZ,GAAkBC,MAAM,CAAC,CAAD,CAAxB;AACD,GAJD,MAIO,IAAI,eAAeD,YAAnB,EAAiC;AACtCA,IAAAA,YAAY,CAACG,SAAb,GAAyBD,GAAG,CAACD,MAAM,CAAC,CAAD,CAAP,CAA5B;AACAD,IAAAA,YAAY,CAACI,QAAb,GAAwBF,GAAG,CAACD,MAAM,CAAC,CAAD,CAAP,CAA3B;AACAD,IAAAA,YAAY,CAACK,MAAb,GAAsBJ,MAAM,CAAC,CAAD,CAA5B;AACD,GAJM,MAIA;AACLD,IAAAA,YAAY,CAACH,CAAb,GAAiBK,GAAG,CAACD,MAAM,CAAC,CAAD,CAAP,CAApB;AACAD,IAAAA,YAAY,CAACM,CAAb,GAAiBJ,GAAG,CAACD,MAAM,CAAC,CAAD,CAAP,CAApB;AACAD,IAAAA,YAAY,CAACO,CAAb,GAAiBN,MAAM,CAAC,CAAD,CAAvB;AACD;;AACD,SAAOD,YAAP;AACD;AAED,OAAO,SAASY,yBAAT,CAAmCX,MAAnC,EAA2CD,YAA3C,EAAyD;AAC9D,SAAOW,cAAc,CAACV,MAAD,EAASD,YAAT,EAAuBN,MAAM,CAACe,mBAAP,GAA6Bb,IAA7B,GAAoCH,SAA3D,CAArB;AACD;AAED,OAAO,SAASoB,yBAAT,CAAmCZ,MAAnC,EAA2CD,YAA3C,EAAyD;AAC9D,SAAOW,cAAc,CAACV,MAAD,EAASD,YAAT,EAAuBN,MAAM,CAACe,mBAAP,GAA6BjB,SAA7B,GAAyCI,IAAhE,CAArB;AACD;AAED,OAAO,SAASkB,OAAT,CAAiBb,MAAjB,EAAyB;AAC9B,MAAI,CAACA,MAAL,EAAa;AACX,WAAO,KAAP;AACD;;AACDH,EAAAA,aAAa,CAACiB,IAAd,CAAmBd,MAAnB;AAJ8B,MAKvBe,mBALuB,GAKwBrB,eALxB,CAKvBqB,mBALuB;AAAA,MAKFC,sBALE,GAKwBtB,eALxB,CAKFsB,sBALE;AAM9B,MAAMC,EAAE,GAAGjB,MAAM,CAAC,CAAD,CAAN,GAAYA,MAAM,CAAC,CAAD,CAAlB,GAAwBe,mBAAmB,CAAC,CAAD,CAAtD;AACA,MAAMG,EAAE,GAAGlB,MAAM,CAAC,CAAD,CAAN,GAAYA,MAAM,CAAC,CAAD,CAAlB,GAAwBe,mBAAmB,CAAC,CAAD,CAAtD;AACA,MAAMI,EAAE,GAAGnB,MAAM,CAAC,CAAD,CAAN,GAAYA,MAAM,CAAC,CAAD,CAAlB,GAAwBe,mBAAmB,CAAC,CAAD,CAAtD;AACA,SAAOK,IAAI,CAACC,GAAL,CAASJ,EAAE,GAAGC,EAAL,GAAUC,EAAV,GAAe,CAAxB,IAA6BH,sBAApC;AACD","sourcesContent":["// This file is derived from the Cesium math library under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {Vector3, isArray, toRadians, toDegrees, config} from 'math.gl';\nimport {WGS84_CONSTANTS} from './constants';\n\nconst noop = x => x;\n\nconst scratchVector = new Vector3();\n\nexport function fromCartographic(cartographic, vector, map = noop) {\n  if (isArray(cartographic)) {\n    vector[0] = map(cartographic[0]);\n    vector[1] = map(cartographic[1]);\n    vector[2] = cartographic[2];\n  } else if ('longitude' in cartographic) {\n    vector[0] = map(cartographic.longitude);\n    vector[1] = map(cartographic.latitude);\n    vector[2] = cartographic.height;\n  } else {\n    vector[0] = map(cartographic.x);\n    vector[1] = map(cartographic.y);\n    vector[2] = cartographic.z;\n  }\n  return vector;\n}\n\nexport function fromCartographicToRadians(cartographic, vector = scratchVector) {\n  return fromCartographic(cartographic, vector, config.cartographicRadians ? noop : toRadians);\n}\n\nexport function fromCartographicToDegrees(cartographic, vector = scratchVector) {\n  return fromCartographic(cartographic, vector, config.cartographicRadians ? toDegrees : noop);\n}\n\nexport function toCartographic(vector, cartographic, map = noop) {\n  if (isArray(cartographic)) {\n    cartographic[0] = map(vector[0]);\n    cartographic[1] = map(vector[1]);\n    cartographic[2] = vector[2];\n  } else if ('longitude' in cartographic) {\n    cartographic.longitude = map(vector[0]);\n    cartographic.latitude = map(vector[1]);\n    cartographic.height = vector[2];\n  } else {\n    cartographic.x = map(vector[0]);\n    cartographic.y = map(vector[1]);\n    cartographic.z = vector[2];\n  }\n  return cartographic;\n}\n\nexport function toCartographicFromRadians(vector, cartographic) {\n  return toCartographic(vector, cartographic, config.cartographicRadians ? noop : toDegrees);\n}\n\nexport function toCartographicFromDegrees(vector, cartographic) {\n  return toCartographic(vector, cartographic, config.cartographicRadians ? toRadians : noop);\n}\n\nexport function isWGS84(vector) {\n  if (!vector) {\n    return false;\n  }\n  scratchVector.from(vector);\n  const {oneOverRadiiSquared, centerToleranceSquared} = WGS84_CONSTANTS;\n  const x2 = vector[0] * vector[0] * oneOverRadiiSquared[0];\n  const y2 = vector[1] * vector[1] * oneOverRadiiSquared[1];\n  const z2 = vector[2] * vector[2] * oneOverRadiiSquared[2];\n  return Math.abs(x2 + y2 + z2 - 1) < centerToleranceSquared;\n}\n"],"file":"type-utils.js"}