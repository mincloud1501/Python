{"version":3,"sources":["../../../src/lib/plane.js"],"names":["Vector3","equals","assert","MathUtils","scratchPosition","scratchNormal","Plane","constructor","normal","distance","fromNormalDistance","Number","isFinite","from","normalize","fromPointNormal","point","dot","fromCoefficients","a","b","c","d","set","len","clone","plane","right","getPointDistance","transform","matrix4","copy","transformAsVector","scale","projectPointOntoPlane","result","pointDistance","scaledNormal","subtract","to"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium math library under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\n/* eslint-disable */\nimport {Vector3, equals, assert, MathUtils} from 'math.gl';\n\nconst scratchPosition = new Vector3();\nconst scratchNormal = new Vector3();\n\n// A plane in Hessian Normal Form\nexport default class Plane {\n  constructor(normal = [0, 0, 1], distance = 0) {\n    this.normal = new Vector3();\n    this.distance = -0;\n    this.fromNormalDistance(normal, distance);\n  }\n\n  fromNormalDistance(normal, distance) {\n    assert(Number.isFinite(distance));\n    this.normal.from(normal).normalize();\n    this.distance = distance;\n    return this;\n  }\n\n  // Creates a plane from a normal and a point on the plane.\n  fromPointNormal(point, normal) {\n    point = scratchPosition.from(point);\n    this.normal.from(normal).normalize();\n    const distance = -this.normal.dot(point);\n    this.distance = distance;\n\n    return this;\n  }\n\n  // Creates a plane from the general equation\n  fromCoefficients(a, b, c, d) {\n    this.normal.set(a, b, c);\n    assert(this.normal.len() === 1);\n    this.distance = d;\n    return this;\n  }\n\n  // Duplicates a Plane instance.\n  clone(plane) {\n    return new Plane(this.normal, this.distance);\n  }\n\n  // Compares the provided Planes by normal and distance\n  equals(right) {\n    return equals(this.distance, right.distance) && equals(this.normal, right.normal);\n  }\n\n  // Computes the signed shortest distance of a point to a plane.\n  // The sign of the distance determines which side of the plane the point is on.\n  getPointDistance(point) {\n    return this.normal.dot(point) + this.distance;\n  }\n\n  // Transforms the plane by the given transformation matrix.\n  transform(matrix4) {\n    const normal = scratchNormal\n      .copy(this.normal)\n      .transformAsVector(matrix4)\n      .normalize();\n    const point = this.normal.scale(-this.distance).transform(matrix4);\n    return this.fromPointNormal(point, normal);\n  }\n\n  // Projects a point onto the plane.\n  projectPointOntoPlane(point, result = [0, 0, 0]) {\n    point = scratchPosition.from(point);\n    // projectedPoint = point - (normal.point + scale) * normal\n    const pointDistance = this.getPointDistance(point);\n    const scaledNormal = scratchNormal.copy(this.normal).scale(pointDistance);\n\n    return point.subtract(scaledNormal).to(result);\n  }\n}\n"],"file":"plane.js"}