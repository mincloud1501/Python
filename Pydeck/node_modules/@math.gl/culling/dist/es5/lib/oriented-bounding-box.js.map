{"version":3,"sources":["../../../src/lib/oriented-bounding-box.js"],"names":["scratchVector","Vector3","scratchOffset","scratchVectorU","scratchVectorV","scratchVectorW","scratchPPrime","scratchCorner","scratchToCenter","fromOrientedBoundingBoxScratchU","fromOrientedBoundingBoxScratchV","fromOrientedBoundingBoxScratchW","MATRIX3","COLUMN0ROW0","COLUMN0ROW1","COLUMN0ROW2","COLUMN1ROW0","COLUMN1ROW1","COLUMN1ROW2","COLUMN2ROW0","COLUMN2ROW1","COLUMN2ROW2","OrientedBoundingBox","center","halfAxes","from","Matrix3","result","points","right","Boolean","equals","BoundingSphere","u","getColumn","v","w","cornerVector","copy","add","radius","magnitude","plane","normal","normalX","x","normalY","y","normalZ","z","radEffective","Math","abs","distanceToPlane","dot","distance","Intersect","OUTSIDE","INSIDE","INTERSECTING","point","sqrt","distanceSquaredTo","offset","subtract","uHalf","vHalf","wHalf","normalize","pPrime","distanceSquared","d","position","direction","minDist","Number","POSITIVE_INFINITY","maxDist","NEGATIVE_INFINITY","corner","toCenter","mag","min","max","start","stop"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium math library under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {Vector3, Matrix3} from 'math.gl';\nimport BoundingSphere from './bounding-sphere';\nimport {Intersect} from '../constants';\nimport makeOrientedBoundingBoxfromPoints from '../algorithms/bounding-box-from-points';\nconst scratchVector = new Vector3();\n\nconst scratchOffset = new Vector3();\nconst scratchVectorU = new Vector3();\nconst scratchVectorV = new Vector3();\nconst scratchVectorW = new Vector3();\nconst scratchPPrime = new Vector3();\nconst scratchCorner = new Vector3();\nconst scratchToCenter = new Vector3();\n\nconst fromOrientedBoundingBoxScratchU = new Vector3();\nconst fromOrientedBoundingBoxScratchV = new Vector3();\nconst fromOrientedBoundingBoxScratchW = new Vector3();\n\nconst MATRIX3 = {\n  COLUMN0ROW0: 0,\n  COLUMN0ROW1: 1,\n  COLUMN0ROW2: 2,\n  COLUMN1ROW0: 3,\n  COLUMN1ROW1: 4,\n  COLUMN1ROW2: 5,\n  COLUMN2ROW0: 6,\n  COLUMN2ROW1: 7,\n  COLUMN2ROW2: 8\n};\n\nexport default class OrientedBoundingBox {\n  // An OrientedBoundingBox of some object is a closed and convex cuboid. It can provide a tighter bounding volume than {@link BoundingSphere} or {@link AxisAlignedBoundingBox} in many cases.\n  constructor(center = [0, 0, 0], halfAxes = [0, 0, 0, 0, 0, 0, 0, 0, 0]) {\n    this.center = new Vector3().from(center);\n    this.halfAxes = new Matrix3(halfAxes);\n  }\n\n  // Duplicates a OrientedBoundingBox instance.\n  clone(result) {\n    return new OrientedBoundingBox(this.center, this.halfAxes);\n  }\n\n  fromPoints(points, result = new OrientedBoundingBox()) {\n    return makeOrientedBoundingBoxfromPoints(points, result);\n  }\n\n  // Compares the provided OrientedBoundingBox componentwise and returns\n  equals(right) {\n    return (\n      this === right ||\n      (Boolean(right) && this.center.equals(right.center) && this.halfAxes.equals(right.halfAxes))\n    );\n  }\n\n  // Computes a tight-fitting bounding sphere enclosing the provided oriented bounding box.\n  getBoundingSphere(result = new BoundingSphere()) {\n    const halfAxes = this.halfAxes;\n    const u = halfAxes.getColumn(0, fromOrientedBoundingBoxScratchU);\n    const v = halfAxes.getColumn(1, fromOrientedBoundingBoxScratchV);\n    const w = halfAxes.getColumn(2, fromOrientedBoundingBoxScratchW);\n\n    // Calculate \"corner\" vector\n    const cornerVector = scratchVector\n      .copy(u)\n      .add(v)\n      .add(w);\n\n    result.center.copy(this.center);\n    result.radius = cornerVector.magnitude();\n\n    return result;\n  }\n\n  /**\n   * Determines which side of a plane the oriented bounding box is located.\n   *\n   * @param {OrientedBoundingBox} box The oriented bounding box to test.\n   * @param {Plane} plane The plane to test against.\n   * @returns {Intersect} {@link Intersect.INSIDE} if the entire box is on the side of the plane the normal is pointing, {@link Intersect.OUTSIDE} if the entire box is on the opposite side, and {@link Intersect.INTERSECTING} if the box intersects the plane.\n   */\n  intersectPlane(plane) {\n    const center = this.center;\n    const normal = plane.normal;\n    const halfAxes = this.halfAxes;\n\n    const normalX = normal.x;\n    const normalY = normal.y;\n    const normalZ = normal.z;\n\n    // Plane is used as if it is its normal; the first three components are assumed to be normalized\n    const radEffective =\n      Math.abs(\n        normalX * halfAxes[MATRIX3.COLUMN0ROW0] +\n          normalY * halfAxes[MATRIX3.COLUMN0ROW1] +\n          normalZ * halfAxes[MATRIX3.COLUMN0ROW2]\n      ) +\n      Math.abs(\n        normalX * halfAxes[MATRIX3.COLUMN1ROW0] +\n          normalY * halfAxes[MATRIX3.COLUMN1ROW1] +\n          normalZ * halfAxes[MATRIX3.COLUMN1ROW2]\n      ) +\n      Math.abs(\n        normalX * halfAxes[MATRIX3.COLUMN2ROW0] +\n          normalY * halfAxes[MATRIX3.COLUMN2ROW1] +\n          normalZ * halfAxes[MATRIX3.COLUMN2ROW2]\n      );\n    const distanceToPlane = normal.dot(center) + plane.distance;\n\n    if (distanceToPlane <= -radEffective) {\n      // The entire box is on the negative side of the plane normal\n      return Intersect.OUTSIDE;\n    } else if (distanceToPlane >= radEffective) {\n      // The entire box is on the positive side of the plane normal\n      return Intersect.INSIDE;\n    }\n    return Intersect.INTERSECTING;\n  }\n\n  // Computes the estimated distance from the closest point on a bounding box to a point.\n  distanceTo(point) {\n    return Math.sqrt(this.distanceSquaredTo(point));\n  }\n\n  // Computes the estimated distance squared from the closest point on a bounding box to a point.\n  // See Geometric Tools for Computer Graphics 10.4.2\n\n  // eslint-disable-next-line max-statements\n  distanceSquaredTo(point) {\n    const offset = scratchOffset.copy(point).subtract(this.center);\n\n    const halfAxes = this.halfAxes;\n    const u = halfAxes.getColumn(0, scratchVectorU);\n    const v = halfAxes.getColumn(1, scratchVectorV);\n    const w = halfAxes.getColumn(2, scratchVectorW);\n\n    const uHalf = u.magnitude();\n    const vHalf = v.magnitude();\n    const wHalf = w.magnitude();\n\n    u.normalize();\n    v.normalize();\n    w.normalize();\n\n    const pPrime = scratchPPrime;\n    pPrime.x = offset.dot(u);\n    pPrime.y = offset.dot(v);\n    pPrime.z = offset.dot(w);\n\n    let distanceSquared = 0.0;\n    let d;\n\n    if (pPrime.x < -uHalf) {\n      d = pPrime.x + uHalf;\n      distanceSquared += d * d;\n    } else if (pPrime.x > uHalf) {\n      d = pPrime.x - uHalf;\n      distanceSquared += d * d;\n    }\n\n    if (pPrime.y < -vHalf) {\n      d = pPrime.y + vHalf;\n      distanceSquared += d * d;\n    } else if (pPrime.y > vHalf) {\n      d = pPrime.y - vHalf;\n      distanceSquared += d * d;\n    }\n\n    if (pPrime.z < -wHalf) {\n      d = pPrime.z + wHalf;\n      distanceSquared += d * d;\n    } else if (pPrime.z > wHalf) {\n      d = pPrime.z - wHalf;\n      distanceSquared += d * d;\n    }\n\n    return distanceSquared;\n  }\n\n  // The distances calculated by the vector from the center of the bounding box\n  // to position projected onto direction.\n\n  // eslint-disable-next-line max-statements\n  computePlaneDistances(position, direction, result = [[], []]) {\n    let minDist = Number.POSITIVE_INFINITY;\n    let maxDist = Number.NEGATIVE_INFINITY;\n\n    const center = this.center;\n    const halfAxes = this.halfAxes;\n\n    const u = halfAxes.getColumn(0, scratchVectorU);\n    const v = halfAxes.getColumn(1, scratchVectorV);\n    const w = halfAxes.getColumn(2, scratchVectorW);\n\n    // project first corner\n    const corner = scratchCorner\n      .copy(u)\n      .add(v)\n      .add(w)\n      .add(center);\n\n    const toCenter = scratchToCenter.copy(corner).subtract(position);\n    let mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project second corner\n    corner\n      .copy(center)\n      .add(u)\n      .add(v)\n      .subtract(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project third corner\n    corner\n      .copy(center)\n      .add(u)\n      .subtract(v)\n      .add(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project fourth corner\n    corner\n      .copy(center)\n      .add(u)\n      .subtract(v)\n      .subtract(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project fifth corner\n    center\n      .copy(corner)\n      .subtract(u)\n      .add(v)\n      .add(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project sixth corner\n    center\n      .copy(corner)\n      .subtract(u)\n      .add(v)\n      .subtract(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project seventh corner\n    center\n      .copy(corner)\n      .subtract(u)\n      .subtract(v)\n      .add(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project eighth corner\n    center\n      .copy(corner)\n      .subtract(u)\n      .subtract(v)\n      .subtract(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    result.start = minDist;\n    result.stop = maxDist;\n    return result;\n  }\n\n  getTransform() {\n    // const modelMatrix = Matrix4.fromRotationTranslation(this.boundingVolume.halfAxes, this.boundingVolume.center);\n    // return modelMatrix;\n  }\n}\n"],"file":"oriented-bounding-box.js"}