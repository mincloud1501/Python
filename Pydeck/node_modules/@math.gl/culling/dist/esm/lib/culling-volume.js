import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import { Vector3, Vector4, assert } from 'math.gl';
import { Intersect } from '../constants';
import Plane from './plane';
var faces = [new Vector3([1, 0, 0]), new Vector3([0, 1, 0]), new Vector3([0, 0, 1])];
var scratchPlaneCenter = new Vector3();
var scratchPlaneNormal = new Vector3();
var scratchPlane = new Plane(new Vector3(1.0, 0.0, 0.0), 0.0);

var CullingVolume = function () {
  _createClass(CullingVolume, null, [{
    key: "MASK_OUTSIDE",
    get: function get() {
      return 0xffffffff;
    }
  }, {
    key: "MASK_INSIDE",
    get: function get() {
      return 0x00000000;
    }
  }, {
    key: "MASK_INDETERMINATE",
    get: function get() {
      return 0x7fffffff;
    }
  }]);

  function CullingVolume() {
    var planes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

    _classCallCheck(this, CullingVolume);

    this.planes = planes;
    assert(this.planes.every(function (plane) {
      return plane instanceof Plane;
    }));
  }

  _createClass(CullingVolume, [{
    key: "fromBoundingSphere",
    value: function fromBoundingSphere(boundingSphere) {
      this.planes.length = 2 * faces.length;
      var center = boundingSphere.center;
      var radius = boundingSphere.radius;
      var planeIndex = 0;

      for (var _i = 0, _faces = faces; _i < _faces.length; _i++) {
        var faceNormal = _faces[_i];
        var plane0 = this.planes[planeIndex];
        var plane1 = this.planes[planeIndex + 1];

        if (!plane0) {
          plane0 = this.planes[planeIndex] = new Vector4();
        }

        if (!plane1) {
          plane1 = this.planes[planeIndex + 1] = new Vector4();
        }

        var plane0Center = scratchPlaneCenter.copy(faceNormal).scale(-radius).add(center);
        var plane0Distance = -faceNormal.dot(plane0Center);
        plane0.x = faceNormal.x;
        plane0.y = faceNormal.y;
        plane0.z = faceNormal.z;
        plane0.w = plane0Distance;
        var plane1Center = scratchPlaneCenter.copy(faceNormal).scale(radius).add(center);
        var negatedFaceNormal = scratchPlaneNormal.copy(faceNormal).negate();
        var plane1Distance = -negatedFaceNormal.dot(plane1Center);
        plane1.x = negatedFaceNormal.x;
        plane1.y = negatedFaceNormal.y;
        plane1.z = negatedFaceNormal.z;
        plane1.w = plane1Distance;
        planeIndex += 2;
      }

      return this;
    }
  }, {
    key: "computeVisibility",
    value: function computeVisibility(boundingVolume) {
      assert(boundingVolume);
      var intersect = Intersect.INSIDE;
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.planes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var planeCoefficients = _step.value;
          var plane = scratchPlane.fromCoefficients.apply(scratchPlane, _toConsumableArray(planeCoefficients));
          var result = boundingVolume.intersectPlane(plane);

          switch (result) {
            case Intersect.OUTSIDE:
              return Intersect.OUTSIDE;

            case Intersect.INTERSECTING:
              intersect = Intersect.INTERSECTING;
              break;

            default:
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return intersect;
    }
  }, {
    key: "computeVisibilityWithPlaneMask",
    value: function computeVisibilityWithPlaneMask(boundingVolume, parentPlaneMask) {
      assert(boundingVolume, 'boundingVolume is required.');
      assert(Number.isFinite(parentPlaneMask), 'parentPlaneMask is required.');

      if (parentPlaneMask === CullingVolume.MASK_OUTSIDE || parentPlaneMask === CullingVolume.MASK_INSIDE) {
        return parentPlaneMask;
      }

      var mask = CullingVolume.MASK_INSIDE;
      var planes = this.planes;

      for (var k = 0; k < this.planes.length; ++k) {
        var flag = k < 31 ? 1 << k : 0;

        if (k < 31 && (parentPlaneMask & flag) === 0) {
          continue;
        }

        var plane = scratchPlane.fromCoefficients.apply(scratchPlane, _toConsumableArray(planes[k]));
        var result = boundingVolume.intersectPlane(plane);

        if (result === Intersect.OUTSIDE) {
          return CullingVolume.MASK_OUTSIDE;
        } else if (result === Intersect.INTERSECTING) {
          mask |= flag;
        }
      }

      return mask;
    }
  }]);

  return CullingVolume;
}();

export { CullingVolume as default };
//# sourceMappingURL=culling-volume.js.map